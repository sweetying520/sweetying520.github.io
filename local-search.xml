<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Flutter 系列（八）：Flutter 与 Android 的你来我往</title>
    <link href="/2022/10/10/Flutter%20%E7%B3%BB%E5%88%97%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9AFlutter%20%E4%B8%8E%20Android%20%E7%9A%84%E4%BD%A0%E6%9D%A5%E6%88%91%E5%BE%80/"/>
    <url>/2022/10/10/Flutter%20%E7%B3%BB%E5%88%97%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9AFlutter%20%E4%B8%8E%20Android%20%E7%9A%84%E4%BD%A0%E6%9D%A5%E6%88%91%E5%BE%80/</url>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sweetying520/picgo/master/img/202210101704046.jpeg" alt="rapeseed-6599950_1920"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>很高兴遇见你~</p><p>在本系列的上一篇文章中，我们介绍了 Flutter 中的路由：</p><blockquote><p>1、基本路由</p><p>2、命名路由</p><p>3、返回上一级</p><p>4、替换路由</p><p>5、返回到根路由</p></blockquote><p>以及集成 http 库进行 https 请求实战。</p><p>还没有看过上一篇文章的朋友，建议先去阅读 <a href="https://juejin.cn/post/7142650961868095524#heading-11">Flutter 系列（七）：Flutter 路由和 HTTPS 请求实战</a>。接下来我们对 Flutter 与 Android 原生的交互与通信进行介绍</p><p>我做 Android 原生开发时，通常会以组件化的方式去进行，根据业务划分不同的组件，每个组件都是一个独立的工程，可以进行独立的运行和调试，当需要发版时，我们会将每个组件打成 aar 包并上传到 Maven 私服仓库，然后整合到 App 壳工程中，最终进行打包上线。在这个开发过程中，组件之间是需要进行通信的，如果需要通信的组件都是 Android 原生开发的，那么可以选择一个路由框架进行通信，例如：Arouter。</p><p>但是我们有些业务组件是使用 Flutter 开发的，因此这里就涉及到 Flutter 与 Android 原生的通信，那么它们是如何进行通信的呢？且听我细细道来</p><h2 id="一、Android-壳工程集成-Flutter-组件"><a href="#一、Android-壳工程集成-Flutter-组件" class="headerlink" title="一、Android 壳工程集成 Flutter 组件"></a>一、Android 壳工程集成 Flutter 组件</h2><p>1、打开 AndroidStudio ，创建一个 Android 工程 AndroidAndFlutterInteractive：</p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bf366145424946f193676017f1a2bc42~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220918215022577" width="50%" /><p>2、接着在创建一个 Flutter 工程 fluttermodule：</p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/63073b782a5e4716a0a0a8659673cc28~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220918215214876" width="50%" /><p>main.dart 文件初始代码如下：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class="hljs-keyword">void</span> main() =&gt; runApp(<span class="hljs-keyword">const</span> MyApp());<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyApp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> MyApp(&#123;Key? key&#125;) : <span class="hljs-keyword">super</span>(key: key);<br><br>  <span class="hljs-comment">// This widget is the root of your application.</span><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> MaterialApp(<br>      title: <span class="hljs-string">&#x27;Flutter Demo&#x27;</span>,<br>      theme: ThemeData(<br>        primarySwatch: Colors.blue,<br>      ),<br>      home: <span class="hljs-keyword">const</span> MyHomePage(title: <span class="hljs-string">&#x27;Flutter Demo Home Page&#x27;</span>),<br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyHomePage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatefulWidget</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> MyHomePage(&#123;Key? key, <span class="hljs-keyword">required</span> <span class="hljs-keyword">this</span>.title&#125;) : <span class="hljs-keyword">super</span>(key: key);<br><br>  <span class="hljs-keyword">final</span> <span class="hljs-built_in">String</span> title;<br><br>  <span class="hljs-meta">@override</span><br>  State&lt;MyHomePage&gt; createState() =&gt; _MyHomePageState();<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_MyHomePageState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">MyHomePage</span>&gt; </span>&#123;<br>  <span class="hljs-built_in">int</span> _counter = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-keyword">void</span> _incrementCounter() &#123;<br>    setState(() &#123;<br>      _counter++;<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Scaffold(<br>      appBar: AppBar(<br>        title: Text(widget.title),<br>      ),<br>      body: Center(<br>        child: Column(<br>          mainAxisAlignment: MainAxisAlignment.center,<br>          children: &lt;Widget&gt;[<br>            <span class="hljs-keyword">const</span> Text(<br>              <span class="hljs-string">&#x27;You have clicked the button this many times:&#x27;</span>,<br>            ),<br>            Text(<br>              <span class="hljs-string">&#x27;<span class="hljs-subst">$_counter</span>&#x27;</span>,<br>              style: Theme.of(context).textTheme.headline4,<br>            ),<br>          ],<br>        ),<br>      ),<br>      floatingActionButton: FloatingActionButton(<br>        onPressed: _incrementCounter,<br>        tooltip: <span class="hljs-string">&#x27;Increment&#x27;</span>,<br>        child: <span class="hljs-keyword">const</span> Icon(Icons.add),<br>      ),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3、在 Flutter 工程中执行 <code>flutter build aar</code> 命令或者直接使用 AndroidStudio 上的可视化操作：</p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d61a34bea63840d3a74083913adccf2a~tplv-k3u1fbpfcp-watermark.image?" alt="202209221609588.png" width="70%" /><p>执行完后会有如下提示：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs dart">Consuming the Module<br>  <span class="hljs-number">1.</span> Open &lt;host&gt;/app/build.gradle<br>  <span class="hljs-number">2.</span> Ensure you have the repositories configured, otherwise add them:<br><br>      <span class="hljs-built_in">String</span> storageUrl = System.env.FLUTTER_STORAGE_BASE_URL ?: <span class="hljs-string">&quot;https://storage.googleapis.com&quot;</span><br>      repositories &#123;<br>        maven &#123;<br>            url <span class="hljs-string">&#x27;/Users/zhouying/codeandnotes/Flutter/fluttermodule/build/host/outputs/repo&#x27;</span><br>        &#125;<br>        maven &#123;<br>            url <span class="hljs-string">&quot;<span class="hljs-subst">$storageUrl</span>/download.flutter.io&quot;</span><br>        &#125;<br>      &#125;<br><br>  <span class="hljs-number">3.</span> Make the host app depend <span class="hljs-keyword">on</span> the Flutter module:<br><br>    dependencies &#123;<br>      debugImplementation <span class="hljs-string">&#x27;com.example.fluttermodule:flutter_debug:1.0&#x27;</span><br>      profileImplementation <span class="hljs-string">&#x27;com.example.fluttermodule:flutter_profile:1.0&#x27;</span><br>      releaseImplementation <span class="hljs-string">&#x27;com.example.fluttermodule:flutter_release:1.0&#x27;</span><br>    &#125;<br><br><br>  <span class="hljs-number">4.</span> Add the `profile` build type:<br><br>    android &#123;<br>      buildTypes &#123;<br>        profile &#123;<br>          initWith debug<br>        &#125;<br>      &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>大致意思就是在我们创建的 Android 工程中配置生成的 Flutter aar 的仓库地址，然后引用这个 aar，大家按照上述步骤配置即可</p><p><strong>注意</strong>：上述演示生成的 Flutter aar 只是存在本地，实际开发中，我们会自己编写脚本生成 aar 并上传到 Maven 私服仓库</p><p>配置完成后，同步一下项目，如果没啥报错，我们就算是成功集成了 Flutter 组件</p><h2 id="二、Android-调起-Flutter-页面（FlutterActivity）"><a href="#二、Android-调起-Flutter-页面（FlutterActivity）" class="headerlink" title="二、Android 调起 Flutter 页面（FlutterActivity）"></a>二、Android 调起 Flutter 页面（FlutterActivity）</h2><p>接下来我们继续对 Android 工程进行配置，让 Flutter 页面显示出来</p><p>1、在 Android 工程的 AndroidManifest.xml 文件中添加 FlutterActivity</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dart">&lt;!--注册FlutterActivity--&gt;<br>&lt;activity<br>    android:name=<span class="hljs-string">&quot;io.flutter.embedding.android.FlutterActivity&quot;</span><br>    android:configChanges=<span class="hljs-string">&quot;orientation|keyboardHidden|screenSize&quot;</span><br>    android:hardwareAccelerated=<span class="hljs-string">&quot;true&quot;</span><br>    android:windowSoftInputMode=<span class="hljs-string">&quot;adjustResize&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p>2、编写一个 button 跳转到 Flutter 页面</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">//1、activity_main.xml</span><br>&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;<br>&lt;LinearLayout xmlns:android=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span><br>    xmlns:tools=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span><br>    android:layout_width=<span class="hljs-string">&quot;match_parent&quot;</span><br>    android:layout_height=<span class="hljs-string">&quot;match_parent&quot;</span><br>    android:orientation=<span class="hljs-string">&quot;vertical&quot;</span><br>    tools:context=<span class="hljs-string">&quot;.MainActivity&quot;</span>&gt;<br><br>    &lt;Button<br>        android:layout_width=<span class="hljs-string">&quot;match_parent&quot;</span><br>        android:layout_height=<span class="hljs-string">&quot;wrap_content&quot;</span><br>        android:layout_marginHorizontal=<span class="hljs-string">&quot;20dp&quot;</span><br>        android:textAllCaps=<span class="hljs-string">&quot;false&quot;</span><br>        android:onClick=<span class="hljs-string">&quot;toFlutterActivity&quot;</span><br>        android:text=<span class="hljs-string">&quot;跳转 FlutterActivity&quot;</span><br>        tools:ignore=<span class="hljs-string">&quot;HardcodedText,UsingOnClickInXml&quot;</span> /&gt;<br><br>&lt;/LinearLayout&gt;<br><br><span class="hljs-comment">//2、MainActivity</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainActivity</span> : <span class="hljs-title">AppCompatActivity</span>() </span>&#123;<br>    <br>    <span class="hljs-meta">@SuppressLint</span>(<span class="hljs-string">&quot;SetTextI18n&quot;</span>)<br>    override fun onCreate(savedInstanceState: Bundle?) &#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState)<br>        setContentView(R.layout.activity_main)<br>    &#125;<br><br>    <span class="hljs-comment">//跳转到 FlutterActivity</span><br>    fun toFlutterActivity(view: View) &#123;<br>        val intent = FlutterActivity.createDefaultIntent(<span class="hljs-keyword">this</span>)<br>        startActivity(intent)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3、效果展示：</p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/120d15e966e24a588e0a212d36ffbd7d~tplv-k3u1fbpfcp-watermark.image?" alt="ezgif.com-gif-maker.gif" width="30%" /><p>上述效果图虽然跳过去了，但是我们可以看到点击 button 时一个明显的停顿感，用户体验不好，接下来介绍一种预初始化 Flutter 的方式</p><h3 id="2-1、Android-预初始化-Flutter-页面跳转"><a href="#2-1、Android-预初始化-Flutter-页面跳转" class="headerlink" title="2.1、Android 预初始化 Flutter 页面跳转"></a>2.1、Android 预初始化 Flutter 页面跳转</h3><p>核心思想就是缓存 FlutterEngine，然后从缓存中取出 FlutterEngine 进行跳转</p><p>1、修改 MainActivity ：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainActivity</span> : <span class="hljs-title">AppCompatActivity</span>() </span>&#123;<br><br>    companion object&#123;<br>        <span class="hljs-comment">//缓存 FlutterEngine 的 key</span><br>        <span class="hljs-keyword">const</span> val FLUTTER_ENGINE_ID = <span class="hljs-string">&quot;default&quot;</span><br>    &#125;<br>    <span class="hljs-comment">//FlutterEngine</span><br>    private lateinit <span class="hljs-keyword">var</span> flutterEngine: FlutterEngine<br><br>    <span class="hljs-meta">@SuppressLint</span>(<span class="hljs-string">&quot;SetTextI18n&quot;</span>)<br>    override fun onCreate(savedInstanceState: Bundle?) &#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState)<br>        setContentView(R.layout.activity_main)<br>        <span class="hljs-comment">//初始化 FlutterEngine</span><br>        flutterEngine = initFlutterEngine(FLUTTER_ENGINE_ID)<br>    &#125;<br><br>    <span class="hljs-comment">//跳转到 FlutterActivity</span><br>    fun toFlutterActivity(view: View) &#123;<br>        val intent = FlutterActivity.withCachedEngine(FLUTTER_ENGINE_ID).build(<span class="hljs-keyword">this</span>)<br>        startActivity(intent)<br>    &#125;<br><br>    <span class="hljs-comment"><span class="language-markdown">/<span class="hljs-strong">**</span></span></span><br><span class="hljs-strong"><span class="language-markdown"><span class="hljs-comment">     <span class="hljs-emphasis">* 初始化 FlutterEngine</span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="language-markdown"><span class="hljs-comment">     *</span> 一般在跳转前调用，从缓存中取出 FlutterEngine，这样可以加快我们页面的一个跳转</span></span></span><br><span class="hljs-strong"><span class="language-markdown"><span class="hljs-comment">     <span class="hljs-emphasis">*/</span></span></span></span><br>    private fun initFlutterEngine(engineId: <span class="hljs-built_in">String</span>): FlutterEngine &#123;<br>        <span class="hljs-comment">//创建 FlutterEngine</span><br>        val flutterEngine = FlutterEngine(<span class="hljs-keyword">this</span>)<br>        <span class="hljs-comment">//指定要跳转的 Flutter 页面</span><br>        flutterEngine.navigationChannel.setInitialRoute(<span class="hljs-string">&quot;main&quot;</span>)<br>        flutterEngine.dartExecutor.executeDartEntrypoint(DartExecutor.DartEntrypoint.createDefault())<br>        <span class="hljs-comment">//缓存 FlutterEngine</span><br>        val flutterEngineCache = FlutterEngineCache.getInstance()<br>        flutterEngineCache.put(engineId,flutterEngine)<br>        <span class="hljs-keyword">return</span> flutterEngine<br>    &#125;<br><br>    override fun onDestroy() &#123;<br>        <span class="hljs-keyword">super</span>.onDestroy()<br>        <span class="hljs-comment"><span class="language-markdown"><span class="hljs-strong"><span class="hljs-emphasis">/*</span><span class="hljs-emphasis">*</span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="language-markdown"><span class="hljs-comment">         *</span> 注意这里一定要销毁，否则会导致内存泄漏</span></span></span><br><span class="hljs-strong"><span class="language-markdown"><span class="hljs-comment">         <span class="hljs-emphasis">* 因为 FlutterEngine 比显示它的 FlutterActivity 生命周期要长</span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="language-markdown"><span class="hljs-comment">         *</span> 当我们退出 FlutterActivity 时，FlutterEngine 可能还会继续执行代码</span></span></span><br><span class="hljs-strong"><span class="language-markdown"><span class="hljs-comment">         <span class="hljs-emphasis">* 所以我们应该在 FlutterActivity 退出时调用 flutterEngine.destroy 停止执行并释放资源</span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="language-markdown"><span class="hljs-comment">         *</span>/</span></span></span><br>        flutterEngine.destroy()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、Flutter 端也要做相应的修改：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> main() =&gt; runApp(getRouter(<span class="hljs-built_in">window</span>.defaultRouteName));<br><br><span class="hljs-comment">///<span class="language-markdown">接收 Android 跳转过来的启动路由参数，如果匹配上了走正常流程</span></span><br><span class="hljs-comment">///<span class="language-markdown">如果没匹配上，则提示 page not found</span></span><br>Widget getRouter(<span class="hljs-built_in">String</span> routeName) &#123;<br>  <span class="hljs-keyword">switch</span>(routeName)&#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;main&quot;</span>:<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">const</span> MyApp();<br>    <span class="hljs-keyword">default</span>:<br>      <span class="hljs-keyword">return</span> MaterialApp(<br>        home: Scaffold(<br>          appBar: AppBar(<br>            title: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&quot;Flutter Demo Home Page&quot;</span>),<br>          ),<br>          body: <span class="hljs-keyword">const</span> Center(<br>            child: Text(<br>              <span class="hljs-string">&quot;page not found&quot;</span>,<br>              style: TextStyle(<br>                fontSize: <span class="hljs-number">24</span>,<br>                color: Colors.red<br>              ),<br>            ),<br>          ),<br>        ),<br>      );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3、当我们修改 Flutter 工程的代码后，重新运行 Android 项目并不会生效，我们需要：</p><blockquote><p>1、在 Flutter 工程重新执行 <code>flutter build aar</code> 命令</p><p>2、待 Flutter 命令执行完成，clean Android 工程</p></blockquote><p>此时我们运行 Android 项目，就可以看到效果了：</p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e34d61c673024ce2bdc36f6c13602b0f~tplv-k3u1fbpfcp-watermark.image?" alt="ezgif.com-gif-maker (1).gif" width="30%" /><p>可以看到，页面跳转变得非常丝滑</p><p>现在只是简单的跳转，那么如果我想在跳转时给 Flutter 页面传值要怎么做呢？</p><h3 id="2-2、Android-给-Flutter-页面传值"><a href="#2-2、Android-给-Flutter-页面传值" class="headerlink" title="2.2、Android 给 Flutter 页面传值"></a>2.2、Android 给 Flutter 页面传值</h3><p>分析 2.1 这个例子，我们在 Android 工程中设置了启动路由：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart">flutterEngine.navigationChannel.setInitialRoute(<span class="hljs-string">&quot;main&quot;</span>)<br></code></pre></td></tr></table></figure><p>然后在 Flutter 中通过 <code>window.defaultRouteName</code> 获取了路由</p><p>那么我是否可以在启动路由中多添加一些数据，然后 Flutter 获取后进行解析呢？例如：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">//1、我在 Android 中这样设置</span><br>flutterEngine.navigationChannel.setInitialRoute(<span class="hljs-string">&quot;main?&#123;\&quot;name\&quot;:\&quot;erdai\&quot;,\&quot;age\&quot;:18&#125;&quot;</span>)<br><br><span class="hljs-comment">//2、Flutter 中获取路由并进行解析</span><br><span class="hljs-built_in">String</span> url = <span class="hljs-built_in">window</span>.defaultRouteName;<br><span class="hljs-comment">//获取路由名称</span><br><span class="hljs-built_in">String</span> routeName = url.substring(<span class="hljs-number">0</span>,url.indexOf(<span class="hljs-string">&quot;?&quot;</span>));<br><span class="hljs-comment">//获取参数，将参数解析并转换成一个 Map 对象</span><br><span class="hljs-built_in">String</span> paramsString = url.substring(url.indexOf(<span class="hljs-string">&quot;?&quot;</span>) + <span class="hljs-number">1</span>);<br><span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>,<span class="hljs-built_in">dynamic</span>&gt; paramsMap = json.decode(paramsString);<br><br></code></pre></td></tr></table></figure><p>实际上就是这么干的，我们修改 Flutter 端的代码：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> main()&#123;<br>  <span class="hljs-comment">//获取 Android 传过来的路由</span><br>  <span class="hljs-built_in">String</span> url = <span class="hljs-built_in">window</span>.defaultRouteName;<br>  <span class="hljs-comment">//解析并获取路由名称</span><br>  <span class="hljs-built_in">String</span> routeName = url.substring(<span class="hljs-number">0</span>,url.indexOf(<span class="hljs-string">&quot;?&quot;</span>));<br>  <span class="hljs-comment">//解析并将参数转换成一个 Map 对象</span><br>  <span class="hljs-built_in">String</span> paramsString = url.substring(url.indexOf(<span class="hljs-string">&quot;?&quot;</span>) + <span class="hljs-number">1</span>);<br>  <span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>,<span class="hljs-built_in">dynamic</span>&gt; paramsMap = json.decode(paramsString);<br>  <span class="hljs-comment">//打印参数</span><br>  <span class="hljs-built_in">print</span>(paramsMap);<br>  runApp(getRouter(routeName));<br>&#125;<br><span class="hljs-comment">//...</span><br></code></pre></td></tr></table></figure><p>当我们发布 aar，clean Android 工程并重新运行会进行参数的打印：</p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6a1404b92feb4ad1b7c00c89964a619c~tplv-k3u1fbpfcp-watermark.image?" alt="202209221611327.png" width="70%" /><h2 id="三、Android-嵌入-Flutter-页面（FlutterFragment）"><a href="#三、Android-嵌入-Flutter-页面（FlutterFragment）" class="headerlink" title="三、Android 嵌入 Flutter 页面（FlutterFragment）"></a>三、Android 嵌入 Flutter 页面（FlutterFragment）</h2><p>类比 Android 启动 FlutterActivity，主要是通过两种方式构建 intent 对象：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">//方式一</span><br><span class="hljs-keyword">var</span> intent: Intent = FlutterActivity.createDefaultIntent(<span class="hljs-keyword">this</span>)<br>  <br><span class="hljs-comment">//方式二</span><br><span class="hljs-keyword">var</span> intent = FlutterActivity<br>  .withCachedEngine(FLUTTER_ENGINE_ID)<br>  .build(<span class="hljs-keyword">this</span>)<br></code></pre></td></tr></table></figure><p>构建 FlutterFragment 类似：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">//方式一</span><br><span class="hljs-keyword">var</span> flutterFragment: FlutterFragment = FlutterFragment.createDefault()<br>  <br><span class="hljs-comment">//方式二</span><br><span class="hljs-keyword">var</span> flutterFragment: FlutterFragment = FlutterFragment<br>     .withCachedEngine(FLUTTER_ENGINE_ID)<br>     .build()<br></code></pre></td></tr></table></figure><p>修改 Android 代码 ：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">//1、我们新建一个 SecondActivity</span><br><span class="hljs-comment">//activity_second.xml内容：FrameLayout 用于承载 FlutterFragment</span><br>&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;<br>&lt;FrameLayout <br>    xmlns:android=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span><br>    xmlns:tools=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span><br>    android:id=<span class="hljs-string">&quot;@+id/flFragmentContainer&quot;</span><br>    android:layout_width=<span class="hljs-string">&quot;match_parent&quot;</span><br>    android:layout_height=<span class="hljs-string">&quot;match_parent&quot;</span><br>    tools:context=<span class="hljs-string">&quot;.SecondActivity&quot;</span>/&gt;<br>      <br><span class="hljs-comment">//2、修改 SecondActivity</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecondActivity</span> : <span class="hljs-title">AppCompatActivity</span>() </span>&#123;<br>    companion object&#123;<br>        <span class="hljs-comment">//缓存 FlutterEngine 的 key</span><br>        <span class="hljs-keyword">const</span> val FLUTTER_ENGINE_ID = <span class="hljs-string">&quot;default&quot;</span><br>    &#125;<br>    <span class="hljs-comment">//FlutterEngine</span><br>    private lateinit <span class="hljs-keyword">var</span> flutterEngine: FlutterEngine<br>    <span class="hljs-comment">//FlutterFragment</span><br>    private lateinit <span class="hljs-keyword">var</span> flutterFragment: FlutterFragment<br><br>    <span class="hljs-meta">@SuppressLint</span>(<span class="hljs-string">&quot;SetTextI18n&quot;</span>)<br>    override fun onCreate(savedInstanceState: Bundle?) &#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState)<br>        setContentView(R.layout.activity_second)<br>        <span class="hljs-comment">//初始化 FlutterEngine</span><br>        flutterEngine = initFlutterEngine(FLUTTER_ENGINE_ID)<br><br>        <span class="hljs-comment">//初始化 FlutterFragment</span><br>        flutterFragment = FlutterFragment<br>            .withCachedEngine(FLUTTER_ENGINE_ID)<br>            .build()<br><br>        <span class="hljs-comment">//将 FlutterFragment 嵌入到 SecondActivity 中</span><br>        supportFragmentManager.beginTransaction().replace(R.id.flFragmentContainer,flutterFragment).commit()<br>    &#125;<br><br>    <span class="hljs-comment"><span class="language-markdown">/<span class="hljs-strong">**</span></span></span><br><span class="hljs-strong"><span class="language-markdown"><span class="hljs-comment">     <span class="hljs-emphasis">* 初始化 FlutterEngine</span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="language-markdown"><span class="hljs-comment">     *</span> 上述代码一般在跳转前调用，这样可以加快我们页面的一个跳转</span></span></span><br><span class="hljs-strong"><span class="language-markdown"><span class="hljs-comment">     <span class="hljs-emphasis">*/</span></span></span></span><br>    private fun initFlutterEngine(engineId: <span class="hljs-built_in">String</span>): FlutterEngine &#123;<br>        <span class="hljs-comment">//创建 FlutterEngine</span><br>        val flutterEngine = FlutterEngine(<span class="hljs-keyword">this</span>)<br>        <span class="hljs-comment">//指定要跳转的 Flutter 页面并携带参数</span><br>        flutterEngine.navigationChannel.setInitialRoute(<span class="hljs-string">&quot;main?&#123;\&quot;name\&quot;:\&quot;erdai\&quot;,\&quot;age\&quot;:18&#125;&quot;</span>)<br>        flutterEngine.dartExecutor.executeDartEntrypoint(DartExecutor.DartEntrypoint.createDefault())<br>        <span class="hljs-comment">//缓存 FlutterEngine</span><br>        val flutterEngineCache = FlutterEngineCache.getInstance()<br>        flutterEngineCache.put(engineId,flutterEngine)<br>        <span class="hljs-keyword">return</span> flutterEngine<br>    &#125;<br><br>    <span class="hljs-comment">//重写一些方法，然后将其转发到了 FlutterFragment 中</span><br>    override fun onPostResume() &#123;<br>        <span class="hljs-keyword">super</span>.onPostResume()<br>        flutterFragment.onPostResume()<br>    &#125;<br><br>    override fun onNewIntent(intent: Intent) &#123;<br>        <span class="hljs-keyword">super</span>.onNewIntent(intent)<br>        flutterFragment.onNewIntent(intent)<br>    &#125;<br><br>    override fun onBackPressed() &#123;<br>        <span class="hljs-keyword">super</span>.onBackPressed()<br>        flutterFragment.onBackPressed()<br>    &#125;<br><br>    override fun onRequestPermissionsResult(<br>        requestCode: Int,<br>        permissions: Array&lt;out <span class="hljs-built_in">String</span>&gt;,<br>        grantResults: IntArray<br>    ) &#123;<br>        <span class="hljs-keyword">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults)<br>        flutterFragment.onRequestPermissionsResult(requestCode,permissions,grantResults)<br>    &#125;<br><br>    override fun onUserLeaveHint() &#123;<br>        <span class="hljs-keyword">super</span>.onUserLeaveHint()<br>        flutterFragment.onUserLeaveHint()<br>    &#125;<br><br>    override fun onTrimMemory(level: Int) &#123;<br>        <span class="hljs-keyword">super</span>.onTrimMemory(level)<br>        flutterFragment.onTrimMemory(level)<br>    &#125;<br><br>    override fun onDestroy() &#123;<br>        <span class="hljs-keyword">super</span>.onDestroy()<br>        <span class="hljs-comment">//停止代码执行并释放资源</span><br>        flutterEngine.destroy()<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//3、在 AndroidManifest 文件中设置 SecondActivity 主题</span><br>&lt;activity<br>   android:name=<span class="hljs-string">&quot;.SecondActivity&quot;</span><br>   android:exported=<span class="hljs-string">&quot;false&quot;</span><br>   android:theme=<span class="hljs-string">&quot;@style/Theme.MaterialComponents.DayNight.NoActionBar&quot;</span>/&gt;<br><br><span class="hljs-comment">//4、修改 MainActivity 跳转按钮跳转到 SecondActivity</span><br>fun toSecondActivity(view: View) &#123;<br>    startActivity(Intent(<span class="hljs-keyword">this</span>,SecondActivity::<span class="hljs-keyword">class</span>.java))<br>&#125;<br></code></pre></td></tr></table></figure><p>上述 SecondActivity 中我们重写了很多方法，然后将其转发到了 FlutterFragment 中，主要目的是为了实现 Flutter 中所有预期的行为</p><p>接下来看下效果：</p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/22fcb0303f744a7984f2f2feff10f47a~tplv-k3u1fbpfcp-watermark.image?" alt="ezgif.com-gif-maker2.gif" width="30%" /><h2 id="四、Android-与-Flutter-通信"><a href="#四、Android-与-Flutter-通信" class="headerlink" title="四、Android 与 Flutter 通信"></a>四、Android 与 Flutter 通信</h2><p>Flutter 提供了一套 PlatformChannel 机制用于 Flutter 和 Android 的通信，主要分为三种类型：</p><p>1、<strong>MethodChannel</strong>：主要用于传递方法调用，Flutter 和 Native（Android）之间进行方法调用时可以使用，是一种双向的通信方式</p><p>2、<strong>EventChannel</strong>：主要用于用户数据流的通信，如：手机电量变化，网络连接变化等。这种方式只能  Native（Android）向 Flutter 发送数据，是一种单向的通信方式</p><p>3、<strong>BaseicMessageChannel</strong>：主要用于传递各种类型数据，它支持的类型有很多，如：String，半结构化信息等，是一种双向的通信方式</p><h3 id="4-1、MethodChannel"><a href="#4-1、MethodChannel" class="headerlink" title="4.1、MethodChannel"></a>4.1、MethodChannel</h3><p>上面我们介绍了 Android 给 Flutter 页面传值，主要是通过这行代码：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart">flutterEngine.navigationChannel.setInitialRoute(<span class="hljs-string">&quot;main?&#123;\&quot;name\&quot;:\&quot;erdai\&quot;,\&quot;age\&quot;:18&#125;&quot;</span>)<br></code></pre></td></tr></table></figure><p>点击查看 navigationChannel 的源码：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">//NavigationChannel 源码</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NavigationChannel</span> </span>&#123;<br>  private <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-built_in">String</span> TAG = <span class="hljs-string">&quot;NavigationChannel&quot;</span>;<br><br>  <span class="hljs-meta">@NonNull</span> public <span class="hljs-keyword">final</span> MethodChannel channel;<br><br>  public NavigationChannel(<span class="hljs-meta">@NonNull</span> DartExecutor dartExecutor) &#123;<br>    <span class="hljs-keyword">this</span>.channel = <span class="hljs-keyword">new</span> MethodChannel(dartExecutor, <span class="hljs-string">&quot;flutter/navigation&quot;</span>, JSONMethodCodec.INSTANCE);<br>    channel.setMethodCallHandler(defaultHandler);<br>  &#125;<br>  <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>发现它实际就是对 MethodChannel 做了一层封装，底层是通过 MethodChannel 来进行通信</p><p>这种方式在开发中用的比较多，使用也比较简单，我们直接通过例子说明</p><p>下面实现这么一个需求：<strong>首先从 MainActivity 跳转到 SecondActivity，然后 SecondActivity 每隔一秒给 Flutter 页面发送一个数字，Flutter 接收到数字并显示到中间的 Text 中，当接收到数字等于 5 ，通知 SecondActivty finish</strong></p><p>先看一眼实现的效果：</p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c5303863bc054b7aac3216a3ce715d50~tplv-k3u1fbpfcp-watermark.image?" alt="ezgif.com-gif-maker (3).gif" width="30%" /><p>1、首先来看 Android 端代码实现，SecondActivity 新增的部分：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecondActivity</span> : <span class="hljs-title">AppCompatActivity</span>() </span>&#123;<br>   <br>    <span class="hljs-comment">//...</span><br>    <span class="hljs-comment">//MethodChannel</span><br>    private lateinit <span class="hljs-keyword">var</span> methodChannel: MethodChannel<br>    <span class="hljs-comment">//发送给 Flutter 的数字</span><br>    private <span class="hljs-keyword">var</span> count = <span class="hljs-number">0</span><br><br>    <span class="hljs-meta">@SuppressLint</span>(<span class="hljs-string">&quot;SetTextI18n&quot;</span>)<br>    override fun onCreate(savedInstanceState: Bundle?) &#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState)<br>        setContentView(R.layout.activity_second)<br>        <span class="hljs-comment">//...</span><br><span class="hljs-comment">//MethodChannel初始化，注意后面的字符串必须保持 Android 和 Flutter 一致</span><br>        methodChannel = MethodChannel(flutterEngine.dartExecutor,<span class="hljs-string">&quot;com.dream.interactive&quot;</span>)<br>       <span class="hljs-comment">//设置 Flutter 传给我们的方法回调</span><br>        methodChannel.setMethodCallHandler &#123; call, result -&gt;<br>            <span class="hljs-keyword">if</span>(call.method == <span class="hljs-string">&quot;sendFinish&quot;</span>)&#123;<br>                finish()<br>            &#125;<br>        &#125;<br>      <span class="hljs-comment">//开启定时器，每隔一秒给 Flutter 发送一个数字</span><br>        startTimer()<br>    &#125;<br><br>    private fun startTimer() &#123;<br>        Timer().schedule(timerTask &#123;<br>            runOnUiThread &#123;<br>                val map = mapOf(<span class="hljs-string">&quot;count&quot;</span> to count++)<br>                methodChannel.invokeMethod(<span class="hljs-string">&quot;timer&quot;</span>, map)<br>            &#125;<br>        &#125;, <span class="hljs-number">0</span>, <span class="hljs-number">1000</span>)<br>    &#125;<br><br>    <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>2、Flutter 端代码实现，新增部分：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_MyHomePageState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">MyHomePage</span>&gt; </span>&#123;<br>  <span class="hljs-comment">//记录传递过来的数字</span><br>  <span class="hljs-built_in">int</span> _counter = <span class="hljs-number">0</span>;<br>  <span class="hljs-comment">//初始化 MethodChannel，字符串必须保持 Android 和 Flutter 一致</span><br>  <span class="hljs-keyword">final</span> _channel = <span class="hljs-keyword">const</span> MethodChannel(<span class="hljs-string">&quot;com.dream.interactive&quot;</span>);<br>  <span class="hljs-comment">//...</span><br><br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-keyword">void</span> initState() &#123;<br>    <span class="hljs-keyword">super</span>.initState();<br>    <span class="hljs-comment">//设置接收 Android 传递过来的方法回调</span><br>    _channel.setMethodCallHandler((call) <span class="hljs-keyword">async</span> &#123;<br>      <span class="hljs-built_in">String</span> method = call.method;<br>      <span class="hljs-keyword">switch</span>(method)&#123;<br>        <span class="hljs-comment">//如果匹配到了 timer 方法</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;timer&quot;</span>:<br>          <span class="hljs-comment">//接收传递过来的数字并刷新 UI</span><br>          setState(() &#123;<br>            _counter = call.arguments[<span class="hljs-string">&quot;count&quot;</span>];<br>          &#125;);<br>          <span class="hljs-comment">//当数字等于 5，通知 Android finish SecondActivity</span><br>          <span class="hljs-keyword">if</span>(_counter == <span class="hljs-number">5</span>)&#123;<br>            _channel.invokeMethod(<span class="hljs-string">&quot;sendFinish&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>          &#125;<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>          <span class="hljs-keyword">break</span>;<br>      &#125;<br>    &#125;);<br>  &#125;<br>  <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-2、EventChannel"><a href="#4-2、EventChannel" class="headerlink" title="4.2、EventChannel"></a>4.2、EventChannel</h3><p><strong>我们使用 EventChannel 模拟 Android 发送一个充电信息给 Flutter ，Flutter 接收后在中间的 Text 展示出来</strong></p><p>1、 Android 端代码实现，SecondActivity 新增的部分：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecondActivity</span> : <span class="hljs-title">AppCompatActivity</span>() </span>&#123;<br>   <br>    <span class="hljs-comment"><span class="language-markdown">/<span class="hljs-strong">**</span></span></span><br><span class="hljs-strong"><span class="language-markdown"><span class="hljs-comment">     <span class="hljs-emphasis">* EventChannel 事件接收器，它是一个接口，我们主要通过它给 Flutter 传递 event 事件</span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="language-markdown"><span class="hljs-comment">     *</span>/</span></span></span><br>    private lateinit <span class="hljs-keyword">var</span> eventSink: EventChannel.EventSink<br>    <span class="hljs-comment">//电量信息</span><br>    private <span class="hljs-keyword">var</span> electricity = <span class="hljs-number">0</span><br><br>    <span class="hljs-meta">@SuppressLint</span>(<span class="hljs-string">&quot;SetTextI18n&quot;</span>)<br>    override fun onCreate(savedInstanceState: Bundle?) &#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState)<br>        setContentView(R.layout.activity_second)<br>          <br>        <span class="hljs-comment">//初始化 EventChannel，注意后面的字符串必须保持 Android 和 Flutter 一致</span><br>        val eventChannel =  EventChannel(flutterEngine.dartExecutor,<span class="hljs-string">&quot;com.dream.eventchannel&quot;</span>)<br>        <span class="hljs-comment">//设置接收 Flutter 传递过来的数据流回调</span><br>        eventChannel.setStreamHandler(object : EventChannel.StreamHandler &#123;<br>            <span class="hljs-comment">//当 Flutter 与 Android 建立连接后会回调此方法</span><br>            override fun onListen(arguments: Any?, events: EventChannel.EventSink) &#123;<br>              <span class="hljs-comment">//打印 Flutter 传过来的参数，建立连接时返回的值，仅此一次</span><br>                Log.d(<span class="hljs-string">&quot;erdai&quot;</span>, <span class="hljs-string">&quot;onListen: <span class="hljs-subst">$arguments</span>&quot;</span>)<br>                <span class="hljs-comment">//对 eventSink 赋值</span><br>                eventSink = events<br>                <span class="hljs-comment">//开启定时器，每隔一秒电量增加 20%</span><br>                startTimer()<br>            &#125;<br><br>            <span class="hljs-comment">//当 Flutter 与 Android 断开连接后会回调此方法</span><br>            override fun onCancel(arguments: Any?) &#123;<br>                Log.d(<span class="hljs-string">&quot;erdai&quot;</span>, <span class="hljs-string">&quot;onCancel: 断开连接&quot;</span>)<br>            &#125;<br>        &#125;)<br>    &#125;<br><br>    <span class="hljs-comment">//开启定时器，每隔一秒电量增加 20%</span><br>    private fun startTimer() &#123;<br>        Timer().schedule(timerTask &#123;<br>            runOnUiThread &#123;<br>              <span class="hljs-comment">//每隔一秒电量 +20</span><br>                electricity += <span class="hljs-number">20</span><br>                <span class="hljs-comment">//发送事件给 Flutter</span><br>                eventSink.success(<span class="hljs-string">&quot;电量：<span class="hljs-subst">$electricity</span>%&quot;</span>)<br>                <span class="hljs-keyword">if</span>(electricity == <span class="hljs-number">100</span>)&#123;<br>                   <span class="hljs-comment">//当电量为 100 ，发送完成事件给 Flutter</span><br>                   eventSink.endOfStream()<br>                &#125;<br>            &#125;<br>        &#125;, <span class="hljs-number">0</span>, <span class="hljs-number">1000</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、Flutter 端代码实现，新增部分：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_MyHomePageState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">MyHomePage</span>&gt; </span>&#123;<br>  <span class="hljs-comment">//电量信息</span><br>  <span class="hljs-built_in">dynamic</span> electricity;<br>  <span class="hljs-comment">//EventChannel 注意后面的字符串必须保持 Android 和 Flutter 一致</span><br>  <span class="hljs-keyword">final</span> _eventChannel = <span class="hljs-keyword">const</span> EventChannel(<span class="hljs-string">&quot;com.dream.eventchannel&quot;</span>);<br>  <span class="hljs-comment">//订阅流信息</span><br>  StreamSubscription? _streamSubscription;<br>  <br><br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-keyword">void</span> initState() &#123;<br>    <span class="hljs-keyword">super</span>.initState();<br>    <span class="hljs-comment">//初始化 StreamSubscription</span><br>    _streamSubscription = _eventChannel<br>        .receiveBroadcastStream([<span class="hljs-string">&quot;Hello，建立连接吧&quot;</span>])<br>        .listen(_onData,onError: _onError,onDone: _onDone);<br>  &#125;<br><br>  <span class="hljs-comment">//接收 Andorid 发送过来的正常事件</span><br>  <span class="hljs-keyword">void</span> _onData(event)&#123;<br>    <span class="hljs-comment">//打印</span><br>    <span class="hljs-built_in">print</span>(event);<br>    <span class="hljs-comment">//对 electricity 赋值，刷新 UI</span><br>    setState(() &#123;<br>      electricity = event;<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-comment">//接收 Andorid 发送过来的 error 事件</span><br>  <span class="hljs-keyword">void</span> _onError(error)&#123;<br>    <span class="hljs-comment">//打印</span><br>    <span class="hljs-built_in">print</span>(error);<br>  &#125;<br><br>  <span class="hljs-comment">//接收 Android 发送过来的完成事件</span><br>  <span class="hljs-keyword">void</span> _onDone()&#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;_onDone&#x27;</span>);<br>  &#125;<br><br>  <span class="hljs-comment">//释放资源</span><br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-keyword">void</span> dispose() &#123;<br>    <span class="hljs-keyword">if</span>(_streamSubscription != <span class="hljs-keyword">null</span>)&#123;<br>      _streamSubscription?.cancel();<br>      _streamSubscription = <span class="hljs-keyword">null</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Scaffold(<br>      <span class="hljs-comment">//...</span><br>      body: Center(<br>        child: Column(<br>          mainAxisAlignment: MainAxisAlignment.center,<br>          children: &lt;Widget&gt;[<br>            <span class="hljs-comment">//...</span><br>            Text(<br>              <span class="hljs-string">&#x27;<span class="hljs-subst">$electricity</span>&#x27;</span>,<br>              style: Theme.of(context).textTheme.headline4,<br>            ),<br>          ],<br>        ),<br>      ),<br>      <span class="hljs-comment">//..</span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来我们看下效果和 Log 日志：</p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5ea43f0988ec478a873e01c11d347917~tplv-k3u1fbpfcp-watermark.image?" alt="ezgif.com-gif-maker (4).gif" width="30%" /><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2d49e854843e46c7bd7ad58a846b21f5~tplv-k3u1fbpfcp-watermark.image?" alt="202209221613607.png" width="70%" /><h3 id="4-3、BaseicMessageChannel"><a href="#4-3、BaseicMessageChannel" class="headerlink" title="4.3、BaseicMessageChannel"></a>4.3、BaseicMessageChannel</h3><p><strong>我们使用 BaseicMessageChannel 实现一段 Andorid 和 Flutter 的对话，Flutter 收到 Android 的消息，在中间的 Text 展示出来，Android 收到 Flutter 的消息，使用 Toast 展示出来</strong> </p><p>1、 Android 端代码实现，SecondActivity 新增的部分：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecondActivity</span> : <span class="hljs-title">AppCompatActivity</span>() </span>&#123;<br>    <span class="hljs-comment">//...</span><br>    <span class="hljs-comment">//BasicMessageChannel</span><br>    private lateinit <span class="hljs-keyword">var</span> messageChannel: BasicMessageChannel&lt;<span class="hljs-built_in">String</span>&gt;<br>  <br>    <span class="hljs-meta">@SuppressLint</span>(<span class="hljs-string">&quot;SetTextI18n&quot;</span>)<br>    override fun onCreate(savedInstanceState: Bundle?) &#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState)<br>        setContentView(R.layout.activity_second)<br>      <span class="hljs-comment">//...</span><br><br><span class="hljs-comment">//初始化 BasicMessageChannel，注意后面的字符串必须保持 Android 和 Flutter 一致</span><br>        messageChannel = <br>          BasicMessageChannel(flutterEngine.dartExecutor,<span class="hljs-string">&quot;com.dream.messagechannel&quot;</span>,StringCodec.INSTANCE)<br>        <span class="hljs-comment">//设置接收 Flutter 传递过来的消息回调</span><br>        messageChannel.setMessageHandler &#123; replay: <span class="hljs-built_in">String?</span>, reply: BasicMessageChannel.Reply&lt;<span class="hljs-built_in">String</span>&gt; -&gt;<br>            <span class="hljs-comment">//打印 Flutter 发过来的消息</span><br>            Log.d(<span class="hljs-string">&quot;erdai&quot;</span>, <span class="hljs-string">&quot;onCreate: <span class="hljs-subst">$replay</span>&quot;</span>)<br>            <span class="hljs-comment">//使用 Toast 展示出来</span><br>            Toast.makeText(<span class="hljs-keyword">this</span>,replay,Toast.LENGTH_SHORT).<span class="hljs-keyword">show</span>()<br>            <span class="hljs-comment">//回传消息给 Flutter</span><br>            reply.reply(<span class="hljs-string">&quot;梧桐山&quot;</span>)<br>        &#125;<br>      <br>      <span class="hljs-comment">//发送消息给 Flutter</span><br>        messageChannel.send(<span class="hljs-string">&quot;周末去爬山吗?&quot;</span>) &#123; replay: <span class="hljs-built_in">String?</span> -&gt;<br>            <span class="hljs-comment">//接收 Flutter 回传的消息</span><br>            <span class="hljs-comment">//打印 Flutter 回传的消息</span><br>            Log.d(<span class="hljs-string">&quot;erdai&quot;</span>, <span class="hljs-string">&quot;onCreate: <span class="hljs-subst">$replay</span>&quot;</span>)<br>            <span class="hljs-comment">//使用 Toast 展示出来</span><br>            Toast.makeText(<span class="hljs-keyword">this</span>,replay,Toast.LENGTH_SHORT).<span class="hljs-keyword">show</span>()<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>2、Flutter 端代码实现，新增部分：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_MyHomePageState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">MyHomePage</span>&gt; </span>&#123;<br> <br>  <span class="hljs-comment">//记录 Android 传过来的值</span><br>  <span class="hljs-built_in">dynamic</span> _content;<br>  <span class="hljs-comment">//BasicMessageChannel，注意后面的字符串必须保持 Android 和 Flutter 一致</span><br>  <span class="hljs-keyword">final</span> _messageChannel = <span class="hljs-keyword">const</span> BasicMessageChannel(<span class="hljs-string">&quot;com.dream.messagechannel&quot;</span>, StringCodec());<br><br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-keyword">void</span> initState() &#123;<br>    <span class="hljs-keyword">super</span>.initState();<br>    <span class="hljs-comment">//设置接收 Android 传递过来的消息回调</span><br>    _messageChannel.setMessageHandler((message) =&gt;Future&lt;<span class="hljs-built_in">String</span>&gt;(()&#123;<br>      <span class="hljs-comment">//打印 Android 发送过来的消息</span><br>      <span class="hljs-built_in">print</span>(message);<br>      <span class="hljs-comment">//给 _content 赋值，刷新 UI</span><br>      setState(() &#123;<br>        _content = message;<br>      &#125;);<br>      <span class="hljs-comment">//回传值给 Android</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;好啊&quot;</span>;<br>    &#125;));<br>    <br>    <span class="hljs-comment">//...</span><br>  &#125;<br>  <br>  <span class="hljs-comment">//点击 FloatingActionButton 的响应方法</span><br>  <span class="hljs-keyword">void</span> _incrementCounter() <span class="hljs-keyword">async</span>&#123;<br>    <span class="hljs-comment">//给 Android 发送消息，并接收 Android 回传的消息</span><br>    <span class="hljs-keyword">var</span> result = <span class="hljs-keyword">await</span> _messageChannel.send(<span class="hljs-string">&quot;去爬哪座山?&quot;</span>);<br>    <span class="hljs-comment">//打印 Android 回传的消息</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;<span class="hljs-subst">$result</span>&quot;</span>);<br>    <span class="hljs-comment">//给 _content 赋值，刷新 UI</span><br>    setState(() &#123;<br>      _content = result;<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Scaffold(<br>      appBar: AppBar(<br>        title: Text(widget.title),<br>      ),<br>      body: Center(<br>        child: Column(<br>          mainAxisAlignment: MainAxisAlignment.center,<br>          children: &lt;Widget&gt;[<br>            <span class="hljs-comment">//...</span><br>            Text(<br>              <span class="hljs-string">&#x27;<span class="hljs-subst">$_content</span>&#x27;</span>,<br>              style: Theme.of(context).textTheme.headline4,<br>            ),<br>          ],<br>        ),<br>      ),<br>      floatingActionButton: FloatingActionButton(<br>        onPressed: _incrementCounter,<br>        tooltip: <span class="hljs-string">&#x27;Increment&#x27;</span>,<br>        child: <span class="hljs-keyword">const</span> Icon(Icons.add),<br>      ), <br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>看下效果和 Log 日志：</p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7da4428000554b0eac543f1530a0c3c2~tplv-k3u1fbpfcp-watermark.image?" alt="ezgif.com-gif-maker (5).gif" width="30%" /><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d749ee7774ba41518b615972d6ac7004~tplv-k3u1fbpfcp-watermark.image" alt="202209221614000.png"></p><h3 id="4-4、通信原理"><a href="#4-4、通信原理" class="headerlink" title="4.4、通信原理"></a>4.4、通信原理</h3><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b581ad4490034520b24e1940f3311118~tplv-k3u1fbpfcp-watermark.image?" alt="202209221615654.png" width="100%" /><p>从图中我们可以看出：</p><p>1、Android 和 Flutter 都是以 ByteBuffer 为载体，然后通过 BinaryMessenger 来发送和接收数据</p><p>2、Android 和 Flutter 都是基于 PlatformChannel 机制来进行通信的</p><p>之所以我们能够如此简单的进行通信，实则是系统给我们做了大量的封装：线程的切换，数据拷贝等复杂操作</p><p>另外需要注意的是：<strong>在 Android 侧，BinaryMessenger 是一个接口，在 FlutterView 中实现了该接口，在 BinaryMessenger 的方法中通过 JNI 来与系统底层沟通。在 Flutter 侧，BinaryMessenger 是一个类，该类的作用就是与类 window 沟通，而类 window 才真正与系统底层沟通</strong></p><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>本篇文章我们介绍了：</p><p>1、Android 集成 Flutter </p><blockquote><p>主要就是将 Flutter 端的代码打成 aar ，然后 Android 引用这个 aar</p></blockquote><p>2、Android 调起 Flutter 页面（FlutterActivity，FlutterFragment），并给 Flutter 页面传值</p><blockquote><p>传值底层使用的 MethodChannel</p></blockquote><p>3、Android 与 Flutter 通信，主要使用到了 Flutter 的 PlatformChannel 机制，其实现主要有三种类型：</p><blockquote><p>1、MethodChannel：用于 Flutter 和 Android 之间的方法通信，双向的</p><p>2、EventChannel：用于 Flutter 和 Android 之间的数据流通信，单向的：Android -&gt; Flutter</p><p>3、BaseicMessageChannel：用于 Flutter 和 Android 之间的数据通信，双向的</p></blockquote><p>4、简单的介绍了 Android 与 Flutter 通信的原理</p><p>好了，本篇文章到这里就结束了，希望能给你带来帮助 🤝</p><p><strong>感谢你阅读这篇文章</strong></p><h3 id="下篇预告"><a href="#下篇预告" class="headerlink" title="下篇预告"></a>下篇预告</h3><p>下篇文章我会讲开发 Flutter 项目的一个技术选型，尽请期待吧🍺</p><h3 id="参考和推荐"><a href="#参考和推荐" class="headerlink" title="参考和推荐"></a>参考和推荐</h3><p><a href="https://juejin.cn/post/7054743801520193543">Android 集成 Flutter | 与交互</a></p><p><a href="https://juejin.cn/post/6844903873358856200#heading-7">一篇看懂Android与Flutter之间的通信</a></p><blockquote><p><strong>你的点赞，评论，是对我巨大的鼓励！</strong></p><p>欢迎关注我的<strong>公众号：</strong>  <a href="https://link.juejin.cn/?target=http://m6z.cn/6jwi7b" title="http://m6z.cn/6jwi7b"><strong>sweetying</strong></a> ，文章更新可第一时间收到</p><p>如果<strong>有问题</strong>，公众号内有加我微信的入口，在技术学习、个人成长的道路上，我们一起前进！</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Flutter</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Flutter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flutter 系列（七）：Flutter 路由和 HTTPS 请求实战</title>
    <link href="/2022/10/10/Flutter%20%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9AFlutter%20%E8%B7%AF%E7%94%B1%E5%92%8C%20HTTPS%20%E8%AF%B7%E6%B1%82%E5%AE%9E%E6%88%98/"/>
    <url>/2022/10/10/Flutter%20%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9AFlutter%20%E8%B7%AF%E7%94%B1%E5%92%8C%20HTTPS%20%E8%AF%B7%E6%B1%82%E5%AE%9E%E6%88%98/</url>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sweetying520/picgo/master/img/202210101704446.jpeg" alt="sea-7352141_1920"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>很高兴遇见你~</p><p>在本系列的上一篇文章中，我们介绍了 Flutter 中常用的表单 Widget：TextField，CheckBox，Radio，Switch，CheckboxListTile，RadioListTile，SwitchListTile，Slider，最后通过这些 Widget 实现了一个综合案例。还没有看过上一篇文章的朋友，建议先去阅读 <a href="https://juejin.cn/post/7137457377959706654">Flutter 系列（六）：Flutter 常用表单 Widget</a>。接下来我们对 Flutter 路由和 HTTPS 请求实战进行介绍</p><h2 id="一、Flutter-路由"><a href="#一、Flutter-路由" class="headerlink" title="一、Flutter 路由"></a>一、Flutter 路由</h2><p>1）、Flutter 中的路由简单理解就是页面跳转。Flutter 通过 Navigator 组件管理路由导航，并提供了管理堆栈的方法。如：Navigator.push，Navigator.pop</p><p>2）、Flutter 给我们提供了两种配置路由跳转的方式：</p><blockquote><p>1、基本路由</p><p>2、命名路由</p></blockquote><h3 id="1-1、基本路由"><a href="#1-1、基本路由" class="headerlink" title="1.1、基本路由"></a>1.1、基本路由</h3><h4 id="1-1-1、基本路由使用"><a href="#1-1-1、基本路由使用" class="headerlink" title="1.1.1、基本路由使用"></a>1.1.1、基本路由使用</h4><p>假设我们有两个页面：HomePage.dart，SearchPage.dart，先看一眼它们初始的一个代码：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">//1、HomePage.dart</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutterapplication/route/Routes.dart&#x27;</span>;<br><br><span class="hljs-keyword">void</span> main() &#123;<br>  runApp(MaterialApp(<br>      home: HomePage()<br>  ));<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HomePage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Scaffold(<br>      appBar: AppBar(<br>        title: Text(<span class="hljs-string">&quot;HomePage&quot;</span>), <span class="hljs-comment">//设置标题栏标题</span><br>      ),<br>      body: Center(<br>        child: RaisedButton(<br>          child: Text(<span class="hljs-string">&quot;跳转到 SearchPage&quot;</span>),<br>          <span class="hljs-comment">//按钮点击事件</span><br>          onPressed: () &#123;<br>            <br>          &#125;,<br>        ),<br>      ), <br>    );<br>  &#125;<br>&#125;<br><br><br><span class="hljs-comment">//2、SearchPage.dart</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SearchPage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span></span>&#123;<br><br>  <span class="hljs-keyword">final</span> arguments;<br><br>  <span class="hljs-comment">//可选参数 arguments</span><br>  SearchPage(&#123;<span class="hljs-keyword">this</span>.arguments&#125;);<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Scaffold(<br>        appBar: AppBar(<br>            title: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&#x27;SearchPage&#x27;</span>)<br>        ),<br>        body: Center(<br>          child: Text(<span class="hljs-string">&quot;搜索页面内容区域：<span class="hljs-subst">$arguments</span>&quot;</span>),<br>        )<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码很简单，现在我们想从 HomePage 跳转到 SearchPage，需要以下两步：</p><p>1、在 HomePage.dart 中引入 SearchPage.dart </p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">//1、绝对路径</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutterapplication/pages/SearchPage.dart&#x27;</span>;<br><span class="hljs-comment">//2、相对路径</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;../SearchPage.dart&#x27;</span>;<br></code></pre></td></tr></table></figure><p><strong>Tips</strong>：日常开发中建议统一使用绝对路径</p><p>2、在 HomePage 的点击事件中通过如下方法跳转</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">//方式一</span><br>Navigator.push(context, MaterialPageRoute(builder: (context)&#123;<br>  <span class="hljs-keyword">return</span> SearchPage();<br>&#125;));<br><br><span class="hljs-comment">//方式二</span><br>Navigator.of(context).push(<br>  MaterialPageRoute(builder: (context)&#123;<br>    <span class="hljs-keyword">return</span> SearchPage();<br>  &#125;)<br>);<br><br><span class="hljs-comment">//上述两种方式是等价的，实际上方式一是对方式二的封装</span><br></code></pre></td></tr></table></figure><p>经过上面两步我们就可以跳转到 SearchPage 页面了</p><p>此时还只是简单的跳转，如果我想向 SearchPage 传值呢？</p><h4 id="1-1-2、基本路由传值"><a href="#1-1-2、基本路由传值" class="headerlink" title="1.1.2、基本路由传值"></a>1.1.2、基本路由传值</h4><p>实则就是在 SearchPage 的构造方法中增加实参</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dart">Navigator.of(context).push(<br>  MaterialPageRoute(builder: (context)&#123;<br>    <span class="hljs-keyword">return</span> SearchPage(arguments: <span class="hljs-string">&quot;erdai666&quot;</span>);<br>  &#125;)<br>);<br></code></pre></td></tr></table></figure><p>这种基本路由的使用有一个缺点：<strong>不能进行路由的统一管理</strong>。如果我们想把路由统一管理，就需要使用到命名路由</p><h3 id="1-2、命名路由"><a href="#1-2、命名路由" class="headerlink" title="1.2、命名路由"></a>1.2、命名路由</h3><h4 id="1-2-1、命名路由使用"><a href="#1-2-1、命名路由使用" class="headerlink" title="1.2.1、命名路由使用"></a>1.2.1、命名路由使用</h4><p>命名路由就是给每个页面设置一个字符串别名，通常是以 &#x2F; 开头，如：”&#x2F;searchPage”。还是以 1.1.1 的例子进行举例：</p><p>1、此时我们可以新建一个 .dart 文件进行路由的统一管理，我这里叫 Routes.dart ：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-built_in">String</span> homePage = <span class="hljs-string">&quot;/&quot;</span>;<br><span class="hljs-built_in">String</span> searchPage = <span class="hljs-string">&quot;/searchPage&quot;</span>;<br><br><span class="hljs-keyword">final</span> routes = &#123;<br>  homePage: (context) =&gt; HomePage(),<br>  searchPage: (context) =&gt; SearchPage()<br>&#125;;<br><br><span class="hljs-comment">//下面这段代码是将一个匿名方法赋值给一个变量</span><br><span class="hljs-comment">//匿名方法做的事情：处理路由传参，生成 MaterialPageRoute 路由对象</span><br><span class="hljs-keyword">var</span> onGenerateRoute = (settings) &#123;<br>  <span class="hljs-built_in">Function?</span> pageContentBuilder = routes[settings.name];<br>  <span class="hljs-keyword">if</span> (pageContentBuilder != <span class="hljs-keyword">null</span>) &#123;<br>    <span class="hljs-keyword">if</span> (settings.arguments != <span class="hljs-keyword">null</span>) &#123;<br>      <span class="hljs-keyword">var</span> route = MaterialPageRoute(<br>          builder: (context) =&gt;<br>              pageContentBuilder(context, arguments: settings.arguments));<br>      <span class="hljs-keyword">return</span> route;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">var</span> route =<br>      MaterialPageRoute(builder: (context) =&gt; pageContentBuilder(context));<br>      <span class="hljs-keyword">return</span> route;<br>    &#125;<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>Tips</strong>：通常我们会以 ‘&#x2F;‘ 表示 App 启动页的路由</p><p>2、在 HomePage.dart 中新增如下配置：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">//导包</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutterapplication/route/Routes.dart&#x27;</span>;<br><br><span class="hljs-keyword">void</span> main() &#123;<br>  runApp(MaterialApp(<br>      <span class="hljs-comment">//app 启动路由页面</span><br>      initialRoute: homePage,<br>      <span class="hljs-comment">//路由生成</span><br>      onGenerateRoute: onGenerateRoute,<br>      <span class="hljs-comment">//...</span><br>  ));<br>&#125;<br></code></pre></td></tr></table></figure><p>3、在 HomePage 的点击事件中通过如下方法跳转</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">//方式一</span><br>Navigator.pushNamed(context, searchPage);<br><br><span class="hljs-comment">//方式二</span><br>Navigator.of(context).pushNamed(searchPage);<br><br><span class="hljs-comment">//上述两种方式是等价的，实际上方式一是对方式二的封装</span><br></code></pre></td></tr></table></figure><p>这里我们可以发现一个规律：<strong>Navigator 提供了两种 Api 调用方式：<code>Navigator.api...</code> 和 <code>Navigator.of(context).api...</code>，前者是后者的一个封装</strong>，后面我们都以前者举例</p><h4 id="1-2-2、命名路由传值"><a href="#1-2-2、命名路由传值" class="headerlink" title="1.2.2、命名路由传值"></a>1.2.2、命名路由传值</h4><p>实则就是给 SearchPage 的构造方法传入实参：</p><p>1、修改  Routes.dart 中的路由跳抓</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">//...</span><br><span class="hljs-keyword">final</span> routes = &#123;<br>  <span class="hljs-comment">//改动点：新增 arguments 命名参数传给 SearchPage</span><br>  searchPage: (context,&#123;arguments&#125;) =&gt; SearchPage(arguments: arguments)<br>&#125;;<br></code></pre></td></tr></table></figure><p>2、修改 HomePage 的点击事件跳转方法</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart">Navigator.pushNamed(context, searchPage,arguments: <span class="hljs-string">&quot;erdai666&quot;</span>);<br></code></pre></td></tr></table></figure><p>效果展示：</p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5b1faa83a0564f1484c55168cdd74ae6~tplv-k3u1fbpfcp-watermark.image?" alt="ezgif.com-gif-maker.gif" width="30%" /><h3 id="1-3、返回上一级"><a href="#1-3、返回上一级" class="headerlink" title="1.3、返回上一级"></a>1.3、返回上一级</h3><p>上述效果图中，SearchPage 左上角白色的返回按钮是系统给我们实现的，如果我们需要自己实现返回上一级的效果，使用如下 Api 即可：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart">Navigator.pop(context);<br></code></pre></td></tr></table></figure><p>下面我们给 SearchPage 中间的内容区域添加点击事件，让它返回上一级，代码如下：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SearchPage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span></span>&#123;<br><br>  <span class="hljs-keyword">final</span> arguments;<br><br>  SearchPage(&#123;<span class="hljs-keyword">this</span>.arguments&#125;);<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Scaffold(<br>        appBar: AppBar(<br>            title: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&#x27;SearchPage&#x27;</span>)<br>        ),<br>        body: Center(<br>          <span class="hljs-comment">//新增部分的代码</span><br>          child: InkWell(<br>            child: Text(<span class="hljs-string">&quot;搜索页面内容区域：<span class="hljs-subst">$arguments</span>&quot;</span>),<br>            onTap: ()&#123;<br>              Navigator.pop(context);<br>            &#125;,<br>          ),<br>        )<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码我们使用到了 InkWell Widget，它的作用是给没有点击事件的 Widget 添加点击事件，看效果：</p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e7b86175f8c846238ea6a1b18c0b8d3b~tplv-k3u1fbpfcp-watermark.image?" alt="ezgif.com-gif-maker (1).gif" width="30%" /><h3 id="1-4、替换路由"><a href="#1-4、替换路由" class="headerlink" title="1.4、替换路由"></a>1.4、替换路由</h3><p>1）、和 Android 中先启动一个 Activity 然后 finish 上个 Activity 类似。替换路由就是启动一个新页面，然后将新页面替换上一个页面</p><p>2）、我们可以使用 <code>Navigator.pushReplacementNamed</code> 进行路由的替换</p><p>接下来我们编写一个 LoginPage.dart 的登陆页，然后使用 LoginPage 替换 SearchPage，步骤如下：</p><p>1、LoginPage 编写</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginPage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span></span>&#123;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Scaffold(<br>        appBar: AppBar(<br>            title: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&#x27;LoginPage&#x27;</span>)<br>        ),<br>        body: <span class="hljs-keyword">const</span> Center(<br>          child: Text(<span class="hljs-string">&quot;去注册&quot;</span>),<br>        )<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、在 Routes.dart 中新增路由信息</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutterapplication/pages/LoginPage.dart&#x27;</span>;<br><br><span class="hljs-comment">//...</span><br><span class="hljs-built_in">String</span> loginPage = <span class="hljs-string">&quot;/loginPage&quot;</span>;<br><br><span class="hljs-keyword">final</span> routes = &#123;<br>  <span class="hljs-comment">//...</span><br>  loginPage: (context) =&gt; LoginPage()<br>&#125;;<br></code></pre></td></tr></table></figure><p>3、修改 SearchPage 的点击事件跳转方法</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">//...</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SearchPage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span></span>&#123;<br><br>  <span class="hljs-keyword">final</span> arguments;<br><br>  SearchPage(&#123;<span class="hljs-keyword">this</span>.arguments&#125;);<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Scaffold(<br>        appBar: AppBar(<br>            title: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&#x27;SearchPage&#x27;</span>)<br>        ),<br>        body: Center(<br>          child: InkWell(<br>            child: Text(<span class="hljs-string">&quot;搜索页面内容区域：<span class="hljs-subst">$arguments</span>&quot;</span>),<br>            onTap: ()&#123;<br>              <span class="hljs-comment">//路由替换</span><br>              Navigator.pushReplacementNamed(context,loginPage);<br>            &#125;,<br>          ),<br>        )<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4、效果展示</p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/da99b98353d949b08570cb1c0b3443ea~tplv-k3u1fbpfcp-watermark.image?" alt="ezgif.com-gif-maker (2).gif" width="30%" /><p>效果图中我们点击 LoginPage 的返回按钮返回到了 HomePage ，证明 SearchPage 被替换</p><h3 id="1-5、返回到根路由"><a href="#1-5、返回到根路由" class="headerlink" title="1.5、返回到根路由"></a>1.5、返回到根路由</h3><p>1）、和 Android 中启动一个 Activity，然后将这个 Activity 之上的所有 Activity 弹出栈类似。返回根路由就是将当前页面之上的页面全部移除掉</p><p>2）、我们可以使用 <code>Navigator.pushAndRemoveUtil</code> 返回根路由</p><p>接下来我们编写一个 RegisterPage.dart 的注册页，然后 Hompage -&gt; SearchPage -&gt; LoginPage -&gt; RegisterPage 都使用 <code>Navigator.pushNamed</code> 方式跳转，RegisterPage -&gt; Hompage 使用 <code>Navigator.pushAndRemoveUtil</code> 方式跳转，步骤如下：</p><p>1、LoginPage 编写</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutterapplication/HomePage.dart&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Registerpage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span></span>&#123;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Scaffold(<br>        appBar: AppBar(<br>            title: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&#x27;RegisterPage&#x27;</span>)<br>        ),<br>        body:  Center(<br>          child: InkWell(<br>            child: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&quot;注册成功，去 HomePage&quot;</span>),<br>            onTap: ()&#123;<br>              <span class="hljs-comment">//通过返回根路由跳转到 HomePage </span><br>              Navigator.pushAndRemoveUntil(<br>                  context,<br>                  MaterialPageRoute(builder: (context)&#123;<br>                    <span class="hljs-keyword">return</span> HomePage();<br>                  &#125;),<br>                  (route) =&gt; <span class="hljs-keyword">false</span>);<br>            &#125;,<br>          ),<br>        )<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、在 Routes.dart 中新增路由信息</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutterapplication/pages/RegisterPage.dart&#x27;</span>;<br><br><span class="hljs-comment">//...</span><br><span class="hljs-built_in">String</span> registerPage = <span class="hljs-string">&quot;/registerPage&quot;</span>;<br><br><span class="hljs-keyword">final</span> routes = &#123;<br>  <span class="hljs-comment">//...</span><br>  registerPage: (context) =&gt; RegisterPage()<br>&#125;;<br></code></pre></td></tr></table></figure><p>3、修改 Hompage，SearchPage，LoginPage 的跳转方式为 <code>Navigator.pushNamed</code></p><p>4、效果展示</p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e2c6bf6ff3eb4510bbd21d66cd4af71f~tplv-k3u1fbpfcp-watermark.image?" alt="ezgif.com-gif-maker (3).gif" width="30%" /><p>可以看到，当我们从 RegisterPage 到 HomePage，然后在返回，直接退到了桌面，证明其它页面都被移除了</p><h2 id="二、HTTPS-请求实战"><a href="#二、HTTPS-请求实战" class="headerlink" title="二、HTTPS 请求实战"></a>二、HTTPS 请求实战</h2><p>Flutter 中发起网络请求还是比较简单的，我们引入一个第三方库：</p><blockquote><p> http </p><p> 链接：<a href="https://pub.dev/packages/http">https://pub.dev/packages/http</a></p></blockquote><p>这里需要大家掌握 Dart 异步编程基础，还不明白的看我<a href="https://juejin.cn/post/7130647339294785549#heading-80">Flutter 系列（二）：Dart 语法筑基</a>这篇文章</p><p>在项目的 pubspec.yaml 配置文件添加如下依赖：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dart">dependencies:<br>  http: ^<span class="hljs-number">0.13</span><span class="hljs-number">.5</span><br></code></pre></td></tr></table></figure><p>接下来就可以使用了，简单的介绍下 get，post 请求，这里特别感谢 <a href="https://www.wanandroid.com/">WanAndroid</a> 提供的 Api</p><h3 id="2-1、get-请求"><a href="#2-1、get-请求" class="headerlink" title="2.1、get 请求"></a>2.1、get 请求</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">//导入 http 并设置别名</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:http/http.dart&#x27;</span> <span class="hljs-keyword">as</span> http;<br><br><span class="hljs-comment">//使用 async 标记为异步</span><br><span class="hljs-keyword">void</span> _getData() <span class="hljs-keyword">async</span>&#123;<br>  <span class="hljs-comment">//构建请求 uri</span><br>  <span class="hljs-keyword">var</span> uri = <span class="hljs-built_in">Uri</span>.https(<span class="hljs-string">&quot;www.wanandroid.com&quot;</span>, <span class="hljs-string">&quot;/friend/json&quot;</span>);<br>  <span class="hljs-comment">//使用 http 发起 get 请求，等待返回结果进行后续代码执行</span><br>  <span class="hljs-keyword">var</span> result = <span class="hljs-keyword">await</span> http.<span class="hljs-keyword">get</span>(uri);<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;====&gt; <span class="hljs-subst">$&#123;result.statusCode&#125;</span>&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">void</span> main()&#123;<br>  _getData();<br>&#125;<br><br><span class="hljs-comment">//打印结果</span><br>====&gt; <span class="hljs-number">200</span><br></code></pre></td></tr></table></figure><h3 id="2-2、post-请求"><a href="#2-2、post-请求" class="headerlink" title="2.2、post 请求"></a>2.2、post 请求</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">//json 转换</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;dart:convert&#x27;</span>;<br><span class="hljs-comment">//导入 http 并设置别名</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:http/http.dart&#x27;</span> <span class="hljs-keyword">as</span> http;<br><br><br><span class="hljs-comment">//使用 async 标记为异步</span><br><span class="hljs-keyword">void</span> _postData() <span class="hljs-keyword">async</span>&#123;<br>  <span class="hljs-comment">//构建请求 uri</span><br>  <span class="hljs-keyword">var</span> uri = <span class="hljs-built_in">Uri</span>.https(<span class="hljs-string">&quot;www.wanandroid.com&quot;</span>, <span class="hljs-string">&quot;/user/login&quot;</span>);<br>  <span class="hljs-comment">//使用 http 发起 post 请求，等待返回结果进行后续代码执行</span><br>  <span class="hljs-keyword">var</span> result = <span class="hljs-keyword">await</span> http.post(uri,body: &#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;账号&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;密码&quot;</span>&#125;);<br>  <span class="hljs-keyword">if</span> (result.statusCode == <span class="hljs-number">200</span>) &#123;<br>    <span class="hljs-comment">//将 json 解析成 map</span><br>    <span class="hljs-keyword">var</span> resultMap = json.decode(result.body) <span class="hljs-keyword">as</span> <span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>,<span class="hljs-built_in">dynamic</span>&gt;;<br>    <span class="hljs-comment">//打印 map 里面的属性</span><br>    <span class="hljs-built_in">print</span>(resultMap[<span class="hljs-string">&quot;data&quot;</span>][<span class="hljs-string">&quot;nickname&quot;</span>]);<br>  &#125;<br>&#125;<br><br><br><span class="hljs-keyword">void</span> main()&#123;<br>  _postData();<br>&#125;<br><br><span class="hljs-comment">//打印结果</span><br>sweetying<br></code></pre></td></tr></table></figure><h3 id="2-3、请求案例实战"><a href="#2-3、请求案例实战" class="headerlink" title="2.3、请求案例实战"></a>2.3、请求案例实战</h3><p>首先看一眼我们要实现的效果：</p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/45f74a89d3914ba7bfb01a74833891ec~tplv-k3u1fbpfcp-watermark.image?" alt="ezgif.com-gif-maker (4).gif" width="30%" /><p>实际上就是将我们请求的网络数据使用 ListView 展示出来，比较简单，大家主要掌握思路，直接上代码：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">//导包</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;dart:convert&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:http/http.dart&#x27;</span> <span class="hljs-keyword">as</span> http;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HttpPracticePage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatefulWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  _HttpPracticePageState createState() =&gt; _HttpPracticePageState();<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_HttpPracticePageState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">HttpPracticePage</span>&gt; </span>&#123;<br>  <span class="hljs-keyword">var</span> list = [];<br><br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-keyword">void</span> initState() &#123;<br>    <span class="hljs-keyword">super</span>.initState();<br>    <span class="hljs-comment">//加载网络数据</span><br>    _getData();<br>  &#125;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> MaterialApp(<br>      home: Scaffold(<br>          appBar: AppBar(<br>            title: Text(<span class="hljs-string">&#x27;Http 实践页面&#x27;</span>),<br>          ),<br>          <span class="hljs-comment">//如果 list 为空，展示为空白页面，不为空渲染 ListView</span><br>          body: list.isNotEmpty<br>              ? ListView.builder(<br>              itemCount: list.length,<br>              itemBuilder: (context, index) &#123;<br>                  <span class="hljs-keyword">return</span> ListTile(<br>                      title: Text(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;list[index][<span class="hljs-string">&quot;name&quot;</span>]&#125;</span>&quot;</span>),<br>                      subtitle: Text(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;list[index][<span class="hljs-string">&quot;link&quot;</span>]&#125;</span>&quot;</span>));<br>                &#125;)<br>              : Text(<span class="hljs-string">&quot;&quot;</span>)),<br>    );<br>  &#125;<br><br>  <span class="hljs-comment">//使用 async 标记为异步</span><br>  <span class="hljs-keyword">void</span> _getData() <span class="hljs-keyword">async</span> &#123;<br>    <span class="hljs-comment">//构建请求 uri</span><br>    <span class="hljs-keyword">var</span> uri = <span class="hljs-built_in">Uri</span>.https(<span class="hljs-string">&quot;www.wanandroid.com&quot;</span>, <span class="hljs-string">&quot;/friend/json&quot;</span>);<br>    <span class="hljs-comment">//使用 http 发起 get 请求，等待返回结果进行后续代码执行</span><br>    <span class="hljs-keyword">var</span> result = <span class="hljs-keyword">await</span> http.<span class="hljs-keyword">get</span>(uri);<br>    <span class="hljs-keyword">if</span> (result.statusCode == <span class="hljs-number">200</span>) &#123;<br>      <span class="hljs-comment">//将 json 解析成 map</span><br>      <span class="hljs-keyword">var</span> map = json.decode(result.body) <span class="hljs-keyword">as</span> <span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">dynamic</span>&gt;;<br>      <span class="hljs-comment">//通知 UI 进行刷新</span><br>      setState(() &#123;<br>        list = map[<span class="hljs-string">&quot;data&quot;</span>];<br>      &#125;);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>本篇文章我们介绍了：</p><p>1、Flutter 中的路由使用，大家可以根据不同的业务场景使用不同的 Api</p><p>2、推荐使用路由统一管理以及导包的时候使用绝对路径</p><p>3、简单的介绍了使用第三方库 http 进行 get，post 请求，最后进行了一个请求案例的实战</p><p>好了，本篇文章到这里就结束了，希望能给你带来帮助 🤝</p><p><strong>感谢你阅读这篇文章</strong></p><h3 id="下篇预告"><a href="#下篇预告" class="headerlink" title="下篇预告"></a>下篇预告</h3><p>下篇文章我会讲 Flutter 与 Android 的通信，尽请期待吧🍺</p><h3 id="参考和推荐"><a href="#参考和推荐" class="headerlink" title="参考和推荐"></a>参考和推荐</h3><p><a href="https://www.bilibili.com/video/BV1S4411E7LY?p=19&vd_source=d0b24cb21c438ff4a9ac2e589eacb3d9">Flutter 教程</a>：通俗易懂的 Flutter 入门教程</p><blockquote><p><strong>你的点赞，评论，是对我巨大的鼓励！</strong></p><p>欢迎关注我的<strong>公众号：</strong>  <a href="https://link.juejin.cn/?target=http://m6z.cn/6jwi7b" title="http://m6z.cn/6jwi7b"><strong>sweetying</strong></a> ，文章更新可第一时间收到</p><p>如果<strong>有问题</strong>，公众号内有加我微信的入口，在技术学习、个人成长的道路上，我们一起前进！</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Flutter</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Flutter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flutter 系列（六）：Flutter 常用表单 Widget</title>
    <link href="/2022/10/10/Flutter%20%E7%B3%BB%E5%88%97%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9AFlutter%20%E5%B8%B8%E7%94%A8%E8%A1%A8%E5%8D%95%20Widget/"/>
    <url>/2022/10/10/Flutter%20%E7%B3%BB%E5%88%97%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9AFlutter%20%E5%B8%B8%E7%94%A8%E8%A1%A8%E5%8D%95%20Widget/</url>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sweetying520/picgo/master/img/202210101705690.jpeg" alt="beach-1824855_1920"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>很高兴遇见你~</p><p>在本系列的上一篇文章中，我们介绍了 Flutter 中常用的按钮 Widget，Flutter 1.x 和 Flutter 2.x 按钮的变化，最后通过 Flutter 1.x 相关 Button + BottomNavigationBar + FloatingActionButton 实现了一个综合案例。还没有看过上一篇文章的朋友，建议先去阅读 <a href="https://juejin.cn/post/7137082885571346463">Flutter 系列（五）：Flutter 常用按钮 Widget</a>。接下来我们对 Flutter 表单 Widget 进行学习</p><p>Flutter 中常见的表单有：TextField，CheckBox，Radio，Switch，CheckboxListTile，RadioListTile，SwitchListTile，Slider 等，下面就介绍一下这些常用的 Widget</p><h2 id="一、Flutter-常用表单-Widget-介绍"><a href="#一、Flutter-常用表单-Widget-介绍" class="headerlink" title="一、Flutter 常用表单 Widget 介绍"></a>一、Flutter 常用表单 Widget 介绍</h2><h3 id="1-1、TextFiled-文本框"><a href="#1-1、TextFiled-文本框" class="headerlink" title="1.1、TextFiled 文本框"></a>1.1、TextFiled 文本框</h3><p>TextFiled 是 Flutter 给我们提供的文本框 Widget，其常用的属性有：</p><table><thead><tr><th>属性名称</th><th>属性类型</th><th>说明</th></tr></thead><tbody><tr><td>maxLines</td><td>int</td><td>设置此参数可以把文本框改为多行文本框</td></tr><tr><td>onChanged</td><td>ValueChanged<String></td><td>文本框改变时触发的事件</td></tr><tr><td>decoratioin</td><td>InputDecoration</td><td>装饰，InputDecoration 常用属性：<br>hintText：默认提示文案<br>border：文本框边框，配合 OutlineInputBorder 使用<br>labelText：label 的名称<br>labelStyle：配置 label 的样式</td></tr><tr><td>obscureText</td><td>bool</td><td>是否把文本框改为密码框</td></tr><tr><td>controller</td><td>TextEditingController</td><td>配置文本框默认显示的内容</td></tr></tbody></table><p>运行下面代码：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class="hljs-keyword">void</span> main() &#123;<br>  runApp(MaterialApp(<br>    home: Scaffold(<br>      appBar: AppBar(<br>        title: Text(<span class="hljs-string">&quot;Flutter Form Practice&quot;</span>), <span class="hljs-comment">//设置标题栏标题</span><br>      ),<br>      body: MyBodyPage(), <span class="hljs-comment">//自定义 body Wdiget</span><br>    )<br>  ));<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBodyPage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span></span>&#123;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Padding(<br>      padding: EdgeInsets.all(<span class="hljs-number">20</span>),<br>      child: Column(<br>        children: [<br>          TextField( <span class="hljs-comment">//账号输入框</span><br>            maxLines: <span class="hljs-number">1</span>, <span class="hljs-comment">//最大显示一行</span><br>            decoration: InputDecoration(<br>                hintText: <span class="hljs-string">&quot;please input account&quot;</span>, <span class="hljs-comment">//默认提示文案</span><br>                label: Text(<span class="hljs-string">&quot;Account&quot;</span>) <span class="hljs-comment">//文本框标签提示</span><br>            ),<br>          ),<br>          SizedBox(height: <span class="hljs-number">20</span>),<br>          TextField(<span class="hljs-comment">//密码输入框</span><br>            maxLines: <span class="hljs-number">1</span>, <span class="hljs-comment">//最大显示一行</span><br>            obscureText: <span class="hljs-keyword">true</span>, <span class="hljs-comment">//设置文本输入为密文</span><br>            decoration: InputDecoration(<br>                hintText: <span class="hljs-string">&quot;please input password&quot;</span>, <span class="hljs-comment">//默认提示文案</span><br>                label: Text(<span class="hljs-string">&quot;Password&quot;</span>) <span class="hljs-comment">//文本框标签提示</span><br>            ),<br>          )<br>        ],<br>      ),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>效果：</p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/02d56e52ecc84c8baebd9e8b1f3cc86c~tplv-k3u1fbpfcp-watermark.image?" alt="textfield.png" width="50%" /><h3 id="1-2、Checkbox，CheckboxListTile-复选框"><a href="#1-2、Checkbox，CheckboxListTile-复选框" class="headerlink" title="1.2、Checkbox，CheckboxListTile 复选框"></a>1.2、Checkbox，CheckboxListTile 复选框</h3><p>Checkbox 是 Flutter 给我们提供的复选框 Widget，常用属性有：</p><table><thead><tr><th>属性名称</th><th>属性类型</th><th>说明</th></tr></thead><tbody><tr><td>value</td><td>bool</td><td>必填项，true：选中，false：未选中</td></tr><tr><td>onChanged</td><td>ValueChanged<bool></td><td>必填项，改变时触发的事件</td></tr><tr><td>activeColor</td><td>Color</td><td>选中的背景颜色</td></tr><tr><td>checkColor</td><td>Color</td><td>选中复选框里面符号的颜色</td></tr></tbody></table><p>CheckboxListTile 是 Flutter 给我们提供的复选框列表 Item，常用属性有：</p><table><thead><tr><th>属性名称</th><th>属性类型</th><th>说明</th></tr></thead><tbody><tr><td>value</td><td>bool</td><td>必填项，true：选中，false：未选中</td></tr><tr><td>onChanged</td><td>ValueChanged<bool></td><td>必填项，改变时触发的事件</td></tr><tr><td>activeColor</td><td>Color</td><td>选中的背景颜色，如果 selected 为 true ，则 title，subtitle，secondary 也会变</td></tr><tr><td>checkColor</td><td>Color</td><td>选中复选框里面符号的颜色</td></tr><tr><td>title</td><td>Widget</td><td>标题</td></tr><tr><td>subtitle</td><td>Widget</td><td>二级标题</td></tr><tr><td>secondary</td><td>Widget</td><td>配置显示的图标或图片</td></tr><tr><td>selected</td><td>bool</td><td>选中时其它子 Widget 颜色是否跟着改变</td></tr></tbody></table><p>在这之前，我们自定义 Wdiget 都是继承 StatelessWidget，但表单相关的 Widget 都是有状态的，因此需要继承 StatefulWidget 来动态展示它的一个状态，继承 StatefulWidget 的一个标准模版如下：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBodyPage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatefulWidget</span></span>&#123;<br>  <span class="hljs-meta">@override</span><br>  State&lt;StatefulWidget&gt; createState() =&gt; _MyBodyPageState();<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_MyBodyPageState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">MyBodyPage</span>&gt;</span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> implement build</span><br>    <span class="hljs-keyword">throw</span> UnimplementedError();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来我们使用 Checkbox，CheckboxListTile 来实践一下：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class="hljs-keyword">void</span> main() &#123;<br>  runApp(MaterialApp(<br>    home: Scaffold(<br>      appBar: AppBar(<br>        title: Text(<span class="hljs-string">&quot;Flutter Form Practice&quot;</span>), <span class="hljs-comment">//设置标题栏标题</span><br>      ),<br>      body: MyBodyPage(), <span class="hljs-comment">//自定义 body Wdiget</span><br>    )<br>  ));<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBodyPage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatefulWidget</span></span>&#123;<br>  <span class="hljs-meta">@override</span><br>  State&lt;StatefulWidget&gt; createState() =&gt; _MyBodyPageState();<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_MyBodyPageState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">MyBodyPage</span>&gt; </span>&#123;<br><br>  <span class="hljs-comment">//记录第一个复选框的选中状态</span><br>  <span class="hljs-keyword">var</span> flag1 = <span class="hljs-keyword">false</span>;<br>  <span class="hljs-comment">//记录第二个复选框的选中状态</span><br>  <span class="hljs-keyword">var</span> flag2 = <span class="hljs-keyword">false</span>;<br>  <span class="hljs-comment">//记录第三个复选框的选中状态</span><br>  <span class="hljs-keyword">var</span> flag3 = <span class="hljs-keyword">false</span>;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Column(<br>      mainAxisAlignment: MainAxisAlignment.center,<br>      children: [<br>        Checkbox( <span class="hljs-comment">//第一个复选框</span><br>          value: flag1,<br>          onChanged: (value)&#123;<br>            setState(() &#123;<br>              flag1 = value??<span class="hljs-keyword">false</span>; <span class="hljs-comment">//更新复选框的状态</span><br>            &#125;);<br>          &#125;,<br>        ),<br>        Row(<br>          mainAxisAlignment: MainAxisAlignment.center,<br>          children: [<br>            Text(flag1 == <span class="hljs-keyword">true</span> ? <span class="hljs-string">&quot;选中&quot;</span> : <span class="hljs-string">&quot;未选中&quot;</span>)<br>          ],<br>        ),<br>        Divider(color: Colors.black),<br>        CheckboxListTile(value: flag2, onChanged: (value)&#123; <span class="hljs-comment">//第二个复选框列表 item</span><br>          setState(() &#123;<br>            flag2 = value??<span class="hljs-keyword">false</span>; <span class="hljs-comment">//更新复选框的状态</span><br>          &#125;);<br>        &#125;,<br>          activeColor: Colors.green, <span class="hljs-comment">//选中的背景颜色，如果 selected 为 true ，则 title，subtitle，secondary 也会变</span><br>          checkColor: Colors.black, <span class="hljs-comment">//选中复选框里面符号的颜色</span><br>          title: Text(<span class="hljs-string">&#x27;标题&#x27;</span>), <span class="hljs-comment">//展示标题</span><br>          subtitle: Text(<span class="hljs-string">&quot;描述&quot;</span>), <span class="hljs-comment">//展示副标题</span><br>          selected: flag2, <span class="hljs-comment">//选中时其它子 Widget 颜色跟着改变</span><br>        ),<br><br>        Divider(color: Colors.black),<br><br>        CheckboxListTile(value: flag3, onChanged: (value)&#123; <span class="hljs-comment">//第三个复选框列表 item</span><br>          setState(() &#123;<br>            flag3 = value??<span class="hljs-keyword">false</span>; <span class="hljs-comment">//更新复选框的状态</span><br>          &#125;);<br>        &#125;,<br>          title: Text(<span class="hljs-string">&#x27;标题&#x27;</span>), <span class="hljs-comment">//展示标题</span><br>          subtitle: Text(<span class="hljs-string">&quot;描述&quot;</span>), <span class="hljs-comment">//展示副标题</span><br>          secondary: Icon(Icons.home), <span class="hljs-comment">//展示图标</span><br>          selected: <span class="hljs-keyword">false</span>, <span class="hljs-comment">//选中时其它子 Widget 颜色不跟着改变</span><br>        )<br>      ],<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>效果：</p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/152787ffc53245e6952bdb94f269da08~tplv-k3u1fbpfcp-watermark.image?" alt="checkbox.gif" width="30%" /><h3 id="1-3、Radio，RadioListTile-单选框"><a href="#1-3、Radio，RadioListTile-单选框" class="headerlink" title="1.3、Radio，RadioListTile 单选框"></a>1.3、Radio，RadioListTile 单选框</h3><p>Radio，RadioListTile 是 Flutter 给我们提供的单选框和单选框列表 Item，它的常用属性和 Checkbox，CheckboxListTile 非常类似，区别就是：Radio，RadioListTile 必须提供一个 groupValue 属性用于记录单选框的分组，直接上代码感受下：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class="hljs-keyword">void</span> main() &#123;<br>  runApp(MaterialApp(<br>    home: Scaffold(<br>      appBar: AppBar(<br>        title: Text(<span class="hljs-string">&quot;Flutter Form Practice&quot;</span>), <span class="hljs-comment">//设置标题栏标题</span><br>      ),<br>      body: MyBodyPage(), <span class="hljs-comment">//自定义 body Wdiget</span><br>    )<br>  ));<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBodyPage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatefulWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  State&lt;StatefulWidget&gt; createState() =&gt; _MyBodyPageState();<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_MyBodyPageState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">MyBodyPage</span>&gt; </span>&#123;<br>  <span class="hljs-comment">//性别</span><br>  <span class="hljs-built_in">int</span> sex = <span class="hljs-number">1</span>;<br>  <span class="hljs-comment">//第二个复选框状态标记</span><br>  <span class="hljs-built_in">bool</span> flag = <span class="hljs-keyword">true</span>;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Column(<br>      mainAxisAlignment: MainAxisAlignment.center,<br>      children: [<br>        <span class="hljs-comment">//第一组单选框</span><br>        Row(<br>          mainAxisAlignment: MainAxisAlignment.center,<br>          children: [<br>            Text(<span class="hljs-string">&quot;男&quot;</span>),<br>            Radio(<br>                value: <span class="hljs-number">1</span>,<br>                onChanged: (value) &#123;<br>                  setState(() &#123;<br>                    sex = value <span class="hljs-keyword">as</span> <span class="hljs-built_in">int</span>; <span class="hljs-comment">//更新状态</span><br>                  &#125;);<br>                &#125;,<br>                groupValue: sex), <span class="hljs-comment">//groupValue 为 sex</span><br>            SizedBox(width: <span class="hljs-number">20</span>),<br>            Text(<span class="hljs-string">&quot;女&quot;</span>),<br>            Radio(<br>                value: <span class="hljs-number">2</span>,<br>                onChanged: (value) &#123;<br>                  setState(() &#123;<br>                    sex = value <span class="hljs-keyword">as</span> <span class="hljs-built_in">int</span>; <span class="hljs-comment">//更新状态</span><br>                  &#125;);<br>                &#125;,<br>                groupValue: sex) <span class="hljs-comment">//groupValue 为 sex</span><br>          ],<br>        ),<br>        SizedBox(height: <span class="hljs-number">20</span>),<br>        Divider(),<br>         <span class="hljs-comment">//第二组单选框</span><br>        RadioListTile(<br>          value: <span class="hljs-keyword">true</span>,<br>          onChanged: (value) &#123;<br>            setState(() &#123;<br>              flag = value <span class="hljs-keyword">as</span> <span class="hljs-built_in">bool</span>; <span class="hljs-comment">//更新状态</span><br>            &#125;);<br>          &#125;,<br>          groupValue: flag, <span class="hljs-comment">//groupValue 为 flag</span><br>          title: Text(<span class="hljs-string">&quot;一级标题&quot;</span>), <span class="hljs-comment">//标题</span><br>          subtitle: Text(<span class="hljs-string">&quot;二级标题&quot;</span>), <span class="hljs-comment">//副标题</span><br>          secondary: Icon(Icons.home), <span class="hljs-comment">//显示图标</span><br>        ),<br>        RadioListTile(<br>          value: <span class="hljs-keyword">false</span>,<br>          onChanged: (value) &#123;<br>            setState(() &#123;<br>              flag = value <span class="hljs-keyword">as</span> <span class="hljs-built_in">bool</span>; <span class="hljs-comment">//更新状态</span><br>            &#125;);<br>          &#125;,<br>          groupValue: flag, <span class="hljs-comment">//groupValue 为 flag</span><br>          title: Text(<span class="hljs-string">&quot;一级标题&quot;</span>), <span class="hljs-comment">//标题</span><br>          subtitle: Text(<span class="hljs-string">&quot;二级标题&quot;</span>), <span class="hljs-comment">//副标题</span><br>          secondary: Image.network( <span class="hljs-comment">//显示图片</span><br>              <span class="hljs-string">&quot;https://img.lianzhixiu.com/uploads/210106/37-21010609363aS.jpg&quot;</span>),<br>        )<br>      ],<br>    );<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>效果：</p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3d902dab159d44c4b737255539be94e4~tplv-k3u1fbpfcp-watermark.image?" alt="radiobutton.gif" width="30%" /><h3 id="1-4、Switch，SwitchListTile-开关"><a href="#1-4、Switch，SwitchListTile-开关" class="headerlink" title="1.4、Switch，SwitchListTile 开关"></a>1.4、Switch，SwitchListTile 开关</h3><p>Switch，SwitchListTile 是 Flutter 给我们提供的开关和开关列表 Item，常用属性和上面两个类似，我们快速过一下：</p><p>代码实践：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class="hljs-keyword">void</span> main() &#123;<br>  runApp(MaterialApp(<br>    home: Scaffold(<br>      appBar: AppBar(<br>        title: Text(<span class="hljs-string">&quot;Flutter Form Practice&quot;</span>), <span class="hljs-comment">//设置标题栏标题</span><br>      ),<br>      body: MyBodyPage(), <span class="hljs-comment">//自定义 body Wdiget</span><br>    )<br>  ));<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBodyPage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatefulWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  State&lt;StatefulWidget&gt; createState() =&gt; _MyBodyPageState();<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_MyBodyPageState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">MyBodyPage</span>&gt; </span>&#123;<br>  <span class="hljs-comment">//开关的状态标记</span><br>  <span class="hljs-built_in">bool</span> flag = <span class="hljs-keyword">true</span>;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Column(<br>      children: [<br>        Switch( <span class="hljs-comment">//Switch</span><br>            value: flag,<br>            onChanged: (value) &#123;<br>              setState(() &#123;<br>                flag = value; <span class="hljs-comment">//更新状态</span><br>              &#125;);<br>            &#125;),<br>        SizedBox(height: <span class="hljs-number">20</span>),<br>        SwitchListTile( <span class="hljs-comment">//SwitchListTile</span><br>            value: flag,<br>            onChanged: (value) &#123;<br>              setState(() &#123;<br>                flag = value; <span class="hljs-comment">//更新状态</span><br>              &#125;);<br>            &#125;,<br>            title: Text(<span class="hljs-string">&quot;标题&quot;</span>), <span class="hljs-comment">//标题</span><br>            subtitle: Text(<span class="hljs-string">&quot;副标题&quot;</span>), <span class="hljs-comment">//副标题</span><br>            secondary: Image.network( <span class="hljs-comment">//显示图片</span><br>              <span class="hljs-string">&quot;https://img.lianzhixiu.com/uploads/210106/37-21010609363aS.jpg&quot;</span><br>            ) <br>        )<br>      ],<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>效果：</p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/45fad04d96ec4c12a3b9f7ee67e04580~tplv-k3u1fbpfcp-watermark.image?" alt="switch.gif" width="30%" /><h3 id="1-5、Slider-进度条"><a href="#1-5、Slider-进度条" class="headerlink" title="1.5、Slider 进度条"></a>1.5、Slider 进度条</h3><p>Slider 是 Flutter 给我们提供的进度条 Widget。其常用属性有：</p><table><thead><tr><th>属性名称</th><th>属性类型</th><th>说明</th></tr></thead><tbody><tr><td>value</td><td>double</td><td>必填项，当前 Slider 滑块位置的值，注意不可以超出 min 和 max 的范围，否则会报错</td></tr><tr><td>onChanged</td><td>ValueChanged<double></td><td>必填项，正在滑动或者点击，未松手</td></tr><tr><td>onChangeStart</td><td>ValueChanged<double></td><td>刚开始点击</td></tr><tr><td>onChangeEnd</td><td>ValueChanged<double></td><td>滑动或者点击结束，已松手</td></tr><tr><td>min</td><td>double</td><td>最小值，默认为 0.0</td></tr><tr><td>max</td><td>double</td><td>最大值，默认为 1.0</td></tr><tr><td>activeColor</td><td>Color</td><td>滑块颜色</td></tr><tr><td>inactiveColor</td><td>Color</td><td>轨道颜色</td></tr><tr><td>label</td><td>String</td><td>气泡文本</td></tr><tr><td>divisions</td><td>int</td><td>刻度，如没有刻度，label 则不会展示</td></tr></tbody></table><p>代码实践：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class="hljs-keyword">void</span> main() &#123;<br>  runApp(MaterialApp(<br>    home: Scaffold(<br>      appBar: AppBar(<br>        title: Text(<span class="hljs-string">&quot;Flutter Form Practice&quot;</span>), <span class="hljs-comment">//设置标题栏标题</span><br>      ),<br>      body: MyBodyPage(), <span class="hljs-comment">//自定义 body Wdiget</span><br>    )<br>  ));<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBodyPage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatefulWidget</span></span>&#123;<br><br>  <span class="hljs-meta">@override</span><br>  State&lt;StatefulWidget&gt; createState() =&gt; _MyBodyPageState();<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_MyBodyPageState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">MyBodyPage</span>&gt;</span>&#123;<br>  <span class="hljs-comment">//滑块的值</span><br>  <span class="hljs-built_in">double</span> sliderValue = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-comment">// 更新状态</span><br>  <span class="hljs-keyword">void</span> updateSlider(value)&#123;<br>    sliderValue = value;<br>    setState(() &#123;<br><br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Padding(<br>      padding: EdgeInsets.all(<span class="hljs-number">20</span>),<br>      child: Column(<br>        children: [<br>          _slider() <br>        ],<br>      ),<br>    );<br>  &#125;<br><br>  <span class="hljs-comment">//构建滑块 Widget</span><br>  Slider _slider()&#123;<br>    <span class="hljs-keyword">return</span> Slider(<br>      value: sliderValue,<br>      max: <span class="hljs-number">100</span>, <span class="hljs-comment">//最大值为 100</span><br>      activeColor: Colors.red, <span class="hljs-comment">//滑块颜色为红色</span><br>      inactiveColor: Colors.green, <span class="hljs-comment">//轨道颜色为绿色</span><br>      label: <span class="hljs-string">&quot;进度：<span class="hljs-subst">$sliderValue</span>&quot;</span>, <span class="hljs-comment">//气泡文本</span><br>      divisions: <span class="hljs-number">10</span>, <span class="hljs-comment">//刻度</span><br>      onChanged: (value)&#123; <span class="hljs-comment">//正在滑动或者点击，未松手</span><br>        updateSlider(value);<br>      &#125;,<br>      onChangeStart: (value)&#123; <span class="hljs-comment">//刚开始点击</span><br>        updateSlider(value);<br>      &#125;,<br>      onChangeEnd: (value)&#123; <span class="hljs-comment">//滑动或者点击结束，已松手</span><br>        updateSlider(value);<br>      &#125;,<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>效果：</p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1783f4399eb14b8eaafb5a5a69778c0d~tplv-k3u1fbpfcp-watermark.image?" alt="slider.gif" width="30%" /><p>我们还可以使用 SliderTheme 嵌套 Slider 实现各种自定义样式，这里就不做演示了，SliderTheme 常用属性有：</p><table><thead><tr><th>属性名称</th><th>属性类型</th><th>说明</th></tr></thead><tbody><tr><td>data</td><td>SliderThemeData</td><td>必填项，通过 SliderThemeData 实现各种自定义样式</td></tr><tr><td>child</td><td>Widget</td><td>必填项，子 Widget</td></tr></tbody></table><p>SliderThemeData 属性介绍：<a href="https://api.flutter.dev/flutter/material/SliderThemeData-class.html">https://api.flutter.dev/flutter/material/SliderThemeData-class.html</a></p><h2 id="二、表单-Widget-之综合案例"><a href="#二、表单-Widget-之综合案例" class="headerlink" title="二、表单 Widget 之综合案例"></a>二、表单 Widget 之综合案例</h2><p>接下来，我们就使用表单 Widget 做一个用户信息登记系统，效果如下：</p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b87c5a8f38ca46c1a1c9931f6a9d6cda~tplv-k3u1fbpfcp-watermark.image?" alt="form_combine.gif" width="30%" /><p>按照惯例，我们先分析这个页面：</p><p>1、可以看到这是一个从上往下的垂直布局，有个内边距，子 Widget 是自适应的，这里我们可以使用 ListView 并设置一个 padding 实现</p><p>2、然后从上往下依次是，输入姓名：文本框（TextField），性别选择：单选框（Radio），兴趣爱好：复选框（Checkbox），颜值打分：滑块（Slider），永不宕机：开关（SwitchListTile），获取用户信息（RaisedButton），用户信息展示（Text）</p><p>3、这些 Widget 都是有状态的，因此我们需要继承 StatefulWidget，并使用 setState 方法去更新状态</p><p>我们画一张图来理一下 Widget 之间的树形结构：</p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ca88da02d2e84137ac6b3fd017ab63c1~tplv-k3u1fbpfcp-watermark.image?" alt="表单 Widget 之综合案例.png" width="50%" /><p>最后我们进行代码实现，里面写了详细的注释：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class="hljs-keyword">void</span> main() &#123;<br>  runApp(MaterialApp(<br>      home: Scaffold(<br>        appBar: AppBar(<br>          title: Text(<span class="hljs-string">&quot;用户信息登记系统&quot;</span>), <span class="hljs-comment">//设置标题栏标题</span><br>        ),<br>        body: MyBodyPage(), <span class="hljs-comment">//自定义 body Wdiget</span><br>      )<br>  ));<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBodyPage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatefulWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  State&lt;StatefulWidget&gt; createState() =&gt; _MyBodyPageState();<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_MyBodyPageState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">MyBodyPage</span>&gt; </span>&#123;<br><br>  <span class="hljs-comment">//用户姓名</span><br>  <span class="hljs-built_in">String</span> userName = <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-comment">//性别</span><br>  <span class="hljs-built_in">int</span> sex = <span class="hljs-number">1</span>;<br>  <span class="hljs-comment">//是否开启永不宕机</span><br>  <span class="hljs-built_in">bool</span> flag = <span class="hljs-keyword">false</span>;<br>  <span class="hljs-comment">//颜值打分</span><br>  <span class="hljs-built_in">double</span> sliderValue = <span class="hljs-number">0</span>;<br>  <span class="hljs-comment">//兴趣爱好</span><br>  <span class="hljs-built_in">List</span> hobbies = [<br>    &#123;<span class="hljs-string">&quot;checked&quot;</span>: <span class="hljs-keyword">false</span>, <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;打篮球&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;checked&quot;</span>: <span class="hljs-keyword">false</span>, <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;爬山&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;checked&quot;</span>: <span class="hljs-keyword">false</span>, <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;写代码&quot;</span>&#125;,<br>  ];<br>  <span class="hljs-comment">//个人信息</span><br>  <span class="hljs-built_in">String</span> info = <span class="hljs-string">&quot;&quot;</span>;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> ListView(<br>      padding: EdgeInsets.all(<span class="hljs-number">20</span>),<br>      children: [<br>        TextField( <span class="hljs-comment">//文本框：用户姓名</span><br>          decoration: InputDecoration(<br>              hintText: <span class="hljs-string">&quot;请输入用户姓名&quot;</span>, <span class="hljs-comment">//默认提示文案</span><br>              label: Text(<span class="hljs-string">&quot;姓名&quot;</span>) <span class="hljs-comment">//标签</span><br>          ),<br>          onChanged: (str)&#123;<br>            setState(() &#123;<br>              userName = str; <span class="hljs-comment">//更新用户姓名状态</span><br>            &#125;);<br>          &#125;,<br>        ),<br>        SizedBox(height: <span class="hljs-number">10</span>),<br>        Text(<span class="hljs-string">&quot;性别：&quot;</span>),<br>        Row( <span class="hljs-comment">//性别选择</span><br>          children: [<br>            Text(<span class="hljs-string">&quot;男&quot;</span>),<br>            Radio(value: <span class="hljs-number">1</span>, groupValue: sex, onChanged: _sexChanged),<br>            Text(<span class="hljs-string">&quot;女&quot;</span>),<br>            Radio(value: <span class="hljs-number">2</span>, groupValue: sex, onChanged:_sexChanged)<br>          ],<br>        ),<br>        Text(<span class="hljs-string">&quot;兴趣爱好：&quot;</span>),<br>        Row( <span class="hljs-comment">//兴趣爱好</span><br>          children: _getHobbies(),<br>        ),<br>        _slider(),<br>        Row( <span class="hljs-comment">//颜值打分</span><br>          mainAxisAlignment: MainAxisAlignment.center,<br>          children: [<br>            Text(<span class="hljs-string">&quot;颜值：<span class="hljs-subst">$sliderValue</span>分&quot;</span>),<br>          ],<br>        ),<br>        SwitchListTile( <span class="hljs-comment">//开关永不宕机</span><br>            value: flag,<br>            title: Text(<span class="hljs-string">&quot;永不宕机&quot;</span>),<br>            onChanged: (value)&#123;<br>              setState(() &#123;<br>                flag = value;<br>              &#125;);<br>            &#125;<br>        ),<br>        RaisedButton( <span class="hljs-comment">//获取用户信息</span><br>          child: Text(<span class="hljs-string">&quot;获取用户信息&quot;</span>),<br>          onPressed: ()&#123;<br>            setState(() &#123;<br>              info = getInfo(); <span class="hljs-comment">//更新用户状态信息</span><br>            &#125;);<br>          &#125;,<br>          color: Colors.blue,<br>          textColor: Colors.white,<br>        ),<br><br>        Text(info) <span class="hljs-comment">//用户信息展示</span><br>      ],<br>    );<br>  &#125;<br><br>  <span class="hljs-comment">//获取用户展示的信息</span><br>  <span class="hljs-built_in">String</span> getInfo() &#123;<br>    <span class="hljs-built_in">String</span> hobbiesStr = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> element <span class="hljs-keyword">in</span> hobbies) &#123;<br>      <span class="hljs-keyword">if</span>(element[<span class="hljs-string">&quot;checked&quot;</span>])&#123;<br>        hobbiesStr += element[<span class="hljs-string">&quot;title&quot;</span>] + <span class="hljs-string">&quot;，&quot;</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;<span class="hljs-subst">$userName</span>，性别<span class="hljs-subst">$&#123;sex == <span class="hljs-number">1</span> ? <span class="hljs-string">&quot;男&quot;</span> : <span class="hljs-string">&quot;女&quot;</span>&#125;</span>，喜欢<span class="hljs-subst">$hobbiesStr</span><span class="hljs-subst">$&#123;flag ? <span class="hljs-string">&quot;永不宕机，&quot;</span> : <span class="hljs-string">&quot;&quot;</span>&#125;</span>颜值<span class="hljs-subst">$sliderValue</span>分&quot;</span>;<br>  &#125;<br><br>  <span class="hljs-comment">//更新性别状态</span><br>  <span class="hljs-keyword">void</span> _sexChanged(value)&#123;<br>    setState(() &#123;<br>      sex = value <span class="hljs-keyword">as</span> <span class="hljs-built_in">int</span>;<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-comment">//更新滑块状态</span><br>  <span class="hljs-keyword">void</span> updateSlider(value)&#123;<br>    sliderValue = value;<br>    setState(() &#123;<br><br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-comment">//获取兴趣爱好 Widget List</span><br>  <span class="hljs-built_in">List</span>&lt;Widget&gt; _getHobbies() &#123;<br>    <span class="hljs-built_in">List</span>&lt;Widget&gt; temp = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> element <span class="hljs-keyword">in</span> hobbies) &#123;<br>      <span class="hljs-comment">//添加 Text</span><br>      temp.add(Text(element[<span class="hljs-string">&quot;title&quot;</span>]));<br>      <span class="hljs-comment">//添加 Checkbox</span><br>      temp.add(Checkbox(<br>          value: element[<span class="hljs-string">&quot;checked&quot;</span>],<br>          onChanged: (value) &#123;<br>            setState(() &#123;<br>              element[<span class="hljs-string">&quot;checked&quot;</span>] = value;<br>            &#125;);<br>          &#125;));<br>    &#125;<br>    <span class="hljs-keyword">return</span> temp;<br>  &#125;<br><br>  <span class="hljs-comment">//获取滑块 Widget</span><br>  Slider _slider()&#123;<br>    <span class="hljs-keyword">return</span> Slider(<br>      value: sliderValue,<br>      max: <span class="hljs-number">100</span>, <span class="hljs-comment">//最大值为 100</span><br>      label: <span class="hljs-string">&quot;颜值：<span class="hljs-subst">$sliderValue</span>分&quot;</span>, <span class="hljs-comment">//气泡文本</span><br>      divisions: <span class="hljs-number">10</span>, <span class="hljs-comment">//刻度</span><br>      onChanged: (value)&#123; <span class="hljs-comment">//正在滑动或者点击，未松手</span><br>        updateSlider(value);<br>      &#125;,<br>      onChangeStart: (value)&#123; <span class="hljs-comment">//刚开始点击</span><br>        updateSlider(value);<br>      &#125;,<br>      onChangeEnd: (value)&#123; <span class="hljs-comment">//滑动或者点击结束，已松手</span><br>        updateSlider(value);<br>      &#125;,<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>本篇文章我们介绍了：</p><p>1、Flutter 中常用的表单 Widget ：TextField，CheckBox，Radio，Switch，CheckboxListTile，RadioListTile，SwitchListTile，Slider 的常用属性和使用，以及它们的显示效果</p><p>2、通过表单 Widget 组合实现了一个用户信息登记系统</p><p>好了，本篇文章到这里就结束了，希望能给你带来帮助 🤝</p><p><strong>感谢你阅读这篇文章</strong></p><h3 id="下篇预告"><a href="#下篇预告" class="headerlink" title="下篇预告"></a>下篇预告</h3><p>后续不会花大篇幅去介绍 Widget，我会穿插在其它知识点中简单介绍下，Flutter 中有 400 多个 Widget，不可能每个都去学，我的建议：掌握常用的，其它用到时在去官网查询。</p><p>下篇文章我会讲 Flutter 中的路由以及实际开发中请求 Http 接口渲染页面，尽请期待吧🍺</p><h3 id="参考和推荐"><a href="#参考和推荐" class="headerlink" title="参考和推荐"></a>参考和推荐</h3><p><a href="https://www.bilibili.com/video/BV1S4411E7LY?p=19&vd_source=d0b24cb21c438ff4a9ac2e589eacb3d9">Flutter 教程</a>：通俗易懂的 Flutter 入门教程</p><blockquote><p><strong>你的点赞，评论，是对我巨大的鼓励！</strong></p><p>欢迎关注我的<strong>公众号：</strong>  <a href="https://link.juejin.cn/?target=http://m6z.cn/6jwi7b" title="http://m6z.cn/6jwi7b"><strong>sweetying</strong></a> ，文章更新可第一时间收到</p><p>如果<strong>有问题</strong>，公众号内有加我微信的入口，在技术学习、个人成长的道路上，我们一起前进！</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Flutter</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Flutter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flutter 系列（五）：Flutter 常用按钮 Widget</title>
    <link href="/2022/10/10/Flutter%20%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9AFlutter%20%E5%B8%B8%E7%94%A8%E6%8C%89%E9%92%AE%20Widget/"/>
    <url>/2022/10/10/Flutter%20%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9AFlutter%20%E5%B8%B8%E7%94%A8%E6%8C%89%E9%92%AE%20Widget/</url>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sweetying520/picgo/master/img/202210101701772.jpeg" alt="hintersee-3601004_1920"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>很高兴遇见你~</p><p>在本系列的上一篇文章中，我们通过：效果展示 -&gt; Widget 介绍 -&gt; 代码实现的方式对 Image，ListView，GridView，Stack 进行了介绍，并穿插讲解了一些其它 Widget ，最后通过一个综合案例对学习的 Widget 进行了组合使用。还没有看过上一篇文章的朋友，建议先去阅读 <a href="https://juejin.cn/post/7135827895993237541">Flutter 系列（四）：Flutter 常用 Widget 二</a>。接下来我们对 Flutter 按钮 Widget 进行学习</p><p>Flutter 中的按钮 Widget 有很多，常见的按钮 Widget 有：RaisedButton，FlatButton，IconButton，OutlineButton，ButtonBar，FloatingActionButton 等，下面就介绍一下这些常用的 Widget</p><h2 id="一、Flutter-常用按钮-Widget-介绍"><a href="#一、Flutter-常用按钮-Widget-介绍" class="headerlink" title="一、Flutter 常用按钮 Widget 介绍"></a>一、Flutter 常用按钮 Widget 介绍</h2><h3 id="1-1、Flutter-按钮-Widget-通用属性"><a href="#1-1、Flutter-按钮-Widget-通用属性" class="headerlink" title="1.1、Flutter 按钮 Widget 通用属性"></a>1.1、Flutter 按钮 Widget 通用属性</h3><p>首先介绍一下，按钮 Widget 都有的一些属性：</p><table><thead><tr><th>属性名称</th><th>属性类型</th><th>说明</th></tr></thead><tbody><tr><td>onPressed</td><td>VoidCallback</td><td>此项为必填参数，按下按钮时触发的回调，接收一个方法作为参数，传 null 表示按钮禁用，会显示禁用相关样式</td></tr><tr><td>child</td><td>Widget</td><td>子控件，一般我们会使用文本 Widget 来填充</td></tr><tr><td>textColor</td><td>Color</td><td>文本颜色</td></tr><tr><td>color</td><td>Color</td><td>按钮背景颜色</td></tr><tr><td>disabledColor</td><td>Color</td><td>按钮禁用时的背景颜色</td></tr><tr><td>disabledTextColor</td><td>Color</td><td>按钮禁用时的文本颜色</td></tr><tr><td>splashColor</td><td>Color</td><td>点击按钮时的水波纹颜色</td></tr><tr><td>highlightColor</td><td>Color</td><td>长按按钮后按钮的背景颜色</td></tr><tr><td>elevation</td><td>double</td><td>按钮阴影的范围，值越大阴影范围越大</td></tr><tr><td>padding</td><td>EdgeInsetsGeometry</td><td>內边距</td></tr><tr><td>shape</td><td>ShapeBorder</td><td>设置按钮的形状，ShapeBorder 实现类有：<br>RoundedRectangleBorder：圆角形状<br>CircleBorder：圆形形状</td></tr></tbody></table><p>介绍完了按钮 Widget 的通用属性，接下来我们看下每个按钮初始形态的一个效果，在结合这些按钮做一个综合案例</p><h3 id="1-2、RaisedButton"><a href="#1-2、RaisedButton" class="headerlink" title="1.2、RaisedButton"></a>1.2、RaisedButton</h3><p>RaisedButton 见名知意：凸起的按钮，其实就是 Flutter 给我们提供的 Material Design 风格的按钮：</p><p>运行如下代码：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class="hljs-keyword">void</span> main() &#123;<br>  runApp(MaterialApp(<br>    home: Scaffold(<br>        appBar: AppBar(<br>          title: Text(<span class="hljs-string">&quot;Flutter Button Widget&quot;</span>), <span class="hljs-comment">//设置标题栏标题</span><br>        ),<br>        body: MyBodyPage() <span class="hljs-comment">//自定义 Widget</span><br>    ),<br>  ));<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBodyPage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-comment">//使用 ListView 让按钮自适应屏幕宽度</span><br>    <span class="hljs-keyword">return</span> ListView(<br>      <span class="hljs-comment">//内间距 20</span><br>      padding: EdgeInsets.all(<span class="hljs-number">20</span>),<br>      children: [<br>        <span class="hljs-comment">//RaisedButton 凸起按钮</span><br>        RaisedButton(<br>          onPressed:()&#123;&#125;,<br>          child: Text(<span class="hljs-string">&quot;RaisedButton&quot;</span>),<br>        )<br>      ],<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>效果展示：</p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/426f79d2652f4d379394b8cc28902bd9~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220828103722122" width="50%" /><p>默认情况下是一个灰色背景的凸起按钮</p><h3 id="1-3、FlatButton"><a href="#1-3、FlatButton" class="headerlink" title="1.3、FlatButton"></a>1.3、FlatButton</h3><p>FlatButton 见名知意：扁平的按钮，和 RaiseButton 刚好相反，没有凸起的效果。将上述 RaiseButton 换成 FlatButton 效果如下：</p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/326cfc9abf8c421e842ba8c5cfc7131d~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220828110640212" width="50%" /><p>可以看到，它没有背景，就像一个文本 Widget 一样</p><h3 id="1-4、OutlineButton"><a href="#1-4、OutlineButton" class="headerlink" title="1.4、OutlineButton"></a>1.4、OutlineButton</h3><p>OutlineButton 见名知意：带线框的按钮，它就像是 FlatButton 加了一个边框。将上述 RaiseButton 换成 OutlineButton 效果如下：</p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dee2a6a1417a4396b12500861737a30e~tplv-k3u1fbpfcp-watermark.image?" alt="outlinebutton.png" width="50%" /><h3 id="1-5、IconButton"><a href="#1-5、IconButton" class="headerlink" title="1.5、IconButton"></a>1.5、IconButton</h3><p>IconButton 见名知意：带 Icon 的按钮。将上述 RaiseButton 换成 IconButton 并做属性的调整：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dart">IconButton(<br>   icon: Icon(Icons.home),<br>   onPressed:()&#123;&#125;,<br>)<br></code></pre></td></tr></table></figure><p>效果如下：</p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fcf789f83b5248c3910ed88306c43099~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220828111723913" width="50%" /><h3 id="1-6、ButtonBar"><a href="#1-6、ButtonBar" class="headerlink" title="1.6、ButtonBar"></a>1.6、ButtonBar</h3><p>ButtonBar 是一个按钮组，我们可以在它的 children 属性中放入多个按钮，如下代码：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class="hljs-keyword">void</span> main() &#123;<br>  runApp(MaterialApp(<br>    home: Scaffold(<br>        appBar: AppBar(<br>          title: Text(<span class="hljs-string">&quot;Flutter Button Widget&quot;</span>), <span class="hljs-comment">//设置标题栏标题</span><br>        ),<br>        body: MyBodyPage() <span class="hljs-comment">//自定义 Widget</span><br>    ),<br>  ));<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBodyPage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> ButtonBar(<br>      <span class="hljs-comment">//按钮组</span><br>      children: [<br>        RaisedButton( <span class="hljs-comment">//RaisedButton</span><br>          onPressed: () &#123;&#125;,<br>          child: Text(<span class="hljs-string">&quot;RaisedButton&quot;</span>),<br>        ),<br>        FlatButton( <span class="hljs-comment">//FlatButton</span><br>          onPressed: () &#123;&#125;,<br>          child: Text(<span class="hljs-string">&quot;FlatButton&quot;</span>),<br>        ),<br>        OutlineButton( <span class="hljs-comment">//OutlineButton</span><br>          onPressed: () &#123;&#125;,<br>          child: Text(<span class="hljs-string">&quot;OutlineButton&quot;</span>),<br>        ),<br>        IconButton( <span class="hljs-comment">//IconButton</span><br>          icon: Icon(Icons.home),<br>          onPressed: () &#123;&#125;,<br>        )<br>      ],<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>效果：</p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c49b50b9684249e18c84c942c80e6af5~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220828112553805" width="50%" /><h3 id="1-7、FloatingActionButton"><a href="#1-7、FloatingActionButton" class="headerlink" title="1.7、FloatingActionButton"></a>1.7、FloatingActionButton</h3><p>FloatingActionButton 简称 FAB，可以实现浮动按钮。它常用的一些属性：</p><table><thead><tr><th>属性名称</th><th>属性类型</th><th>说明</th></tr></thead><tbody><tr><td>onPressed</td><td>VoidCallback</td><td>此项为必填参数，按下按钮时触发的回调，接收一个方法作为参数，传 null 表示按钮禁用，会显示禁用相关样式</td></tr><tr><td>child</td><td>Widget</td><td>子控件，一般为 Icon，不推荐使用文字</td></tr><tr><td>backgroundColor</td><td>Color</td><td>背景颜色</td></tr><tr><td>elevation</td><td>double</td><td>未点击时候的阴影</td></tr><tr><td>highlightElevation</td><td>double</td><td>点击时的阴影值，默认为：12.0</td></tr><tr><td>shape</td><td>ShapeBorder</td><td>定义 FAB 的形状</td></tr><tr><td>mini</td><td>bool</td><td>是否是 mini 类型，默认为：false</td></tr></tbody></table><p>如下代码：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class="hljs-keyword">void</span> main() &#123;<br>  runApp(MaterialApp(<br>    home: Scaffold(<br>        appBar: AppBar(<br>          title: Text(<span class="hljs-string">&quot;Flutter Button Widget&quot;</span>), <span class="hljs-comment">//设置标题栏标题</span><br>        ),<br>        body: MyBodyPage() <span class="hljs-comment">//自定义 Widget</span><br>    ),<br>  ));<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBodyPage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> ListView(<br>      padding: EdgeInsets.all(<span class="hljs-number">20</span>),<br>      children: [<br>        FloatingActionButton( <span class="hljs-comment">//FloatingActionButton 按钮</span><br>          onPressed: ()&#123;&#125;,<br>          child: Icon(Icons.search),<br>          backgroundColor: Colors.lightGreen,<br>          elevation: <span class="hljs-number">20</span>,<br>        )<br>      ],<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>效果：</p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ac14d2bb83594441b8d07bf8e131beb7~tplv-k3u1fbpfcp-watermark.image?" alt="floatingactionbutton.png" width="50%" /><h2 id="二、Flutter-2-x-按钮-Widget-的变化"><a href="#二、Flutter-2-x-按钮-Widget-的变化" class="headerlink" title="二、Flutter 2.x 按钮 Widget 的变化"></a>二、Flutter 2.x 按钮 Widget 的变化</h2><p>如果你是 Flutter 2.x 的版本，你会发现之前的一些按钮 Widget 被废弃了：</p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2e65c7518c914c4d82361cd1228732d4~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220828114616994" style="zoom:70%;" width="50%"/><p>主要是上面这三个按钮的变化，取而代之的是：</p><table><thead><tr><th>Flutter 1.x 中的按钮 Widget</th><th>Flutter 2.x 中的按钮 Widget</th></tr></thead><tbody><tr><td>RaisedButton 凸起按钮</td><td>ElevatedButton 凸起按钮</td></tr><tr><td>FlatButton 扁平按钮</td><td>TextButton 扁平按钮</td></tr><tr><td>OutlinedButton 线框按钮</td><td>OutlinedButton 线框按钮</td></tr></tbody></table><p>另外在 1.x 中设置的一系列属性，如：color，textColor，elevation，shape等在 2.x 中都被封装到了 style 属性中，style 属性接收一个 ButtonStyle 类型的对象，介绍一下 ButtonStyle 中的常用属性：</p><table><thead><tr><th>属性名称</th><th>属性类型</th><th>说明</th></tr></thead><tbody><tr><td>textStyle</td><td>MaterialStateProperty<TextStyle></td><td>文本的样式 但是对于颜色是不起作用的</td></tr><tr><td>backgroundColor</td><td>MaterialStateProperty<Color></td><td>按钮背景色</td></tr><tr><td>foregroundColor</td><td>MaterialStateProperty<Color></td><td>文本及图标颜色</td></tr><tr><td>overlayColor</td><td>MaterialStateProperty<Color></td><td>高亮色，按钮处于 focused，hovered or pressed 时的颜色</td></tr><tr><td>shadowColor</td><td>MaterialStateProperty<Color></td><td>阴影颜色</td></tr><tr><td>elevation</td><td>MaterialStateProperty<double></td><td>按钮阴影的范围，值越大阴影范围越大</td></tr><tr><td>padding</td><td>MaterialStateProperty<EdgeInsetsGeometry></td><td>按钮内边距</td></tr><tr><td>minimumSize</td><td>MaterialStateProperty<Size></td><td>按钮最小值</td></tr><tr><td>fixedSize</td><td>MaterialStateProperty<Size></td><td>按钮大小</td></tr><tr><td>maximumSize</td><td>MaterialStateProperty<Size></td><td>按钮最大值</td></tr><tr><td>side</td><td>MaterialStateProperty<BorderSide></td><td>边框</td></tr><tr><td>shape</td><td>MaterialStateProperty<OutlinedBorder></td><td>设置按钮的形状</td></tr><tr><td>alignment</td><td>AlignmentGeometry</td><td>按钮子 Widget 对齐方式</td></tr></tbody></table><p>实践对比：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class="hljs-keyword">void</span> main() &#123;<br>  runApp(MaterialApp(<br>    home: Scaffold(<br>        appBar: AppBar(<br>          title: Text(<span class="hljs-string">&quot;Flutter Button Widget&quot;</span>), <span class="hljs-comment">//设置标题栏标题</span><br>        ),<br>        body: MyBodyPage() <span class="hljs-comment">//自定义 Widget</span><br>    ),<br>  ));<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBodyPage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> ListView(<br>      padding: EdgeInsets.all(<span class="hljs-number">20</span>),<br>      children: [<br>        RaisedButton( <span class="hljs-comment">//RaisedButton</span><br>          onPressed: ()&#123;&#125;,<br>          child: Text(<span class="hljs-string">&quot;RaisedButton&quot;</span>),<br>          textColor: Colors.white, <span class="hljs-comment">//文本颜色</span><br>          color: Colors.green, <span class="hljs-comment">//按钮背景颜色</span><br>          splashColor: Colors.red, <span class="hljs-comment">//水波纹颜色</span><br>          elevation: <span class="hljs-number">20</span>, <span class="hljs-comment">//阴影的范围</span><br>          shape: RoundedRectangleBorder( <span class="hljs-comment">//设置 20 的圆角</span><br>            borderRadius: BorderRadius.circular(<span class="hljs-number">20</span>)<br>          )<br>        ),<br>        SizedBox(height: <span class="hljs-number">40</span>),<br>        ElevatedButton( <span class="hljs-comment">//ElevatedButton</span><br>            onPressed: ()&#123;&#125;,<br>            child: Text(<span class="hljs-string">&quot;ElevatedButton&quot;</span>),<br>            style: ButtonStyle(<br>              foregroundColor: MaterialStateProperty.all(Colors.white), <span class="hljs-comment">//文本颜色</span><br>              backgroundColor: MaterialStateProperty.all(Colors.green), <span class="hljs-comment">//按钮背景颜色</span><br>              overlayColor: MaterialStateProperty.all(Colors.red), <span class="hljs-comment">//水波纹颜色</span><br>              elevation: MaterialStateProperty.all(<span class="hljs-number">20</span>), <span class="hljs-comment">//阴影的范围</span><br>              shape: MaterialStateProperty.all(<span class="hljs-comment">//设置 20 的圆角</span><br>                  RoundedRectangleBorder(<br>                      borderRadius: BorderRadius.circular(<span class="hljs-number">20</span>)<br>                  )<br>              )<br>            ),<br>        )<br>      ],<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>效果：</p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2f82277a9e354bf18e7249a66b799c94~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220828134202212" width="50%" /><h2 id="三、按钮-Widget-组合之综合案例"><a href="#三、按钮-Widget-组合之综合案例" class="headerlink" title="三、按钮 Widget 组合之综合案例"></a>三、按钮 Widget 组合之综合案例</h2><p>在讲综合案例之前我们先学习下 BottomNavigationBar ，一会会用到</p><h3 id="3-1、BottomNavigationBar-介绍"><a href="#3-1、BottomNavigationBar-介绍" class="headerlink" title="3.1、BottomNavigationBar 介绍"></a>3.1、BottomNavigationBar 介绍</h3><p>BottomNavigationBar 是 Flutter 给我们提供的底部导航栏 Widget，一般用在 Scaffold 的 bottomNavigationBar 属性中</p><p>BottomNavigationBar 常用属性介绍：</p><table><thead><tr><th>属性名称</th><th>属性类型</th><th>说明</th></tr></thead><tbody><tr><td>items</td><td>List<BottomNavigationBarItem></td><td>必须属性，最少要有两个子 Widget</td></tr><tr><td>onTap</td><td>ValueChanged</td><td>Widget 点击事件</td></tr><tr><td>currentIndex</td><td>int</td><td>当前显示的是哪个 Widget</td></tr><tr><td>elevation</td><td>double</td><td>阴影范围</td></tr><tr><td>type</td><td>BottomNavigationBarType</td><td>BottomNavigationBarType.fixed：固定<br>BottomNavigationBarType.shifting：可滑动</td></tr><tr><td>fixedColor</td><td>Color</td><td>相当于 selectedItemColor，但是不能跟 selectedItemColor 同时存在</td></tr><tr><td>backgroundColor</td><td>Color</td><td>背景颜色</td></tr><tr><td>iconSize</td><td>double</td><td>设置图标大小</td></tr><tr><td>selectedItemColor</td><td>Color</td><td>设置 Widget 选中的颜色</td></tr><tr><td>unselectedItemColor</td><td>Color</td><td>设置 Widget 未选中的颜色</td></tr><tr><td>selectedFontSize</td><td>double</td><td>设置 Widget 选中时文字的大小</td></tr><tr><td>unselectedFontSize</td><td>double</td><td>设置 Widget 未选中时文字的大小</td></tr></tbody></table><p>运行下面代码：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class="hljs-keyword">void</span> main() &#123;<br>  runApp(MaterialApp(<br>    home: Scaffold(<br>        appBar: AppBar(<br>          title: Text(<span class="hljs-string">&quot;Flutter Button Widget&quot;</span>), <span class="hljs-comment">//设置标题栏标题</span><br>        ),<br>        bottomNavigationBar: MyBottomNavigationBar(),<br>    ),<br>  ));<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBottomNavigationBar</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> BottomNavigationBar(<br>        iconSize: <span class="hljs-number">35</span>, <span class="hljs-comment">//图标大小 35</span><br>        fixedColor: Colors.green, <span class="hljs-comment">//图片颜色绿色</span><br>        type: BottomNavigationBarType.fixed, <span class="hljs-comment">//item 固定显示</span><br>        items: [ <span class="hljs-comment">//设置了 3 个 子 item</span><br>          BottomNavigationBarItem(icon: Icon(Icons.home), label: <span class="hljs-string">&quot;首页&quot;</span>),<br>          BottomNavigationBarItem(icon: Icon(Icons.category), label: <span class="hljs-string">&quot;分类&quot;</span>),<br>          BottomNavigationBarItem(icon: Icon(Icons.settings), label: <span class="hljs-string">&quot;设置&quot;</span>)<br>        ]);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>效果：</p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/492432dd8d8e497a838565e7b619a70b~tplv-k3u1fbpfcp-zoom-1.image" width="30%"/><h3 id="3-2、综合案例"><a href="#3-2、综合案例" class="headerlink" title="3.2、综合案例"></a>3.2、综合案例</h3><p>接下来我们就使用按钮 Widget 组合来实现如下效果：</p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cf7e80059f054488a3cf02691ed3521f~tplv-k3u1fbpfcp-watermark.image?" alt="button_together.png" width="30%" /><p>简单的分析下这个页面：最外层有个内间距（Padding），接下来就是一个从上往下排列的垂直布局（Column），垂直布局里面有一系列使用 button 实现的按钮，简单起见，我们这里使用 Flutter 1.x 系列的 Button 去实现，最后底部有一个 BottomNavigationBar，BottomNavigationBar 中间有一个凸起的 FloatingActionButton，类似咸鱼中间发布按钮的效果。</p><p>接下来，我们就用代码实现一下：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class="hljs-keyword">void</span> main() &#123;<br>  runApp(MaterialApp(<br>    home: Scaffold(<br>      appBar: AppBar(<br>        title: Text(<span class="hljs-string">&quot;Flutter Button Practice&quot;</span>), <span class="hljs-comment">//设置标题栏标题</span><br>      ),<br>      body: MyBodyPage(), <span class="hljs-comment">//自定义 body Wdiget</span><br>      bottomNavigationBar: MyBottomNavigationBar(), <span class="hljs-comment">//自定义 bottomNavigationBar Widget</span><br>      floatingActionButton: MyFloatingActionButton(), <span class="hljs-comment">//自定义 floatingActionButton Widget</span><br>      floatingActionButtonLocation: FloatingActionButtonLocation.centerDocked, <span class="hljs-comment">//floatingActionButton 在底部中心停靠</span><br>    ),<br>  ));<br>&#125;<br><br><span class="hljs-comment">//自定义 BottomNavigationBar</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBottomNavigationBar</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> BottomNavigationBar(<br>        iconSize: <span class="hljs-number">35</span>, <span class="hljs-comment">//图标大小 35</span><br>        fixedColor: Colors.green, <span class="hljs-comment">//选中颜色为绿色</span><br>        type: BottomNavigationBarType.fixed, <span class="hljs-comment">//item 固定显示</span><br>        items: [ <span class="hljs-comment">//设置了 3 个 子 item</span><br>          BottomNavigationBarItem(icon: Icon(Icons.home), label: <span class="hljs-string">&quot;首页&quot;</span>),<br>          BottomNavigationBarItem(icon: Icon(Icons.category), label: <span class="hljs-string">&quot;分类&quot;</span>),<br>          BottomNavigationBarItem(icon: Icon(Icons.settings), label: <span class="hljs-string">&quot;设置&quot;</span>)<br>        ]);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">//自定义 FloatingActionButton</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyFloatingActionButton</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span></span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-comment">//使用 Container 包裹 FloatingActionButton 在外层加一个白色的边框</span><br>    <span class="hljs-keyword">return</span>  Container(<br>      width: <span class="hljs-number">80</span>,<br>      height: <span class="hljs-number">80</span>,<br>      padding: EdgeInsets.all(<span class="hljs-number">8</span>),<br>      decoration: BoxDecoration(<br>          color: Colors.white,<br>          borderRadius: BorderRadius.circular(<span class="hljs-number">40</span>)<br>      ),<br>      child: FloatingActionButton(<br>        backgroundColor: Colors.yellow,<br>        onPressed: ()&#123;&#125;,<br>        child: Icon(Icons.add),<br>      ),<br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBodyPage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Padding(<span class="hljs-comment">//Padding 实现内间距 20</span><br>      padding: EdgeInsets.all(<span class="hljs-number">20</span>),<br>      child: Column(<br>        children: [<br>          Row( <span class="hljs-comment">//第一排：普通按钮 + 红色按钮 + 带阴影的按钮</span><br>            children: [<br>              RaisedButton(<br>                onPressed: ()&#123;&#125;,<br>                child: Text(<span class="hljs-string">&quot;普通按钮&quot;</span>),<br>              ),<br>              SizedBox(width: <span class="hljs-number">20</span>),<br>              RaisedButton(<br>                onPressed: ()&#123;&#125;,<br>                child: Text(<span class="hljs-string">&quot;红色按钮&quot;</span>),<br>                color: Colors.red,<br>                textColor: Colors.white,<br>              ),<br>              SizedBox(width: <span class="hljs-number">20</span>),<br>              RaisedButton(<br>                onPressed: ()&#123;&#125;,<br>                child: Text(<span class="hljs-string">&quot;带阴影的按钮&quot;</span>),<br>                color: Colors.blue,<br>                textColor: Colors.white,<br>                elevation: <span class="hljs-number">20</span>,<br>              )<br>            ],<br>          ),<br>          SizedBox(height: <span class="hljs-number">20</span>),<br>          Container( <span class="hljs-comment">//第二排：自适应按钮</span><br>            height: <span class="hljs-number">60</span>,<br>            width: <span class="hljs-built_in">double</span>.infinity,<br>            child: RaisedButton(<br>              onPressed: () &#123;&#125;,<br>              child: Text(<span class="hljs-string">&quot;自适应按钮&quot;</span>),<br>              textColor: Colors.white,<br>              color: Colors.blue,<br>            ),<br>          ),<br>          SizedBox(height: <span class="hljs-number">20</span>),<br>          Row(children: [ <span class="hljs-comment">//第三排：icon 按钮 + 有宽高的按钮</span><br>            RaisedButton.icon(<br>              onPressed: ()&#123;&#125;,<br>              icon: Icon(Icons.home),<br>              label: Text(<span class="hljs-string">&quot; Icon 按钮&quot;</span>),<br>              color: Colors.yellow,<br>              textColor: Colors.green,<br>            ),<br>            SizedBox(width: <span class="hljs-number">20</span>),<br>            Container(<br>              height: <span class="hljs-number">60</span>,<br>              width: <span class="hljs-number">200</span>,<br>              child: RaisedButton(<br>                onPressed: () &#123;&#125;,<br>                child: Text(<span class="hljs-string">&quot;有宽高的按钮&quot;</span>),<br>                textColor: Colors.white,<br>                color: Colors.orange,<br>              ),<br>            )<br>          ]),<br>          SizedBox(height: <span class="hljs-number">20</span>),<br>          Container( <span class="hljs-comment">//第四排：自适应带圆角的按钮</span><br>            height: <span class="hljs-number">60</span>,<br>            width: <span class="hljs-built_in">double</span>.infinity,<br>            child: RaisedButton(<br>              onPressed: () &#123;&#125;,<br>              child: Text(<span class="hljs-string">&quot;自适应带圆角的按钮&quot;</span>),<br>              textColor: Colors.white,<br>              color: Colors.blue,<br>              shape: RoundedRectangleBorder(<br>                  borderRadius: BorderRadius.circular(<span class="hljs-number">100</span>)<br>              ),<br>            ),<br>          ),<br>          SizedBox(height: <span class="hljs-number">20</span>),<br>          Container( <span class="hljs-comment">//第五排：圆形按钮</span><br>            height: <span class="hljs-number">100</span>,<br>            width: <span class="hljs-number">150</span>,<br>            child: RaisedButton(<br>              onPressed: () &#123;&#125;,<br>              child: Text(<span class="hljs-string">&#x27;圆形按钮&#x27;</span>),<br>              textColor: Colors.white,<br>              color: Colors.lightGreen,<br>              elevation: <span class="hljs-number">20</span>,<br>              splashColor: Colors.green,<br>              shape: CircleBorder(side: BorderSide(color: Colors.white)),<br>            ),<br>          ),<br>          SizedBox(height: <span class="hljs-number">20</span>),<br>          Container( <span class="hljs-comment">//第六排：注册按钮</span><br>            width: <span class="hljs-built_in">double</span>.infinity,<br>            height: <span class="hljs-number">50</span>,<br>            margin: EdgeInsets.fromLTRB(<span class="hljs-number">20</span>, <span class="hljs-number">0</span>, <span class="hljs-number">20</span>, <span class="hljs-number">0</span>),<br>            child:  OutlineButton(<br>              child: Text(<span class="hljs-string">&quot;注册&quot;</span>),<br>              onPressed: ()&#123;&#125;,<br>              borderSide: BorderSide(<br>                  width: <span class="hljs-number">1</span>,<br>                  color: Colors.red<br>              ),<br>            ),<br>          ),<br>          SizedBox(height: <span class="hljs-number">20</span>),<br>          Container( <span class="hljs-comment">//第七排：登陆按钮</span><br>            width: <span class="hljs-built_in">double</span>.infinity,<br>            height: <span class="hljs-number">50</span>,<br>            margin: EdgeInsets.fromLTRB(<span class="hljs-number">20</span>, <span class="hljs-number">0</span>, <span class="hljs-number">20</span>, <span class="hljs-number">0</span>),<br>            child:  RaisedButton(<br>              child: Text(<span class="hljs-string">&quot;登陆&quot;</span>),<br>              onPressed: ()&#123;&#125;,<br>              color: Colors.blue,<br>              textColor: Colors.white,<br>            ),<br>          )<br>        ],<br>      ),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>本篇我们讲了：</p><p>1、Flutter 中常用的按钮 Widget ：RaisedButton，FlatButton，IconButton，OutlineButton，ButtonBar，FloatingActionButton</p><p>2、介绍了 Flutter 1.x 和 Flutter 2.x 按钮相关的变化及使用</p><blockquote><p>Flutter 2.x 中常用的属性都被封装到了 style 属性中</p></blockquote><p>3、介绍了 BottomNavigationBar，并通过 Flutter 1.x 相关 Button + BottomNavigationBar + FloatingActionButton 实现了一个综合案例</p><p>好了，本篇文章到这里就结束了，希望能给你带来帮助 🤝</p><p><strong>感谢你阅读这篇文章</strong></p><h3 id="下篇预告"><a href="#下篇预告" class="headerlink" title="下篇预告"></a>下篇预告</h3><p>下篇文章我会介绍 Flutter 表单相关 Widget ，尽请期待吧😄</p><h3 id="参考和推荐"><a href="#参考和推荐" class="headerlink" title="参考和推荐"></a>参考和推荐</h3><p><a href="https://www.bilibili.com/video/BV1S4411E7LY?p=19&vd_source=d0b24cb21c438ff4a9ac2e589eacb3d9">Flutter 教程</a>：通俗易懂的 Flutter 入门教程</p><blockquote><p><strong>你的点赞，评论，是对我巨大的鼓励！</strong></p><p>欢迎关注我的<strong>公众号：</strong>  <a href="https://link.juejin.cn/?target=http://m6z.cn/6jwi7b" title="http://m6z.cn/6jwi7b"><strong>sweetying</strong></a> ，文章更新可第一时间收到</p><p>如果<strong>有问题</strong>，公众号内有加我微信的入口，在技术学习、个人成长的道路上，我们一起前进！</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Flutter</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Flutter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flutter 系列（四）：Flutter 常用 Widget 二</title>
    <link href="/2022/10/10/Flutter%20%E7%B3%BB%E5%88%97%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9AFlutter%20%E5%B8%B8%E7%94%A8%20Widget%20%E4%BA%8C/"/>
    <url>/2022/10/10/Flutter%20%E7%B3%BB%E5%88%97%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9AFlutter%20%E5%B8%B8%E7%94%A8%20Widget%20%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sweetying520/picgo/master/img/202210101659599.jpeg" alt="sea-gfd0f885c2_1920"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>很高兴遇见你~</p><p>在本系列的上一篇文章中，我们介绍了 Flutter 特点以及一些常用的 Widget：MaterialApp，Scaffold，AppBar，Center，Container，Text。还没有看过上一篇文章的朋友，建议先去阅读 <a href="https://juejin.cn/post/7134343543975313445">Flutter 系列（三）：Flutter 特点及常用 Widget 介绍</a>。接下来我们继续对 Flutter Widget 进行学习</p><p>下面我会通过：效果展示 -&gt; Widget 讲解 -&gt; 代码实现的方式对 Widget 进行介绍，最后在通过 Widget 组合编写一个综合的案例</p><h2 id="一、Flutter-Widget-之-Image"><a href="#一、Flutter-Widget-之-Image" class="headerlink" title="一、Flutter Widget 之 Image"></a>一、Flutter Widget 之 Image</h2><p>Image 是 Flutter 给我们提供显示图片的 Widget</p><p>先看一眼使用 Image 实现的效果</p><h3 id="1-1、Image-效果展示"><a href="#1-1、Image-效果展示" class="headerlink" title="1.1、Image 效果展示"></a>1.1、Image 效果展示</h3><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f9c9d4e9e7b94ef0bb5299fd62faa8ae~tplv-k3u1fbpfcp-watermark.image" alt="flutter_01 (2).png"></p><p>刘亦菲的圆形图片😄，美爆了。言归正传，大家可以先想一下怎么去实现？</p><h3 id="1-2、Image-介绍"><a href="#1-2、Image-介绍" class="headerlink" title="1.2、Image 介绍"></a>1.2、Image 介绍</h3><p>Image 组件有很多构造方法，这里给大家讲两个常用的：</p><p>1、Image.network ：加载远程图片</p><p>2、Image.asset ：加载本地图片</p><p>上面这两个属于 Image 的命名构造方法，对命名构造方法还不熟悉的赶紧先去看一下我的另一篇文章<a href="https://juejin.cn/post/7130647339294785549#heading-0">传送门</a></p><h4 id="1-2-1、Image-network-加载远程图片"><a href="#1-2-1、Image-network-加载远程图片" class="headerlink" title="1.2.1、Image.network 加载远程图片"></a>1.2.1、Image.network 加载远程图片</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class="hljs-keyword">void</span> main() &#123;<br>  runApp(MaterialApp(<br>    home: Scaffold(<br>      appBar: AppBar(<br>        title: Text(<span class="hljs-string">&quot;Flutter Image Widget&quot;</span>),<span class="hljs-comment">//设置标题栏标题</span><br>        elevation: <span class="hljs-number">30</span>,<span class="hljs-comment">//设置标题栏阴影</span><br>      ),<br>      body: MyBodyPage() <span class="hljs-comment">//自定义 Widget</span><br>    ),<br>  ));<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBodyPage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span></span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Image.network(<span class="hljs-string">&quot;https://img.lianzhixiu.com/uploads/210106/37-21010609363aS.jpg&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码很简单，就是使用 Image.network 传入一张图片 url ，这样就可以将这张网络图片显示出来了：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b4f8ebf9c4034f23b4a52a59984b046d~tplv-k3u1fbpfcp-watermark.image" alt="flutter_02.png"></p><h4 id="1-2-2、Image-asset-加载本地图片"><a href="#1-2-2、Image-asset-加载本地图片" class="headerlink" title="1.2.2、Image.asset 加载本地图片"></a>1.2.2、Image.asset 加载本地图片</h4><p>加载本地图片稍微复杂一些</p><p>1、新建图片目录，引入图片资源</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3315fbd5066448f7b8c87109f2e3db22~tplv-k3u1fbpfcp-watermark.image" alt="flutter_03 (2).png"></p><p>我们新建了 images 文件夹，并在 images 下放入了图片资源，又新建了 2.0x 和 3.0x 文件夹分别对应 2 倍图和 3 倍图，这样就能保证不同手机分辨率的手机加载对应文件夹下的图片资源</p><p>2、打开 pubspec.yaml 配置文件声明一下我们添加的图片</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2466b29935204ef0960cb4fa29be8cb2~tplv-k3u1fbpfcp-watermark.image" alt="flutter_04 (1).png"></p><p>3、最后在代码中使用就可以了</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class="hljs-keyword">void</span> main() &#123;<br>  runApp(MaterialApp(<br>    home: Scaffold(<br>      appBar: AppBar(<br>        title: Text(<span class="hljs-string">&quot;Flutter Image Widget&quot;</span>),<span class="hljs-comment">//设置标题栏标题</span><br>        elevation: <span class="hljs-number">30</span>,<span class="hljs-comment">//设置标题栏阴影</span><br>      ),<br>      body: MyBodyPage() <span class="hljs-comment">//自定义 Widget</span><br>    ),<br>  ));<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBodyPage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span></span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Image.asset(<span class="hljs-string">&quot;images/ic_launcher_round.png&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f2105bb0b41846a88d69143a14eb4cda~tplv-k3u1fbpfcp-watermark.image" alt="flutter_05.png"></p><h4 id="1-2-3、Image-常用属性"><a href="#1-2-3、Image-常用属性" class="headerlink" title="1.2.3、Image 常用属性"></a>1.2.3、Image 常用属性</h4><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>alignment</td><td>Alignment</td><td>图片的对齐方式</td></tr><tr><td>color 和 colorBlendMode</td><td></td><td>设置图片的背景颜色，通常和 colorBlendMode 配合一起使用，这样可以使图片颜色和背景色混合</td></tr><tr><td>fit</td><td>BoxFit</td><td>fit 属性用来控制图片的拉伸和挤压，这都是根据父容器来的：<br/>BoxFit.fill：全图显示，图片会被拉伸，并充满父容器<br/>BoxFit.contain：全图显示，显示原比例，可能会有空隙<br/>BoxFit.cover：显示可能拉伸，可能裁切，充满（图片要充满整个容器，还不变形）<br/>BoxFit.fitWidth：宽度充满(横向充满)，显示可能拉伸， 可能裁切<br/>BoxFit.fitHeight：高度充满(竖向充满),显示可能拉 伸，可能裁切<br/>BoxFit.scaleDown：效果和 contain 差不多，但是此属性不允许显示超过原图片大小，可小不可大</td></tr><tr><td>width</td><td></td><td>宽度，一般结合 ClipOval Widget 才能看到效果</td></tr><tr><td>height</td><td></td><td>高度，一般结合 ClipOval Widget 才能看到效果</td></tr></tbody></table><p>更多属性参考：<a href="https://api.flutter.dev/flutter/widgets/Image-class.html">https://api.flutter.dev/flutter/widgets/Image-class.html</a></p><p><strong>PS</strong>：ClipOval 是一个裁剪子 Widget 为椭圆的 Widget，常用于圆形，圆角图片等</p><h3 id="1-3、效果实现"><a href="#1-3、效果实现" class="headerlink" title="1.3、效果实现"></a>1.3、效果实现</h3><p>回顾 1.1 的效果：其实就是一个居中展示的圆形图片</p><p>这里我们可以使用 Center 进行居中，然后使用 Image + ClipOval 配合相关属性实现圆形图片：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class="hljs-keyword">void</span> main() &#123;<br>  runApp(MaterialApp(<br>    home: Scaffold(<br>      appBar: AppBar(<br>        title: Text(<span class="hljs-string">&quot;Flutter Image Widget&quot;</span>),<span class="hljs-comment">//设置标题栏标题</span><br>        elevation: <span class="hljs-number">30</span>,<span class="hljs-comment">//设置标题栏阴影</span><br>      ),<br>      body: MyBodyPage() <span class="hljs-comment">//自定义 Widget</span><br>    ),<br>  ));<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBodyPage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span></span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Center(<br>      child: ClipOval(<br>        child: Image.network(<br>          <span class="hljs-string">&quot;https://img.lianzhixiu.com/uploads/210106/37-21010609363aS.jpg&quot;</span>,<br>          width: <span class="hljs-number">300</span>, <span class="hljs-comment">//设置图片的宽度为 300</span><br>          height: <span class="hljs-number">300</span>, <span class="hljs-comment">//设置图片的高度为 300</span><br>          fit: BoxFit.cover, <span class="hljs-comment">//设置图片等比放大，充满父容器</span><br>        ),<br>      ),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码就实现了我们想要的效果</p><h2 id="二、Flutter-Widget-之-ListView"><a href="#二、Flutter-Widget-之-ListView" class="headerlink" title="二、Flutter Widget 之 ListView"></a>二、Flutter Widget 之 ListView</h2><p>列表是我们项目开发中最常用的一种布局方式，Flutter 给我们提供了 ListView 来定义列表，它支持垂直和水平方向展示，通过一个属性就可以控制列表的显示方向</p><h3 id="2-1、效果展示"><a href="#2-1、效果展示" class="headerlink" title="2.1、效果展示"></a>2.1、效果展示</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/71e5730aaec645d9b0652dc6e8c77b9c~tplv-k3u1fbpfcp-watermark.image" alt="flutter_06.png"></p><h3 id="2-2、ListView-介绍"><a href="#2-2、ListView-介绍" class="headerlink" title="2.2、ListView 介绍"></a>2.2、ListView 介绍</h3><h4 id="2-2-1、常用属性介绍"><a href="#2-2-1、常用属性介绍" class="headerlink" title="2.2.1、常用属性介绍"></a>2.2.1、常用属性介绍</h4><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>scrollDirection</td><td>Axis</td><td>Axis.horizontal 水平列表 <br/>Axis.vertical 垂直列表</td></tr><tr><td>padding</td><td>EdgeInsetsGeometry</td><td>內边距</td></tr><tr><td>resolve</td><td>bool</td><td>组件反向排序</td></tr><tr><td>children</td><td>List<Widget></td><td>列表元素</td></tr></tbody></table><p>更多属性参考：<a href="https://api.flutter.dev/flutter/widgets/ListView-class.html">https://api.flutter.dev/flutter/widgets/ListView-class.html</a></p><p>ListView 的 children 能嵌套各种 Widget 去实现列表 UI 效果</p><h4 id="2-2-2、ListTile-介绍"><a href="#2-2-2、ListTile-介绍" class="headerlink" title="2.2.2、ListTile 介绍"></a>2.2.2、ListTile 介绍</h4><p>ListTile 是一个列表 item Widget ，通常用于各种列表中，其常用的属性有：</p><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>leading</td><td>Widget</td><td>左侧组件</td></tr><tr><td>title</td><td>Widget</td><td>标题</td></tr><tr><td>subtitle</td><td>Widget</td><td>副标题</td></tr><tr><td>trailing</td><td>Widget</td><td>右侧组件</td></tr><tr><td>onTap</td><td></td><td>点击事件回调</td></tr><tr><td>onLongPress</td><td></td><td>长按事件回调</td></tr></tbody></table><p>更多属性参考：<a href="https://api.flutter.dev/flutter/material/ListTile-class.html">https://api.flutter.dev/flutter/material/ListTile-class.html</a></p><p>下面我们使用 ListView + ListTile 实现一个效果：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class="hljs-keyword">void</span> main() &#123;<br><br>  runApp(MaterialApp(<br>    home: Scaffold(<br>      appBar: AppBar(<br>        title: Text(<span class="hljs-string">&quot;Flutter ListView Widget&quot;</span>),<span class="hljs-comment">//设置标题栏标题</span><br>        elevation: <span class="hljs-number">30</span>,<span class="hljs-comment">//设置标题栏阴影</span><br>      ),<br>      body: MyBodyPage() <span class="hljs-comment">//自定义 Widget</span><br>    ),<br>  ));<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBodyPage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span></span>&#123;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> ListView(<br>      children: [<br>        ListTile(<br>          leading: Icon(Icons.search),<br>          title: Text(<span class="hljs-string">&quot;标题1&quot;</span>),<br>          subtitle: Text(<span class="hljs-string">&quot;描述1&quot;</span>),<br>          trailing: Icon(Icons.home),<br>        ),<br>        ListTile(<br>          leading: Icon(Icons.search),<br>          title: Text(<span class="hljs-string">&quot;标题2&quot;</span>),<br>          subtitle: Text(<span class="hljs-string">&quot;描述2&quot;</span>),<br>          trailing: Icon(Icons.home)<br>        ),<br>        ListTile(<br>          leading: Icon(Icons.search),<br>          title: Text(<span class="hljs-string">&quot;标题3&quot;</span>),<br>          subtitle: Text(<span class="hljs-string">&quot;描述3&quot;</span>),<br>          trailing: Icon(Icons.home)<br>        )<br>      ],<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>效果图：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c02d016436184879a7d8871bdfb2e904~tplv-k3u1fbpfcp-watermark.image" alt="flutter_07.png"></p><h3 id="2-3、效果实现"><a href="#2-3、效果实现" class="headerlink" title="2.3、效果实现"></a>2.3、效果实现</h3><p>上面 2.1 展示的效果就是：ListTile + 横线作为一个 item 进行排列，如何将这两个 Widget 包装为一个整体，我们就要学习下 Column </p><p>1、Column 介绍</p><p>Column 是 Flutter 给我们提供的垂直布局 Widget，其常用属性有：</p><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>mainAxisAlignment</td><td>MainAxisAlignment</td><td>主轴的排序方式</td></tr><tr><td>crossAxisAlignment</td><td>CrossAxisAlignment</td><td>次轴的排序方式</td></tr><tr><td>children</td><td>List<Widget></td><td>组件子元素</td></tr></tbody></table><p>更多属性参考：<a href="https://api.flutter.dev/flutter/widgets/Column-class.html">https://api.flutter.dev/flutter/widgets/Column-class.html</a></p><p>同样 Flutter 给我们提供了水平布局 Widget Row，常用属性和 Column 一样</p><p>2、横线我们直接使用 Divider</p><p>ok，现在就可以去实现效果图了，上面 2.2 的例子 ListView 里面的数据都是写死的，不灵活，接下来我们使用 ListView 的命名构造方法 ListView.Builder 来实现动态加载：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class="hljs-keyword">void</span> main() &#123;<br><br>  runApp(MaterialApp(<br>    home: Scaffold(<br>      appBar: AppBar(<br>        title: Text(<span class="hljs-string">&quot;Flutter ListView Widget&quot;</span>),<span class="hljs-comment">//设置标题栏标题</span><br>        elevation: <span class="hljs-number">30</span>,<span class="hljs-comment">//设置标题栏阴影</span><br>      ),<br>      body: MyBodyPage() <span class="hljs-comment">//自定义 Widget</span><br>    ),<br>  ));<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBodyPage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span></span>&#123;<br><br>  <span class="hljs-comment">//mock 数据：相当于 List&lt;Map&gt;</span><br>  <span class="hljs-keyword">var</span> mDataList = [<br>    &#123;<br>      <span class="hljs-string">&quot;title&quot;</span>:<span class="hljs-string">&quot;标题1&quot;</span>,<br>      <span class="hljs-string">&quot;desc&quot;</span>:<span class="hljs-string">&quot;描述1&quot;</span>,<br>      <span class="hljs-string">&quot;image&quot;</span>:<span class="hljs-string">&quot;https://img.lianzhixiu.com/uploads/210106/37-21010609363aS.jpg&quot;</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;title&quot;</span>:<span class="hljs-string">&quot;标题2&quot;</span>,<br>      <span class="hljs-string">&quot;desc&quot;</span>:<span class="hljs-string">&quot;描述2&quot;</span>,<br>      <span class="hljs-string">&quot;image&quot;</span>:<span class="hljs-string">&quot;https://img.lianzhixiu.com/uploads/210106/37-21010609363aS.jpg&quot;</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;title&quot;</span>:<span class="hljs-string">&quot;标题3&quot;</span>,<br>      <span class="hljs-string">&quot;desc&quot;</span>:<span class="hljs-string">&quot;描述3&quot;</span>,<br>      <span class="hljs-string">&quot;image&quot;</span>:<span class="hljs-string">&quot;https://img.lianzhixiu.com/uploads/210106/37-21010609363aS.jpg&quot;</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;title&quot;</span>:<span class="hljs-string">&quot;标题4&quot;</span>,<br>      <span class="hljs-string">&quot;desc&quot;</span>:<span class="hljs-string">&quot;描述4&quot;</span>,<br>      <span class="hljs-string">&quot;image&quot;</span>:<span class="hljs-string">&quot;https://img.lianzhixiu.com/uploads/210106/37-21010609363aS.jpg&quot;</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;title&quot;</span>:<span class="hljs-string">&quot;标题5&quot;</span>,<br>      <span class="hljs-string">&quot;desc&quot;</span>:<span class="hljs-string">&quot;描述6&quot;</span>,<br>      <span class="hljs-string">&quot;image&quot;</span>:<span class="hljs-string">&quot;https://img.lianzhixiu.com/uploads/210106/37-21010609363aS.jpg&quot;</span><br>    &#125;,<br>  ];<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> ListView.builder(<span class="hljs-comment">//通过 ListView.builder 实现数据的动态加载</span><br>        itemCount: mDataList.length, <span class="hljs-comment">//item 的个数</span><br>        itemBuilder: (context, index) &#123; <span class="hljs-comment">//通过 itemBuilder 构建 Widget</span><br>          <span class="hljs-keyword">return</span> Column(<br>            children: [ <span class="hljs-comment">//Column 里面包装了 ListTile + Divider</span><br>              ListTile(<br>                leading: ClipOval( <span class="hljs-comment">//圆形图片</span><br>                  child: Image.network(<br>                    mDataList[index][<span class="hljs-string">&quot;image&quot;</span>] ?? <span class="hljs-string">&quot;&quot;</span>,<br>                    width: <span class="hljs-number">50</span>,<br>                    height: <span class="hljs-number">50</span>,<br>                    fit: BoxFit.cover,<br>                  ),<br>                ),<br>                title: Text(mDataList[index][<span class="hljs-string">&quot;title&quot;</span>] ?? <span class="hljs-string">&quot;&quot;</span>), <span class="hljs-comment">//标题</span><br>                subtitle: Text(mDataList[index][<span class="hljs-string">&quot;desc&quot;</span>] ?? <span class="hljs-string">&quot;&quot;</span>), <span class="hljs-comment">//副标题</span><br>              ),<br>              Divider() <span class="hljs-comment">//横线</span><br>            ],<br>          );<br>        &#125;);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码就实现了我们想要的效果</p><h2 id="三、Flutter-Widget-之-GridView"><a href="#三、Flutter-Widget-之-GridView" class="headerlink" title="三、Flutter Widget 之 GridView"></a>三、Flutter Widget 之 GridView</h2><p>GridView 是 Flutter 给我们提供的网格布局 Widget，我们快速过一下，然后实现一些效果：</p><p>GridView 创建网格列表有多种方式，主要介绍两种：</p><p>1、通过 GridView.count 实现网格布局</p><p>2、通过 GridView.builder 实现网格布局</p><p><strong>常用属性</strong>：</p><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>scrollDirection</td><td>Axis</td><td>Axis.horizontal 水平列表 <br/>Axis.vertical 垂直列表</td></tr><tr><td>padding</td><td>EdgeInsetsGeometry</td><td>內边距</td></tr><tr><td>resolve</td><td>bool</td><td>组件反向排序</td></tr><tr><td>children</td><td>List<Widget></td><td>列表元素</td></tr><tr><td>crossAxisSpacing</td><td>double</td><td>水平子 Widget 之间间距</td></tr><tr><td>mainAxisSpacing</td><td>double</td><td>垂直子 Widget 之间间距</td></tr><tr><td>crossAxisCount</td><td>int</td><td>一行的 Widget 数量</td></tr><tr><td>childAspectRatio</td><td>double</td><td>子 Widget 宽高比例</td></tr><tr><td>gridDelegate</td><td>SliverGridDelegate</td><td>控制布局主要用在 GridView.builder 里面</td></tr></tbody></table><h3 id="3-1、Flutter-GridView-count-实现网格布局"><a href="#3-1、Flutter-GridView-count-实现网格布局" class="headerlink" title="3.1、Flutter GridView.count 实现网格布局"></a>3.1、Flutter GridView.count 实现网格布局</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class="hljs-keyword">void</span> main() &#123;<br><br>  runApp(MaterialApp(<br>    home: Scaffold(<br>      appBar: AppBar(<br>        title: Text(<span class="hljs-string">&quot;Flutter ListView Widget&quot;</span>),<span class="hljs-comment">//设置标题栏标题</span><br>        elevation: <span class="hljs-number">30</span>,<span class="hljs-comment">//设置标题栏阴影</span><br>      ),<br>      body: MyBodyPage() <span class="hljs-comment">//自定义 Widget</span><br>    ),<br>  ));<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBodyPage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span></span>&#123;<br><br>  <span class="hljs-comment">//mock 数据</span><br>  <span class="hljs-keyword">var</span> mDataList = [<br>    &#123;<br>      <span class="hljs-string">&quot;title&quot;</span>:<span class="hljs-string">&quot;标题1&quot;</span>,<br>      <span class="hljs-string">&quot;image&quot;</span>:<span class="hljs-string">&quot;https://img.lianzhixiu.com/uploads/210106/37-21010609363aS.jpg&quot;</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;title&quot;</span>:<span class="hljs-string">&quot;标题2&quot;</span>,<br>      <span class="hljs-string">&quot;image&quot;</span>:<span class="hljs-string">&quot;https://img.lianzhixiu.com/uploads/210106/37-21010609363aS.jpg&quot;</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;title&quot;</span>:<span class="hljs-string">&quot;标题3&quot;</span>,<br>      <span class="hljs-string">&quot;image&quot;</span>:<span class="hljs-string">&quot;https://img.lianzhixiu.com/uploads/210106/37-21010609363aS.jpg&quot;</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;title&quot;</span>:<span class="hljs-string">&quot;标题4&quot;</span>,<br>      <span class="hljs-string">&quot;image&quot;</span>:<span class="hljs-string">&quot;https://img.lianzhixiu.com/uploads/210106/37-21010609363aS.jpg&quot;</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;title&quot;</span>:<span class="hljs-string">&quot;标题5&quot;</span>,<br>      <span class="hljs-string">&quot;image&quot;</span>:<span class="hljs-string">&quot;https://img.lianzhixiu.com/uploads/210106/37-21010609363aS.jpg&quot;</span><br>    &#125;,<br>  ];<br><br>  <span class="hljs-built_in">List</span>&lt;Widget&gt; _getListWidget() &#123;<br>    <span class="hljs-keyword">var</span> listWidget = mDataList.map((value) &#123;<br>      <span class="hljs-keyword">return</span> Container(<br>        decoration: <span class="hljs-comment">//设置一个宽度为 1 绿色的边框</span><br>          BoxDecoration(border: Border.all(color: Colors.green, width: <span class="hljs-number">1.0</span>)),<br>        child: Column( <span class="hljs-comment">//垂直布局里面嵌套：Expanded + SizedBox + Text + SizedBox</span><br>          children: [<br>            Expanded( <span class="hljs-comment">//展开 Widget，类似 Android 里面 Linearlayout 设置权重，用在这是让图片自适应展开</span><br>              child: Image.network(<span class="hljs-comment">// 图片</span><br>                value[<span class="hljs-string">&quot;image&quot;</span>] ?? <span class="hljs-string">&quot;&quot;</span>,<br>                fit: BoxFit.cover,<br>                width: <span class="hljs-built_in">double</span>.infinity, <span class="hljs-comment">//设置图片的宽度为屏幕的宽度</span><br>              ),<br>            ),<br>            SizedBox(height: <span class="hljs-number">12</span>),<span class="hljs-comment">//设置一个高度为 12 的空白间距</span><br>            Text( <span class="hljs-comment">// 设置文本</span><br>                value[<span class="hljs-string">&quot;title&quot;</span>] ?? <span class="hljs-string">&quot;&quot;</span>,<br>                textAlign: TextAlign.center,<br>                style: TextStyle(<br>                    fontSize: <span class="hljs-number">20</span><br>                )<br>            ),<br>            SizedBox(height: <span class="hljs-number">12</span>),<span class="hljs-comment">//设置一个高度为 12 的空白间距</span><br>          ],<br>        ),<br>      );<br>    &#125;);<br>    <span class="hljs-keyword">return</span> listWidget.toList();<br>  &#125;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> GridView.count(<br>      crossAxisCount: <span class="hljs-number">2</span>,<span class="hljs-comment">// 设置一行显示 Widget 数量为 2</span><br>      padding: EdgeInsets.all(<span class="hljs-number">20</span>), <span class="hljs-comment">//设置 GridView 內边距为 20</span><br>      crossAxisSpacing: <span class="hljs-number">20</span>, <span class="hljs-comment">//设置水平子 Widget 之间的间距为 20</span><br>      mainAxisSpacing: <span class="hljs-number">20</span>,  <span class="hljs-comment">//设置垂直子 Widget 之间的间距为 20</span><br>      children: _getListWidget() <span class="hljs-comment">//设置子 Widget</span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码中我们使用了两个新 Widget：Expanded，SizeBox</p><p>1、Expanded 是用于展开子 Widget 的 Widget，常用于 Row，Column 中，其 flex 属性就是用来设置权重的，类似于 Android 的 LinearLayout 设置权重</p><p>2、SizeBox 主要是用来指定一段间距的，其有两个属性，width，height。如果设置 width 就是指定宽度，如果设置 height 就是指定高度</p><p>实现效果：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8ed5babf3a7642069893a05e1afe3240~tplv-k3u1fbpfcp-watermark.image" alt="flutter_08.png"></p><h3 id="3-2、Flutter-GridView-builder-实现网格布局"><a href="#3-2、Flutter-GridView-builder-实现网格布局" class="headerlink" title="3.2、Flutter GridView.builder 实现网格布局"></a>3.2、Flutter GridView.builder 实现网格布局</h3><p>同样的效果，我们使用 GridView.builder 来实现</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class="hljs-keyword">void</span> main() &#123;<br>  runApp(MaterialApp(<br>    home: Scaffold(<br>        appBar: AppBar(<br>          title: Text(<span class="hljs-string">&quot;Flutter GridView Widget&quot;</span>), <span class="hljs-comment">//设置标题栏标题</span><br>          elevation: <span class="hljs-number">30</span>, <span class="hljs-comment">//设置标题栏阴影</span><br>        ),<br>        body: MyBodyPage() <span class="hljs-comment">//自定义 Widget</span><br>        ),<br>  ));<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBodyPage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-comment">//mock 数据</span><br>  <span class="hljs-keyword">var</span> mDataList = [<br>    &#123;<br>      <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;标题1&quot;</span>,<br>      <span class="hljs-string">&quot;image&quot;</span>: <span class="hljs-string">&quot;https://img.lianzhixiu.com/uploads/210106/37-21010609363aS.jpg&quot;</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;标题2&quot;</span>,<br>      <span class="hljs-string">&quot;image&quot;</span>: <span class="hljs-string">&quot;https://img.lianzhixiu.com/uploads/210106/37-21010609363aS.jpg&quot;</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;标题3&quot;</span>,<br>      <span class="hljs-string">&quot;image&quot;</span>: <span class="hljs-string">&quot;https://img.lianzhixiu.com/uploads/210106/37-21010609363aS.jpg&quot;</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;标题4&quot;</span>,<br>      <span class="hljs-string">&quot;image&quot;</span>: <span class="hljs-string">&quot;https://img.lianzhixiu.com/uploads/210106/37-21010609363aS.jpg&quot;</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;标题5&quot;</span>,<br>      <span class="hljs-string">&quot;image&quot;</span>: <span class="hljs-string">&quot;https://img.lianzhixiu.com/uploads/210106/37-21010609363aS.jpg&quot;</span><br>    &#125;,<br>  ];<br><br>  Widget _getListWidget(context, index) &#123;<br>    <span class="hljs-keyword">return</span> Container(<br>      decoration: <span class="hljs-comment">//设置一个宽度为 1 绿色的边框</span><br>          BoxDecoration(border: Border.all(color: Colors.green, width: <span class="hljs-number">1.0</span>)),<br>      child: Column(<br>        <span class="hljs-comment">//垂直布局里面嵌套：Expanded + SizedBox + Text + SizedBox</span><br>        children: [<br>          Expanded(<br>            <span class="hljs-comment">//扩展 Widget，类似 Android 里面 Linearlayout 设置权重，用在这是让图片自适应</span><br>            child: Image.network(<br>              <span class="hljs-comment">// 图片</span><br>              mDataList[index][<span class="hljs-string">&quot;image&quot;</span>] ?? <span class="hljs-string">&quot;&quot;</span>,<br>              fit: BoxFit.cover,<br>              width: <span class="hljs-built_in">double</span>.infinity, <span class="hljs-comment">//设置图片的宽度为屏幕的宽度</span><br>            ),<br>          ),<br>          SizedBox(height: <span class="hljs-number">12</span>), <span class="hljs-comment">//设置一个高度为 12 的空白间距</span><br>          Text(<br>              <span class="hljs-comment">// 设置文本</span><br>              mDataList[index][<span class="hljs-string">&quot;title&quot;</span>] ?? <span class="hljs-string">&quot;&quot;</span>,<br>              textAlign: TextAlign.center,<br>              style: TextStyle(fontSize: <span class="hljs-number">20</span>)),<br>          SizedBox(height: <span class="hljs-number">12</span>), <span class="hljs-comment">//设置一个高度为 12 的空白间距</span><br>        ],<br>      ),<br>    );<br>  &#125;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> GridView.builder(<br>        itemCount: mDataList.length,<br>        padding: EdgeInsets.all(<span class="hljs-number">20</span>),<br>        gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(<br>          crossAxisCount: <span class="hljs-number">2</span>, <span class="hljs-comment">//设置一行有两个 Widget</span><br>          crossAxisSpacing: <span class="hljs-number">20</span>, <span class="hljs-comment">//设置水平子 Widget 之间的间距为 20</span><br>          mainAxisSpacing: <span class="hljs-number">20</span>, <span class="hljs-comment">//设置垂直子 Widget 之间的间距为 20</span><br>          childAspectRatio: <span class="hljs-number">1</span>, <span class="hljs-comment">//设置子组件宽高比例为 1</span><br>        ),<br>        itemBuilder: _getListWidget <span class="hljs-comment">//将方法作为一个参数传入</span><br>        );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四、Flutter-Widget-之-Stack"><a href="#四、Flutter-Widget-之-Stack" class="headerlink" title="四、Flutter Widget 之 Stack"></a>四、Flutter Widget 之 Stack</h2><p>Stack 是 Fluter 提供的叠层 Widget ，类似 Android 的 FrameLayout</p><p><strong>常用属性</strong>：</p><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>alignment</td><td>AlignmentGeometry</td><td>配置所有子元素的显示位置</td></tr><tr><td>children</td><td>List<Widget></td><td>子组件</td></tr></tbody></table><p>通常它会配合 Align 或 Positioned 实现定位布局</p><p><strong>Align 常用属性</strong></p><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>alignment</td><td>AlignmentGeometry</td><td>配置子元素的显示位置</td></tr><tr><td>child</td><td>Widget</td><td>子组件</td></tr></tbody></table><p><strong>Positioned 常用属性</strong></p><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>top</td><td>double</td><td>子元素距离顶部的距离</td></tr><tr><td>bottom</td><td>double</td><td>子元素距离底部的距离</td></tr><tr><td>left</td><td>double</td><td>子元素距离左侧距离</td></tr><tr><td>right</td><td>double</td><td>子元素距离右侧距离</td></tr><tr><td>child</td><td>Widget</td><td>子组件</td></tr></tbody></table><p>下面我们实现如下效果：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/65d60dd3b5ee487e89e6abc3f3265e13~tplv-k3u1fbpfcp-watermark.image" alt="flutter_09.png"></p><h3 id="4-1、Stack-Align-实现定位布局"><a href="#4-1、Stack-Align-实现定位布局" class="headerlink" title="4.1、Stack + Align 实现定位布局"></a>4.1、Stack + Align 实现定位布局</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class="hljs-keyword">void</span> main() &#123;<br>  runApp(MaterialApp(<br>    home: Scaffold(<br>        appBar: AppBar(<br>          title: Text(<span class="hljs-string">&quot;Flutter Stack Widget&quot;</span>), <span class="hljs-comment">//设置标题栏标题</span><br>          elevation: <span class="hljs-number">30</span>, <span class="hljs-comment">//设置标题栏阴影</span><br>        ),<br>        body: MyBodyPage() <span class="hljs-comment">//自定义 Widget</span><br>        ),<br>  ));<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBodyPage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Stack(<br>      children: [<br>        Align(<br>          alignment: Alignment.topLeft,<span class="hljs-comment">//左上</span><br>          child: Container(<br>            width: <span class="hljs-number">100</span>,<br>            height: <span class="hljs-number">100</span>,<br>            color: Colors.red,<br>          ),<br>        ),<br>        Align(<br>          alignment: Alignment.topRight,<span class="hljs-comment">//右上</span><br>          child: Container(<br>            width: <span class="hljs-number">100</span>,<br>            height: <span class="hljs-number">100</span>,<br>            color: Colors.orange,<br>          ),<br>        ),<br>        Align(<br>          alignment: Alignment.center,<span class="hljs-comment">//中间</span><br>          child: Container(<br>            width: <span class="hljs-number">100</span>,<br>            height: <span class="hljs-number">100</span>,<br>            color: Colors.yellow,<br>          ),<br>        ),<br>        Align(<br>          alignment: Alignment.bottomLeft,<span class="hljs-comment">//左下</span><br>          child: Container(<br>            width: <span class="hljs-number">100</span>,<br>            height: <span class="hljs-number">100</span>,<br>            color: Colors.green,<br>          ),<br>        ),<br>        Align(<br>          alignment: Alignment.bottomRight,<span class="hljs-comment">//右下</span><br>          child: Container(<br>            width: <span class="hljs-number">100</span>,<br>            height: <span class="hljs-number">100</span>,<br>            color: Colors.blue,<br>          ),<br>        )<br>      ],<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-2、Stack-Positioned-实现定位布局"><a href="#4-2、Stack-Positioned-实现定位布局" class="headerlink" title="4.2、Stack + Positioned 实现定位布局"></a>4.2、Stack + Positioned 实现定位布局</h3><p>这种方式必须指定精确的宽高，在不同分辨率的手机，可能显示会有点问题，优先还是使用 Stack + Align 实现定位布局，如果对 UI 的小偏差能忽略不计，用这个也可以</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class="hljs-keyword">void</span> main() &#123;<br>  runApp(MaterialApp(<br>    home: Scaffold(<br>        appBar: AppBar(<br>          title: Text(<span class="hljs-string">&quot;Flutter Stack Widget&quot;</span>), <span class="hljs-comment">//设置标题栏标题</span><br>          elevation: <span class="hljs-number">30</span>, <span class="hljs-comment">//设置标题栏阴影</span><br>        ),<br>        body: MyBodyPage() <span class="hljs-comment">//自定义 Widget</span><br>        ),<br>  ));<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBodyPage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">final</span> size = MediaQuery.of(context).size;<br>    <span class="hljs-keyword">final</span> screenWidth = size.width; <span class="hljs-comment">//获取屏幕宽度</span><br>    <span class="hljs-keyword">final</span> screenHeight = size.height; <span class="hljs-comment">//获取屏幕高度</span><br>    <span class="hljs-keyword">return</span> Container(<br>      width: <span class="hljs-built_in">double</span>.infinity,<br>      height: <span class="hljs-built_in">double</span>.infinity,<br>      child: Stack(<br>        children: [<br>          Positioned(<span class="hljs-comment">//左上</span><br>            child: Container(<br>              width: <span class="hljs-number">100</span>,<br>              height: <span class="hljs-number">100</span>,<br>              color: Colors.red,<br>            ),<br>          ),<br>          Positioned(<span class="hljs-comment">//右上</span><br>            left: screenWidth - <span class="hljs-number">100</span>,<br>            child: Container(<br>              width: <span class="hljs-number">100</span>,<br>              height: <span class="hljs-number">100</span>,<br>              color: Colors.orange,<br>            ),<br>          ),<br>          Positioned(<span class="hljs-comment">//中间</span><br>            left: screenWidth / <span class="hljs-number">2</span> - <span class="hljs-number">50</span>,<br>            top: screenHeight / <span class="hljs-number">2</span> - <span class="hljs-number">90</span>,<br>            child: Container(<br>              width: <span class="hljs-number">100</span>,<br>              height: <span class="hljs-number">100</span>,<br>              color: Colors.yellow,<br>            ),<br>          ),<br>          Positioned(<span class="hljs-comment">//左下</span><br>            top: screenHeight - <span class="hljs-number">180</span>,<br>            child: Container(<br>              width: <span class="hljs-number">100</span>,<br>              height: <span class="hljs-number">100</span>,<br>              color: Colors.green,<br>            ),<br>          ),<br>          Positioned(<span class="hljs-comment">//右下</span><br>            left: screenWidth - <span class="hljs-number">100</span>,<br>            top: screenHeight - <span class="hljs-number">180</span>,<br>            child: Container(<br>              width: <span class="hljs-number">100</span>,<br>              height: <span class="hljs-number">100</span>,<br>              color: Colors.blue,<br>            ),<br>          )<br>        ],<br>      ),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="五、Widget-组合之综合案例"><a href="#五、Widget-组合之综合案例" class="headerlink" title="五、Widget 组合之综合案例"></a>五、Widget 组合之综合案例</h2><p>讲综合案例之前我们介绍下 Padding：</p><p>Padding 是 Flutter 给我们提供展示内间距的 Widget，为啥要提供这个 Widget 呢？因为很多 Widget 都没有 padding 属性，这个时候我们可以用 Padding 处理与子 Widget 的內间距，其常用的属性如下：</p><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>padding</td><td>EdgeInsetsGeometry</td><td>padding 值, EdgeInsets 设置填充的值</td></tr><tr><td>child</td><td>Widget</td><td>子组件</td></tr></tbody></table><p>ok，接下来看下综合案例要实现的效果：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c8b90e40d5ce42aa95c1a6be5bf0a1c1~tplv-k3u1fbpfcp-watermark.image" alt="flutter_10.png"></p><p>先捋一捋实现的思路：首页我们看到这个页面整体有一个内间距（Padding），元素划分为 4 块，从上到下垂直排列，可以使用 Column，在看具体的每一块：</p><p>第一块：一个黑色的长方形，可以使用 Container 实现</p><p>第二块：左边一张长图，右边先整体也看成一张图片，左右比例 2 : 1，因此我们可以使用 Row + Expanded 实现，在看右边这块整体又分上下两张图片，为了让这两张图片自适应宽度，这里我们可以使用 ListView 嵌套两个 Image</p><p>第三块：左中右三张图片，我们可以使用 Stack + Align 定位布局实现</p><p>第四块：直接使用 ListTile 实现，ListTile 的 leading 为一个圆形图片</p><p>另外还有一些小小的细节，如每一块之间的间距，横线，每一块内部的间距，这些我们使用 SizedBox，Divider 实现</p><p>通过上面的分析，我整理出了一张结构图：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0a63bcb7778c42c6bcfef99a9bb3c81e~tplv-k3u1fbpfcp-watermark.image" alt="flutter_11 (2).png"></p><p>接下来，我们就用代码实现一下：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class="hljs-keyword">void</span> main() &#123;<br>  runApp(MyApp());<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyApp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> MaterialApp(<br>      home: Scaffold(<br>        appBar: AppBar(<br>          title: Text(<span class="hljs-string">&quot;Flutter Widget Combine Pricetice&quot;</span>),<br>          elevation: <span class="hljs-number">30</span>, <span class="hljs-comment">//设置标题阴影</span><br>        ),<br>        body: MyHome(),<br>      ),<br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyHome</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Padding( <span class="hljs-comment">//Padding 实现页面內间距</span><br>      padding: EdgeInsets.all(<span class="hljs-number">10</span>),<br>      child: Column( <span class="hljs-comment">//Column 实现布局垂直排列</span><br>        children: [<br>          Container( <span class="hljs-comment">//Container 实现黑色长方形</span><br>              color: Colors.black,<br>              height: <span class="hljs-number">180</span><br>          ),<br>          SizedBox(height: <span class="hljs-number">10</span>), <span class="hljs-comment">//高度为 10 的间距</span><br>          Row( <span class="hljs-comment">// Row + Expanded 实现横向布局的等比分配</span><br>            children: [<br>              Expanded(<br>                  flex: <span class="hljs-number">2</span>,<br>                  child: Container( <span class="hljs-comment">//Container 嵌套 Image 实现左边长图</span><br>                    child: Image.network(<br>                        <span class="hljs-string">&quot;https://img.lianzhixiu.com/uploads/210106/37-21010609363aS.jpg&quot;</span>,<br>                        fit: BoxFit.cover,<br>                        height: <span class="hljs-number">100</span>),<br>                  )),<br>              SizedBox(width: <span class="hljs-number">10</span>), <span class="hljs-comment">//高度为 10 的间距</span><br>              Expanded(<br>                flex: <span class="hljs-number">1</span>,<br>                child: Container( <span class="hljs-comment">//Container 嵌套 ListView 实现右边上下两张自适应图</span><br>                  height: <span class="hljs-number">100</span>,<br>                  child: ListView(<br>                    children: [<br>                      Image.network(<br>                          <span class="hljs-string">&quot;https://img.lianzhixiu.com/uploads/210106/37-21010609363aS.jpg&quot;</span>,<br>                          fit: BoxFit.cover,<br>                          height: <span class="hljs-number">45</span>),<br>                      SizedBox(height: <span class="hljs-number">10</span>), <span class="hljs-comment">//高度为 10 的间距</span><br>                      Image.network(<br>                          <span class="hljs-string">&quot;https://img.lianzhixiu.com/uploads/210106/37-21010609363aS.jpg&quot;</span>,<br>                          fit: BoxFit.cover,<br>                          height: <span class="hljs-number">45</span>),<br>                    ],<br>                  ),<br>                ),<br>              )<br>            ],<br>          ),<br>          Divider(), <span class="hljs-comment">//横线</span><br>          Stack( <span class="hljs-comment">// Stack + Align 实现定位布局</span><br>            children: [<br>              Align(<br>                  alignment: Alignment.topLeft,<br>                  child: Image.network(<span class="hljs-string">&quot;https://img.lianzhixiu.com/uploads/210106/37-21010609363aS.jpg&quot;</span>,<br>                      width: <span class="hljs-number">70</span>,<br>                      height: <span class="hljs-number">70</span>,<br>                      fit: BoxFit.cover)<br>              ),<br>              Align(<br>                  alignment: Alignment.topCenter,<br>                  child: Image.network(<span class="hljs-string">&quot;https://img.lianzhixiu.com/uploads/210106/37-21010609363aS.jpg&quot;</span>,<br>                      width: <span class="hljs-number">70</span>,<br>                      height: <span class="hljs-number">70</span>,<br>                      fit: BoxFit.cover)<br>              ),<br>              Align(<br>                  alignment: Alignment.topRight,<br>                  child: Image.network(<span class="hljs-string">&quot;https://img.lianzhixiu.com/uploads/210106/37-21010609363aS.jpg&quot;</span>,<br>                      width: <span class="hljs-number">70</span>,<br>                      height: <span class="hljs-number">70</span>,<br>                      fit: BoxFit.cover)<br>              )<br>            ],<br>          ),<br>          Divider(), <span class="hljs-comment">//横线</span><br>          ListTile( <span class="hljs-comment">// ListTile 实现 item</span><br>            leading: ClipOval( <span class="hljs-comment">//圆形图片</span><br>              child: Image.network(<br>                <span class="hljs-string">&quot;https://img.lianzhixiu.com/uploads/210106/37-21010609363aS.jpg&quot;</span>,<br>                width: <span class="hljs-number">50</span>,<br>                height: <span class="hljs-number">50</span>,<br>                fit: BoxFit.cover,<br>              ),<br>            ),<br>            title: Text(<br>              <span class="hljs-string">&quot;你好，我是刘亦菲&quot;</span>,<span class="hljs-comment">//标题</span><br>              style: TextStyle(<br>                  color: Colors.green,<br>                  fontWeight: FontWeight.bold<br>              )<br>            ),<br>            subtitle: Text(<br>                <span class="hljs-string">&quot;很高兴认识你&quot;</span>,<span class="hljs-comment">//副标题</span><br>                style: TextStyle(<br>                  color: Colors.orange,<br>                )<br>            ),<br>          )<br>        ],<br>      ),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h2><p>本文重点内容：</p><p>1、采用 效果 -&gt; Widget 介绍 -&gt; 代码实现的方式对 Image，ListView，GridView，Stack 进行了介绍</p><p>2、在介绍上面 Widget 的过程中，我们又穿插了其它一些 Widget 的讲解：ClipOval，ListTile，Expanded，SizedBox，Divider，Align，Positioned，Padding</p><p>3、最后通过一个综合案例对介绍的 Widget 进行组合使用</p><p>好了，本篇文章到这里就结束了，希望能给你带来帮助 🤝</p><p><strong>感谢你阅读这篇文章</strong></p><h3 id="下篇预告"><a href="#下篇预告" class="headerlink" title="下篇预告"></a>下篇预告</h3><p>下篇文章我会介绍 Flutter Button 相关 Widget，以及 Flutter 2.x Button 的变化</p><h3 id="参考和推荐"><a href="#参考和推荐" class="headerlink" title="参考和推荐"></a>参考和推荐</h3><p><a href="https://api.flutter.dev/flutter/dart-ui/dart-ui-library.html">Flutter 官方 API 文档</a></p><blockquote><p><strong>你的点赞，评论，是对我巨大的鼓励！</strong></p><p>欢迎关注我的<strong>公众号：</strong>  <a href="https://link.juejin.cn/?target=http://m6z.cn/6jwi7b" title="http://m6z.cn/6jwi7b"><strong>sweetying</strong></a> ，文章更新可第一时间收到</p><p>如果<strong>有问题</strong>，公众号内有加我微信的入口，在技术学习、个人成长的道路上，我们一起前进！</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Flutter</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Flutter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flutter 系列（三）：Flutter 特点及常用 Widget 介绍</title>
    <link href="/2022/10/10/Flutter%20%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9AFlutter%20%E7%89%B9%E7%82%B9%E5%8F%8A%E5%B8%B8%E7%94%A8%20Widget%20%E4%BB%8B%E7%BB%8D/"/>
    <url>/2022/10/10/Flutter%20%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9AFlutter%20%E7%89%B9%E7%82%B9%E5%8F%8A%E5%B8%B8%E7%94%A8%20Widget%20%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sweetying520/picgo/master/img/202210101651486.jpeg" alt="konstantin-tretyak-JBvIUIFVzjo-unsplash"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>很高兴遇见你~</p><p>在本系列的上一篇文章中，我们全面介绍了 Dart 语法，内容很多，文字+代码有三万多字，如果你能够耐心看完并手敲里面的示例，你一定会收获很大。还没有看过上一篇文章的朋友，建议先去阅读 <a href="https://juejin.cn/post/7130647339294785549#heading-0">Flutter 系列（二）：Dart 语法筑基</a>。接下来我们进入 Flutter 的学习。</p><h2 id="一、Flutter-特点介绍"><a href="#一、Flutter-特点介绍" class="headerlink" title="一、Flutter 特点介绍"></a>一、Flutter 特点介绍</h2><p>学习一个框架，我们首先要了解这个框架的特点，就好比你学开车一样，你要知道这个车有什么特点，你才能快速的去上手它。Flutter 特点介绍：</p><h3 id="1-1、在-Flutter-中，万物皆-Widget（组件）"><a href="#1-1、在-Flutter-中，万物皆-Widget（组件）" class="headerlink" title="1.1、在 Flutter 中，万物皆 Widget（组件）"></a>1.1、在 Flutter 中，万物皆 Widget（组件）</h3><p>我们在写 Flutter 时，一定要有这样的意识。这样我们才能更好地上手学习。在 Flutter 中，几乎任何东西都是 Widget，不仅是常见的 UI 组件，甚至是布局方式，样式，动画等都是 Widget</p><h3 id="1-2、Widget-嵌套"><a href="#1-2、Widget-嵌套" class="headerlink" title="1.2、Widget 嵌套"></a>1.2、Widget 嵌套</h3><p>写 Android 时，我们会在 Xml 文件中编写布局及 View 嵌套，然后在 Java 或 Kotlin 文件中进行 View 逻辑编写。但写 Flutter，无论是 Widget 嵌套，还是 Widget 逻辑编写，都是在 Dart 文件中进行处理，这样就会产生一些问题：</p><blockquote><p>1、复杂界面出现各种深层 Widget 嵌套</p><p>2、代码逻辑混乱，可读性差</p></blockquote><p>作为 Android 开发，我一开始真的很不习惯，但是随着你学习的深入，对项目进行合理的架构设计，包结构设计，清晰的代码注释，上面的问题在一定程度上得到了解决</p><h3 id="1-3、Widget-状态"><a href="#1-3、Widget-状态" class="headerlink" title="1.3、Widget 状态"></a>1.3、Widget 状态</h3><p>在 Flutter 中，Widget 分为两种：</p><blockquote><p>1、无状态 Widget</p><p>2、有状态 Widget</p></blockquote><p>无状态 Widget (继承自 StatelessWidget)：初始化后无法修改其状态和 UI，如：Text，ScrollView</p><p>有状态 Widget (继承自 StatefulWidget)：其状态可能在 Widget 生命周期中发生变化。如 Image， Scrollable 等。在调用 setState 方法后，Widget 会重新绘制，创建其新的 Widget</p><p>StatelessWidget 和 StatefulWidget 都继承自Widget</p><p><strong>小 Tips</strong>：</p><p>1、在你编写自定义 Widget 时，你首先判断它是有状态的还是无状态的，如果 Widget 需要根据用户交互或其他因素进行更改，则该 Widget 是有状态的，否则就是无状态的</p><p>2、当你需要改变 Widget 状态时，必须调用 setState 方法来通知 Flutter 来更新创建新的 Widget</p><p><strong>注意</strong>：上面一些特点可能一开始不能理解，接着往下看，有些问题随着你知识的积累便迎刃而解了</p><h2 id="二、Flutter-常用-Widget-介绍"><a href="#二、Flutter-常用-Widget-介绍" class="headerlink" title="二、Flutter 常用 Widget 介绍"></a>二、Flutter 常用 Widget 介绍</h2><p>先看一张效果图：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/963be24804034c308ba042a9fe6c6aac~tplv-k3u1fbpfcp-watermark.image" alt="1661082533405.jpg"></p><p>问题：上面的效果怎么实现的呢🤔️？</p><p>如果你是小白，那么就跟着我的步伐继续往下学习。如果不是，你可以想一下可以使用哪些 Widget 嵌套来实现，以及实现的一些细节。</p><p>待我们学习完下面的 Widget 后，在来解决这个问题</p><h3 id="2-1、MaterialApp"><a href="#2-1、MaterialApp" class="headerlink" title="2.1、MaterialApp"></a>2.1、MaterialApp</h3><p>见名知义，MaterialApp 就是一个带 Material Design 设计风格的 Widget，一般作为顶层 Widget 来使用</p><h4 id="2-1-1、属性"><a href="#2-1-1、属性" class="headerlink" title="2.1.1、属性"></a>2.1.1、属性</h4><p>我们如果要查看一个 Widget 有哪些属性，可以通过 IDE 直接点击这个 Widget 的源码去查看，你会发现每个 Widget 都包含许多属性，这么多属性不可能每个都去看，我的建议是：<strong>掌握基础常用的，其它用到时，看源码按需去取</strong></p><p>MaterialApp 构造方法：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">const</span> MaterialApp(&#123;<br>    Key? key,<br>    <span class="hljs-keyword">this</span>.navigatorKey,<br>    <span class="hljs-keyword">this</span>.scaffoldMessengerKey,<br>    <span class="hljs-keyword">this</span>.home,<br>    <span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, WidgetBuilder&gt; <span class="hljs-keyword">this</span>.routes = <span class="hljs-keyword">const</span> &lt;<span class="hljs-built_in">String</span>, WidgetBuilder&gt;&#123;&#125;,<br>    <span class="hljs-keyword">this</span>.initialRoute,<br>    <span class="hljs-keyword">this</span>.onGenerateRoute,<br>    <span class="hljs-keyword">this</span>.onGenerateInitialRoutes,<br>    <span class="hljs-keyword">this</span>.onUnknownRoute,<br>    <span class="hljs-built_in">List</span>&lt;NavigatorObserver&gt; <span class="hljs-keyword">this</span>.navigatorObservers = <span class="hljs-keyword">const</span> &lt;NavigatorObserver&gt;[],<br>    <span class="hljs-keyword">this</span>.builder,<br>    <span class="hljs-keyword">this</span>.title = <span class="hljs-string">&#x27;&#x27;</span>,<br>    <span class="hljs-keyword">this</span>.onGenerateTitle,<br>    <span class="hljs-keyword">this</span>.color,<br>    <span class="hljs-keyword">this</span>.theme,<br>    <span class="hljs-keyword">this</span>.darkTheme,<br>    <span class="hljs-keyword">this</span>.highContrastTheme,<br>    <span class="hljs-keyword">this</span>.highContrastDarkTheme,<br>    <span class="hljs-keyword">this</span>.themeMode = ThemeMode.system,<br>    <span class="hljs-keyword">this</span>.locale,<br>    <span class="hljs-keyword">this</span>.localizationsDelegates,<br>    <span class="hljs-keyword">this</span>.localeListResolutionCallback,<br>    <span class="hljs-keyword">this</span>.localeResolutionCallback,<br>    <span class="hljs-keyword">this</span>.supportedLocales = <span class="hljs-keyword">const</span> &lt;Locale&gt;[Locale(<span class="hljs-string">&#x27;en&#x27;</span>, <span class="hljs-string">&#x27;US&#x27;</span>)],<br>    <span class="hljs-keyword">this</span>.debugShowMaterialGrid = <span class="hljs-keyword">false</span>,<br>    <span class="hljs-keyword">this</span>.showPerformanceOverlay = <span class="hljs-keyword">false</span>,<br>    <span class="hljs-keyword">this</span>.checkerboardRasterCacheImages = <span class="hljs-keyword">false</span>,<br>    <span class="hljs-keyword">this</span>.checkerboardOffscreenLayers = <span class="hljs-keyword">false</span>,<br>    <span class="hljs-keyword">this</span>.showSemanticsDebugger = <span class="hljs-keyword">false</span>,<br>    <span class="hljs-keyword">this</span>.debugShowCheckedModeBanner = <span class="hljs-keyword">true</span>,<br>    <span class="hljs-keyword">this</span>.shortcuts,<br>    <span class="hljs-keyword">this</span>.actions,<br>    <span class="hljs-keyword">this</span>.restorationScopeId,<br>    <span class="hljs-keyword">this</span>.scrollBehavior,<br>    <span class="hljs-keyword">this</span>.useInheritedMediaQuery = <span class="hljs-keyword">false</span>,<br>  &#125;) : <span class="hljs-keyword">assert</span>(routes != <span class="hljs-keyword">null</span>),<br>       <span class="hljs-keyword">assert</span>(navigatorObservers != <span class="hljs-keyword">null</span>),<br>       <span class="hljs-keyword">assert</span>(title != <span class="hljs-keyword">null</span>),<br>       <span class="hljs-keyword">assert</span>(debugShowMaterialGrid != <span class="hljs-keyword">null</span>),<br>       <span class="hljs-keyword">assert</span>(showPerformanceOverlay != <span class="hljs-keyword">null</span>),<br>       <span class="hljs-keyword">assert</span>(checkerboardRasterCacheImages != <span class="hljs-keyword">null</span>),<br>       <span class="hljs-keyword">assert</span>(checkerboardOffscreenLayers != <span class="hljs-keyword">null</span>),<br>       <span class="hljs-keyword">assert</span>(showSemanticsDebugger != <span class="hljs-keyword">null</span>),<br>       <span class="hljs-keyword">assert</span>(debugShowCheckedModeBanner != <span class="hljs-keyword">null</span>),<br>       routeInformationProvider = <span class="hljs-keyword">null</span>,<br>       routeInformationParser = <span class="hljs-keyword">null</span>,<br>       routerDelegate = <span class="hljs-keyword">null</span>,<br>       backButtonDispatcher = <span class="hljs-keyword">null</span>,<br>       <span class="hljs-keyword">super</span>(key: key);<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：下面介绍的属性仅是用于实现上面的效果图</p><p>MaterialApp 常用属性：</p><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>home</td><td>配置 App 主页</td></tr></tbody></table><p>MaterialApp 更多属性介绍：<a href="https://segmentfault.com/a/1190000040552453">https://segmentfault.com/a/1190000040552453</a></p><h3 id="2-2、Scaffold"><a href="#2-2、Scaffold" class="headerlink" title="2.2、Scaffold"></a>2.2、Scaffold</h3><p>Scaffold 是一个 Material Design 设计风格的脚手架 Widget，一般嵌套在 MaterialApp 的 home 属性中</p><h4 id="2-2-1、属性"><a href="#2-2-1、属性" class="headerlink" title="2.2.1、属性"></a>2.2.1、属性</h4><p>Scaffold 构造方法：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">const</span> Scaffold(&#123;<br>    Key? key,<br>    <span class="hljs-keyword">this</span>.appBar,<br>    <span class="hljs-keyword">this</span>.body,<br>    <span class="hljs-keyword">this</span>.floatingActionButton,<br>    <span class="hljs-keyword">this</span>.floatingActionButtonLocation,<br>    <span class="hljs-keyword">this</span>.floatingActionButtonAnimator,<br>    <span class="hljs-keyword">this</span>.persistentFooterButtons,<br>    <span class="hljs-keyword">this</span>.drawer,<br>    <span class="hljs-keyword">this</span>.onDrawerChanged,<br>    <span class="hljs-keyword">this</span>.endDrawer,<br>    <span class="hljs-keyword">this</span>.onEndDrawerChanged,<br>    <span class="hljs-keyword">this</span>.bottomNavigationBar,<br>    <span class="hljs-keyword">this</span>.bottomSheet,<br>    <span class="hljs-keyword">this</span>.backgroundColor,<br>    <span class="hljs-keyword">this</span>.resizeToAvoidBottomInset,<br>    <span class="hljs-keyword">this</span>.primary = <span class="hljs-keyword">true</span>,<br>    <span class="hljs-keyword">this</span>.drawerDragStartBehavior = DragStartBehavior.start,<br>    <span class="hljs-keyword">this</span>.extendBody = <span class="hljs-keyword">false</span>,<br>    <span class="hljs-keyword">this</span>.extendBodyBehindAppBar = <span class="hljs-keyword">false</span>,<br>    <span class="hljs-keyword">this</span>.drawerScrimColor,<br>    <span class="hljs-keyword">this</span>.drawerEdgeDragWidth,<br>    <span class="hljs-keyword">this</span>.drawerEnableOpenDragGesture = <span class="hljs-keyword">true</span>,<br>    <span class="hljs-keyword">this</span>.endDrawerEnableOpenDragGesture = <span class="hljs-keyword">true</span>,<br>    <span class="hljs-keyword">this</span>.restorationId,<br>  &#125;) : <span class="hljs-keyword">assert</span>(primary != <span class="hljs-keyword">null</span>),<br>       <span class="hljs-keyword">assert</span>(extendBody != <span class="hljs-keyword">null</span>),<br>       <span class="hljs-keyword">assert</span>(extendBodyBehindAppBar != <span class="hljs-keyword">null</span>),<br>       <span class="hljs-keyword">assert</span>(drawerDragStartBehavior != <span class="hljs-keyword">null</span>),<br>       <span class="hljs-keyword">super</span>(key: key);<br></code></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>appBar</td><td>配置显示在界面顶部的一个 AppBar</td></tr><tr><td>body</td><td>配置当前界面所显示的主要内容 Widget</td></tr></tbody></table><p>Scaffold 更多属性介绍：<a href="https://segmentfault.com/a/1190000040554948">https://segmentfault.com/a/1190000040554948</a></p><p>以上两个 Widget 就能搭建起页面的基本框架了，但是看到的会是一个空白的页面。回到上面那张图，我们看到顶部有一个标题栏，而且还有阴影，Flutter 给我们提供了 AppBar 来实现</p><h3 id="2-3、AppBar"><a href="#2-3、AppBar" class="headerlink" title="2.3、AppBar"></a>2.3、AppBar</h3><p>AppBar 是基于 Material Design 设计风格的标题栏 Widget，一般在 Scaffold 的 appBar 属性中使用，作为顶部标题栏</p><h4 id="2-3-1、属性"><a href="#2-3-1、属性" class="headerlink" title="2.3.1、属性"></a>2.3.1、属性</h4><p>AppBar 构造方法：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs dart">AppBar(&#123;<br>    Key? key,<br>    <span class="hljs-keyword">this</span>.leading,<br>    <span class="hljs-keyword">this</span>.automaticallyImplyLeading = <span class="hljs-keyword">true</span>,<br>    <span class="hljs-keyword">this</span>.title,<br>    <span class="hljs-keyword">this</span>.actions,<br>    <span class="hljs-keyword">this</span>.flexibleSpace,<br>    <span class="hljs-keyword">this</span>.bottom,<br>    <span class="hljs-keyword">this</span>.elevation,<br>    <span class="hljs-keyword">this</span>.shadowColor,<br>    <span class="hljs-keyword">this</span>.shape,<br>    <span class="hljs-keyword">this</span>.backgroundColor,<br>    <span class="hljs-keyword">this</span>.foregroundColor,<br>    <span class="hljs-meta">@Deprecated</span>(<br>      <span class="hljs-string">&#x27;This property is no longer used, please use systemOverlayStyle instead. &#x27;</span><br>      <span class="hljs-string">&#x27;This feature was deprecated after v2.4.0-0.0.pre.&#x27;</span>,<br>    )<br>    <span class="hljs-keyword">this</span>.brightness,<br>    <span class="hljs-keyword">this</span>.iconTheme,<br>    <span class="hljs-keyword">this</span>.actionsIconTheme,<br>    <span class="hljs-meta">@Deprecated</span>(<br>      <span class="hljs-string">&#x27;This property is no longer used, please use toolbarTextStyle and titleTextStyle instead. &#x27;</span><br>      <span class="hljs-string">&#x27;This feature was deprecated after v2.4.0-0.0.pre.&#x27;</span>,<br>    )<br>    <span class="hljs-keyword">this</span>.textTheme,<br>    <span class="hljs-keyword">this</span>.primary = <span class="hljs-keyword">true</span>,<br>    <span class="hljs-keyword">this</span>.centerTitle,<br>    <span class="hljs-keyword">this</span>.excludeHeaderSemantics = <span class="hljs-keyword">false</span>,<br>    <span class="hljs-keyword">this</span>.titleSpacing,<br>    <span class="hljs-keyword">this</span>.toolbarOpacity = <span class="hljs-number">1.0</span>,<br>    <span class="hljs-keyword">this</span>.bottomOpacity = <span class="hljs-number">1.0</span>,<br>    <span class="hljs-keyword">this</span>.toolbarHeight,<br>    <span class="hljs-keyword">this</span>.leadingWidth,<br>    <span class="hljs-meta">@Deprecated</span>(<br>      <span class="hljs-string">&#x27;This property is obsolete and is false by default. &#x27;</span><br>      <span class="hljs-string">&#x27;This feature was deprecated after v2.4.0-0.0.pre.&#x27;</span>,<br>    )<br>    <span class="hljs-keyword">this</span>.backwardsCompatibility,<br>    <span class="hljs-keyword">this</span>.toolbarTextStyle,<br>    <span class="hljs-keyword">this</span>.titleTextStyle,<br>    <span class="hljs-keyword">this</span>.systemOverlayStyle,<br>  &#125;) : <span class="hljs-keyword">assert</span>(automaticallyImplyLeading != <span class="hljs-keyword">null</span>),<br>       <span class="hljs-keyword">assert</span>(elevation == <span class="hljs-keyword">null</span> || elevation &gt;= <span class="hljs-number">0.0</span>),<br>       <span class="hljs-keyword">assert</span>(primary != <span class="hljs-keyword">null</span>),<br>       <span class="hljs-keyword">assert</span>(toolbarOpacity != <span class="hljs-keyword">null</span>),<br>       <span class="hljs-keyword">assert</span>(bottomOpacity != <span class="hljs-keyword">null</span>),<br>       preferredSize = _PreferredAppBarSize(toolbarHeight, bottom?.preferredSize.height),<br>       <span class="hljs-keyword">super</span>(key: key);<br></code></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>title</td><td>配置标题栏的标题</td></tr><tr><td>elevation</td><td>配置标题栏下方的阴影大小</td></tr></tbody></table><p>AppBar 更多属性介绍：<a href="https://segmentfault.com/a/1190000040562147">https://segmentfault.com/a/1190000040562147</a></p><p>标题栏实现了，接下来就是 body 主体部分，我们在来分析一下：可以看到，主体部分是一个<strong>居中</strong>显示的<strong>圆形</strong>图像，背景是蓝色，有个红色的边框。圆形图像里面有一行<strong>文本</strong>，文本的颜色是白色，字体有点倾斜，字间距偏大，只显示了一行，超出部分 … ，而且文本的中间有一个红色的虚删除线</p><p>上面加粗的文字就是用于实现该效果的 Widget：Center，Container，Text</p><h3 id="2-4、Center"><a href="#2-4、Center" class="headerlink" title="2.4、Center"></a>2.4、Center</h3><p>Center 就是将子 Widget 进行一个居中展示的 Widget，它继承自 Align，因为 Align 默认的对齐方式是居中的，所以它能实现居中效果，如果 Center 的尺寸没有受到限制，那么它将充满整个屏幕</p><h4 id="2-4-1、属性"><a href="#2-4-1、属性" class="headerlink" title="2.4.1、属性"></a>2.4.1、属性</h4><p>Center 构造方法：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">const</span> Center(&#123; Key? key, <span class="hljs-built_in">double?</span> widthFactor, <span class="hljs-built_in">double?</span> heightFactor, Widget? child &#125;)<br>    : <span class="hljs-keyword">super</span>(key: key, widthFactor: widthFactor, heightFactor: heightFactor, child: child);<br></code></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>child</td><td>配置居中显示的子 Widget</td></tr></tbody></table><h3 id="2-5、Container"><a href="#2-5、Container" class="headerlink" title="2.5、Container"></a>2.5、Container</h3><p>Container 是 Flutter 给我们提供的一个多功能 Widget，如果子 Widget 需要一些背景样式、形状、尺寸限制等，我们就可以利用 Container 来进行包裹，上面的圆形图像就是使用 Container 来实现的</p><h4 id="2-5-1、属性"><a href="#2-5-1、属性" class="headerlink" title="2.5.1、属性"></a>2.5.1、属性</h4><p>Container 构造方法：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs dart">Container(&#123;<br>    Key? key,<br>    <span class="hljs-keyword">this</span>.alignment,<br>    <span class="hljs-keyword">this</span>.padding,<br>    <span class="hljs-keyword">this</span>.color,<br>    <span class="hljs-keyword">this</span>.decoration,<br>    <span class="hljs-keyword">this</span>.foregroundDecoration,<br>    <span class="hljs-built_in">double?</span> width,<br>    <span class="hljs-built_in">double?</span> height,<br>    BoxConstraints? constraints,<br>    <span class="hljs-keyword">this</span>.margin,<br>    <span class="hljs-keyword">this</span>.transform,<br>    <span class="hljs-keyword">this</span>.transformAlignment,<br>    <span class="hljs-keyword">this</span>.child,<br>    <span class="hljs-keyword">this</span>.clipBehavior = Clip.none,<br>  &#125;) : <span class="hljs-keyword">assert</span>(margin == <span class="hljs-keyword">null</span> || margin.isNonNegative),<br>       <span class="hljs-keyword">assert</span>(padding == <span class="hljs-keyword">null</span> || padding.isNonNegative),<br>       <span class="hljs-keyword">assert</span>(decoration == <span class="hljs-keyword">null</span> || decoration.debugAssertIsValid()),<br>       <span class="hljs-keyword">assert</span>(constraints == <span class="hljs-keyword">null</span> || constraints.debugAssertIsValid()),<br>       <span class="hljs-keyword">assert</span>(clipBehavior != <span class="hljs-keyword">null</span>),<br>       <span class="hljs-keyword">assert</span>(decoration != <span class="hljs-keyword">null</span> || clipBehavior == Clip.none),<br>       <span class="hljs-keyword">assert</span>(color == <span class="hljs-keyword">null</span> || decoration == <span class="hljs-keyword">null</span>,<br>         <span class="hljs-string">&#x27;Cannot provide both a color and a decoration\n&#x27;</span><br>         <span class="hljs-string">&#x27;To provide both, use &quot;decoration: BoxDecoration(color: color)&quot;.&#x27;</span>,<br>       ),<br>       constraints =<br>        (width != <span class="hljs-keyword">null</span> || height != <span class="hljs-keyword">null</span>)<br>          ? constraints?.tighten(width: width, height: height)<br>            ?? BoxConstraints.tightFor(width: width, height: height)<br>          : constraints,<br>       <span class="hljs-keyword">super</span>(key: key);<br></code></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>child</td><td>配置显示的子 Widget</td></tr><tr><td>color</td><td>配置 Container 背景颜色</td></tr><tr><td>width</td><td>配置 Container 显示的宽度</td></tr><tr><td>height</td><td>配置 Container 显示的高度</td></tr><tr><td>alignment</td><td>配置子 Widget 的对齐方式</td></tr><tr><td>padding</td><td>配置 Container 內边距</td></tr><tr><td>decoration</td><td>配置 Container 装饰</td></tr></tbody></table><p>decoration 接收一个 Decoration 类型的参数，其实现类：BoxDecoration，BoxDecoration 的属性：</p><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>color</td><td>配置 Container 背景颜色</td></tr><tr><td>border</td><td>配置 Container 显示的边框</td></tr><tr><td>borderRadius</td><td>配置 Container 显示的圆角</td></tr></tbody></table><p><strong>注意</strong>：如果 BoxDecoration 设置了 color 属性，就不能设置 Container 的 color 属性，否则会报错，此时在 BoxDecoration 中设置 color 即可</p><p>Container 更多属性介绍：<a href="https://www.liujunmin.com/flutter/container.html">https://www.liujunmin.com/flutter/container.html</a></p><h3 id="2-6、Text"><a href="#2-6、Text" class="headerlink" title="2.6、Text"></a>2.6、Text</h3><p>Text 是 Flutter 给我们提供的文本 Widget，最常用的 Widget 之一，我们可以使用它来实现各种文本效果</p><h4 id="2-6-1、属性"><a href="#2-6-1、属性" class="headerlink" title="2.6.1、属性"></a>2.6.1、属性</h4><p>Text 构造方法：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">const</span> Text(<br>    <span class="hljs-built_in">String</span> <span class="hljs-keyword">this</span>.data, &#123;<br>    Key? key,<br>    <span class="hljs-keyword">this</span>.style,<br>    <span class="hljs-keyword">this</span>.strutStyle,<br>    <span class="hljs-keyword">this</span>.textAlign,<br>    <span class="hljs-keyword">this</span>.textDirection,<br>    <span class="hljs-keyword">this</span>.locale,<br>    <span class="hljs-keyword">this</span>.softWrap,<br>    <span class="hljs-keyword">this</span>.overflow,<br>    <span class="hljs-keyword">this</span>.textScaleFactor,<br>    <span class="hljs-keyword">this</span>.maxLines,<br>    <span class="hljs-keyword">this</span>.semanticsLabel,<br>    <span class="hljs-keyword">this</span>.textWidthBasis,<br>    <span class="hljs-keyword">this</span>.textHeightBehavior,<br>  &#125;) : <span class="hljs-keyword">assert</span>(<br>         data != <span class="hljs-keyword">null</span>,<br>         <span class="hljs-string">&#x27;A non-null String must be provided to a Text widget.&#x27;</span>,<br>       ),<br>       textSpan = <span class="hljs-keyword">null</span>,<br>       <span class="hljs-keyword">super</span>(key: key);<br></code></pre></td></tr></table></figure><p>TextStyle 构造方法：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">const</span> TextStyle(&#123;<br>    <span class="hljs-keyword">this</span>.inherit = <span class="hljs-keyword">true</span>,<br>    <span class="hljs-keyword">this</span>.color,<br>    <span class="hljs-keyword">this</span>.backgroundColor,<br>    <span class="hljs-keyword">this</span>.fontSize,<br>    <span class="hljs-keyword">this</span>.fontWeight,<br>    <span class="hljs-keyword">this</span>.fontStyle,<br>    <span class="hljs-keyword">this</span>.letterSpacing,<br>    <span class="hljs-keyword">this</span>.wordSpacing,<br>    <span class="hljs-keyword">this</span>.textBaseline,<br>    <span class="hljs-keyword">this</span>.height,<br>    <span class="hljs-keyword">this</span>.leadingDistribution,<br>    <span class="hljs-keyword">this</span>.locale,<br>    <span class="hljs-keyword">this</span>.foreground,<br>    <span class="hljs-keyword">this</span>.background,<br>    <span class="hljs-keyword">this</span>.shadows,<br>    <span class="hljs-keyword">this</span>.fontFeatures,<br>    <span class="hljs-keyword">this</span>.decoration,<br>    <span class="hljs-keyword">this</span>.decorationColor,<br>    <span class="hljs-keyword">this</span>.decorationStyle,<br>    <span class="hljs-keyword">this</span>.decorationThickness,<br>    <span class="hljs-keyword">this</span>.debugLabel,<br>    <span class="hljs-built_in">String?</span> fontFamily,<br>    <span class="hljs-built_in">List</span>&lt;<span class="hljs-built_in">String</span>&gt;? fontFamilyFallback,<br>    <span class="hljs-built_in">String?</span> package,<br>    <span class="hljs-keyword">this</span>.overflow,<br>  &#125;) : fontFamily = package == <span class="hljs-keyword">null</span> ? fontFamily : <span class="hljs-string">&#x27;packages/<span class="hljs-subst">$package</span>/<span class="hljs-subst">$fontFamily</span>&#x27;</span>,<br>       _fontFamilyFallback = fontFamilyFallback,<br>       _package = package,<br>       <span class="hljs-keyword">assert</span>(inherit != <span class="hljs-keyword">null</span>),<br>       <span class="hljs-keyword">assert</span>(color == <span class="hljs-keyword">null</span> || foreground == <span class="hljs-keyword">null</span>, _kColorForegroundWarning),<br>       <span class="hljs-keyword">assert</span>(backgroundColor == <span class="hljs-keyword">null</span> || background == <span class="hljs-keyword">null</span>, _kColorBackgroundWarning);<br></code></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>data</td><td>配置 Text 要显示的字符串，必须配置</td></tr><tr><td>maxLines</td><td>配置 Text 能显示的最大行数</td></tr><tr><td>overflow</td><td>配置 Text 文字超出屏幕后的处理方式（clip：裁剪，fade：渐隐，ellipsis：…省略）</td></tr><tr><td>style</td><td>配置 Text 显示的样式</td></tr></tbody></table><p>style 接收一个 TextStyle 类型的参数，它的属性：</p><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>fontSize</td><td>配置 Text 显示的字体大小</td></tr><tr><td>fontWeight</td><td>配置 Text 显示的字体粗细（bold：粗体，normal：正常体）</td></tr><tr><td>color</td><td>配置 Text 显示的文字颜色</td></tr><tr><td>decoration</td><td>配置 text 显示的装饰线（none：没有线，lineThrough：删除线，overline：上划线，underline：下划线）</td></tr><tr><td>decorationColor</td><td>配置 Text 显示的装饰线颜色</td></tr><tr><td>decorationStyle</td><td>配置 Text 显示的装饰线风格（dashed：长虚线，dotted：点虚线，double：两根线，solid：一根实线，wavy：波浪线）</td></tr><tr><td>wordSpacing</td><td>配置 Text 显示的单词间隙</td></tr><tr><td>letterSpacing</td><td>配置 Text 显示的字母间隙</td></tr><tr><td>fontStyle</td><td>配置 Text 显示的文字样式（italic：斜体，normal：正常体）</td></tr></tbody></table><p>Text 更多属性介绍：<a href="https://juejin.cn/post/6844903724846972942">https://juejin.cn/post/6844903724846972942</a></p><p>上面介绍的 Widget 就可以实现效果图了，接下来我们来实现一下它吧</p><h2 id="三、效果图实现"><a href="#三、效果图实现" class="headerlink" title="三、效果图实现"></a>三、效果图实现</h2><p>一个清晰的思路很重要，我们先捋一捋：</p><p>1、使用 MaterialApp 和 Scaffold 搭建页面的基本框架</p><p>2、使用 AppBar 实现带阴影的顶部标题栏</p><p>3、使用 Center 嵌套一个 Container 居中显示，然后通过 Container 属性配置将 Container 设置为带红色边框的圆形图像，Container 嵌套一个 Text ，在对 Text 进行属性配置即可</p><p>代码实现如下：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class="hljs-keyword">void</span> main() &#123;<br>  runApp(MaterialApp(<br>    home: Scaffold(<br>      appBar: AppBar(<br>        title: Text(<span class="hljs-string">&quot;Flutter Widget Learning&quot;</span>),<span class="hljs-comment">//设置标题栏标题</span><br>        elevation: <span class="hljs-number">30</span>,<span class="hljs-comment">//设置标题栏阴影</span><br>      ),<br>      body: Center(<br>        child: Container( <span class="hljs-comment">// Center 嵌套一个 Container</span><br>          width: <span class="hljs-number">300</span>, <span class="hljs-comment">//设置 Container 宽度为 300</span><br>          height: <span class="hljs-number">300</span>, <span class="hljs-comment">//设置 Container 高度为 300</span><br>          alignment: Alignment.center, <span class="hljs-comment">//设置子 Widget 居中</span><br>          padding: EdgeInsets.all(<span class="hljs-number">20</span>), <span class="hljs-comment">//设置 Container 內边距为 20</span><br>          decoration: BoxDecoration( <span class="hljs-comment">//设置 Container 装饰</span><br>            color: Colors.blue, <span class="hljs-comment">//设置 Container 背景颜色为蓝色</span><br>            border: Border.all(<br>              color: Colors.red, <span class="hljs-comment">//设置 Container 边框颜色为红色</span><br>              width: <span class="hljs-number">2</span> <span class="hljs-comment">//设置 Container 边框的宽度为 2</span><br>            ),<br>            borderRadius: BorderRadius.all(Radius.circular(<span class="hljs-number">200</span>)), <span class="hljs-comment">//设置 Container 的形状为一个圆形</span><br>          ),<br>          child: Text( <span class="hljs-comment">//Container 嵌套一个 Text</span><br>            <span class="hljs-string">&quot;Hello erdai str&quot;</span>, <span class="hljs-comment">// 设置 Text 要显示的字符串</span><br>            maxLines: <span class="hljs-number">1</span>, <span class="hljs-comment">//设置 Text 最大显示一行</span><br>            overflow: TextOverflow.ellipsis, <span class="hljs-comment">//设置 Text 文本超过一行 ... 显示</span><br>            style: TextStyle( <span class="hljs-comment">//配置 Text 样式</span><br>                fontSize: <span class="hljs-number">28</span>, <span class="hljs-comment">//设置 Text 的字体大小为 28</span><br>                fontWeight: FontWeight.bold, <span class="hljs-comment">//设置 Text 显示为粗体</span><br>                color: Colors.white, <span class="hljs-comment">//设置 Text 文字颜色为白色</span><br>                decoration: TextDecoration.lineThrough, <span class="hljs-comment">//设置 Text 删除线</span><br>                decorationColor: Colors.red, <span class="hljs-comment">//设置 Text 删除线颜色为红色</span><br>                decorationStyle: TextDecorationStyle.dashed, <span class="hljs-comment">//设置 Text 删除线为虚线</span><br>                wordSpacing: <span class="hljs-number">20</span>, <span class="hljs-comment">//设置 Text 单词之间间距为 20</span><br>                letterSpacing: <span class="hljs-number">6</span>, <span class="hljs-comment">//设置 Text 字母间距为 6</span><br>                fontStyle: FontStyle.italic <span class="hljs-comment">//设置 Text 字体样式为斜体</span><br>            ),<br>          ),<br>        ),<br>      ),<br>    ),<br>  ));<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码就实现了我们想要的效果，但是有一点点瑕疵，那就是代码都写在 main 方法中，导致 main 方法比较臃肿，那是否有办法对 main 方法中的逻辑进行抽离呢？</p><p>答：有的，自定义 Widget 对 main 方法逻辑进行抽离优化</p><h2 id="四、自定义-Widget"><a href="#四、自定义-Widget" class="headerlink" title="四、自定义 Widget"></a>四、自定义 Widget</h2><p>上面讲过，自定义 Widget 先要对 Widget 的状态进行判断，我们这里无需用户交互以及其他因素进行更改，因此是无状态的，继承 StatelessWidget 即可</p><p>接下来我们对 body 部分的逻辑进行抽离，封装为一个自定义 Widget，如下：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBodyPage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span></span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Center(<br>      child: Container( <span class="hljs-comment">// Center 嵌套一个 Container</span><br>        width: <span class="hljs-number">300</span>, <span class="hljs-comment">//设置 Container 宽度为 300</span><br>        height: <span class="hljs-number">300</span>, <span class="hljs-comment">//设置 Container 高度为 300</span><br>        alignment: Alignment.center, <span class="hljs-comment">//设置子 Widget 居中</span><br>        padding: EdgeInsets.all(<span class="hljs-number">20</span>), <span class="hljs-comment">//设置 Container 內边距为 20</span><br>        decoration: BoxDecoration( <span class="hljs-comment">//设置 Container 装饰</span><br>          color: Colors.blue, <span class="hljs-comment">//设置 Container 背景颜色为蓝色</span><br>          border: Border.all(<br>              color: Colors.red, <span class="hljs-comment">//设置 Container 边框颜色为红色</span><br>              width: <span class="hljs-number">2</span> <span class="hljs-comment">//设置 Container 边框的宽度为 2</span><br>          ),<br>          borderRadius: BorderRadius.all(Radius.circular(<span class="hljs-number">200</span>)), <span class="hljs-comment">//设置 Container 的形状为一个圆形</span><br>        ),<br>        child: Text( <span class="hljs-comment">//Container 嵌套一个 Text</span><br>          <span class="hljs-string">&quot;Hello erdai str&quot;</span>, <span class="hljs-comment">// 设置 Text 要显示的字符串</span><br>          maxLines: <span class="hljs-number">1</span>, <span class="hljs-comment">//设置 Text 最大显示一行</span><br>          overflow: TextOverflow.ellipsis, <span class="hljs-comment">//设置 Text 文本超过一行 ... 显示</span><br>          style: TextStyle( <span class="hljs-comment">//配置 Text 样式</span><br>              fontSize: <span class="hljs-number">28</span>, <span class="hljs-comment">//设置 Text 的字体大小为 28</span><br>              fontWeight: FontWeight.bold, <span class="hljs-comment">//设置 Text 显示为粗体</span><br>              color: Colors.white, <span class="hljs-comment">//设置 Text 文字颜色为白色</span><br>              decoration: TextDecoration.lineThrough, <span class="hljs-comment">//设置 Text 删除线</span><br>              decorationColor: Colors.red, <span class="hljs-comment">//设置 Text 删除线颜色为红色</span><br>              decorationStyle: TextDecorationStyle.dashed, <span class="hljs-comment">//设置 Text 删除线为虚线</span><br>              wordSpacing: <span class="hljs-number">20</span>, <span class="hljs-comment">//设置 Text 单词之间间距为 20</span><br>              letterSpacing: <span class="hljs-number">6</span>, <span class="hljs-comment">//设置 Text 字母间距为 6</span><br>              fontStyle: FontStyle.italic <span class="hljs-comment">//设置 Text 字体样式为斜体</span><br>          ),<br>        ),<br>      ),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>实则就是将 body 部分的代码移过来😂，掌握自定义 Widget 的思路即可，那么 main 方法的代码就简化了很多，如下：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class="hljs-keyword">void</span> main() &#123;<br>  runApp(MaterialApp(<br>    home: Scaffold(<br>      appBar: AppBar(<br>        title: Text(<span class="hljs-string">&quot;Flutter Widget Learning&quot;</span>),<span class="hljs-comment">//设置标题栏标题</span><br>        elevation: <span class="hljs-number">30</span>,<span class="hljs-comment">//设置标题栏阴影</span><br>      ),<br>      body: MyBodyPage() <span class="hljs-comment">//自定义 Widget</span><br>    ),<br>  ));<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>本文重点内容：</p><p>1、Flutter 的特点，了解它，能帮助我们更好的学习 Flutter</p><p>2、介绍了实现效果图用到的 Widget：MaterialApp，Scaffold，AppBar，Center，Container，Text</p><p>3、学习 Widget 实则就是要重点掌握它有哪些属性，我的建议是：掌握常用的，其它的用到时查看源码即<br>可。另外一个问题：当你不知道属性怎么赋值，也可以通过查看源码了解属性的类型，然后进行相应的赋值</p><p>4、介绍了自定义属性，根据状态判断是继承 StatelessWidget 还是 StatefulWidget</p><p>好了，本篇文章到这里就结束了，希望能给你带来帮助 🤝</p><p><strong>感谢你阅读这篇文章</strong></p><h3 id="下篇预告"><a href="#下篇预告" class="headerlink" title="下篇预告"></a>下篇预告</h3><p>Flutter Widget 有很多，今天我们只是学习了简单的几个，接下来我还会继续对 Flutter Widget 进行介绍</p><h3 id="参考和推荐"><a href="#参考和推荐" class="headerlink" title="参考和推荐"></a>参考和推荐</h3><p><a href="https://www.bilibili.com/video/BV1S4411E7LY?p=19&vd_source=d0b24cb21c438ff4a9ac2e589eacb3d9">Flutter 教程</a>：通俗易懂的 Flutter 入门教程</p><blockquote><p><strong>你的点赞，评论，是对我巨大的鼓励！</strong></p><p>欢迎关注我的<strong>公众号：</strong>  <a href="https://link.juejin.cn/?target=http://m6z.cn/6jwi7b" title="http://m6z.cn/6jwi7b"><strong>sweetying</strong></a> ，文章更新可第一时间收到</p><p>如果<strong>有问题</strong>，公众号内有加我微信的入口，在技术学习、个人成长的道路上，我们一起前进！</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Flutter</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Flutter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flutter 系列（二）：Dart 语法筑基</title>
    <link href="/2022/10/10/Flutter%20%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9ADart%20%E8%AF%AD%E6%B3%95%E7%AD%91%E5%9F%BA/"/>
    <url>/2022/10/10/Flutter%20%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9ADart%20%E8%AF%AD%E6%B3%95%E7%AD%91%E5%9F%BA/</url>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sweetying520/picgo/master/img/202210101643723.jpeg" alt="arjun-mj-KRB2m_nLQQA-unsplash"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>很高兴遇见你~</p><p>在本系列的上一篇文章中，我们介绍了 Flutter 开发环境搭建，以及使用 AndroidStudio 运行你的第一个 Flutter 项目，体验了热重载。还没有看过上一篇文章的朋友，建议先去阅读<a href="https://juejin.cn/post/7057420846863745031">Flutter 系列（一）：运行你的第一个 Flutter 应用</a>，在我看来，Dart 在设计时应该是借鉴了百家语言之所长😄：Java，Kotlin等：</p><p>1、在静态语法方面，如：类型定义，方法声明，泛型等，和 Java 非常相似</p><p>2、一些语法特性，如：函数式特性，空安全，函数默认值等，和 Kotlin 非常相似</p><p>3、Dart 还有一些自己独创的语法，如：命名构造方法，级联操作符等</p><p>总之，熟悉之后，你会发现 Dart 是一门非常有意思的编程语言，接下来就让我们一起进入 Dart 的语法学习吧</p><p><strong>注意</strong>： Dart 语法和 Java，Kotlin 真的很像，尤其是 Java。另外如果对 Kotlin 语法不熟的，可以去看我的另外一篇文章：<a href="https://juejin.cn/post/6942251919662383134">“Kotlin”系列: 一、Kotlin入门</a></p><h2 id="一、变量和方法"><a href="#一、变量和方法" class="headerlink" title="一、变量和方法"></a>一、变量和方法</h2><h3 id="1-1、变量"><a href="#1-1、变量" class="headerlink" title="1.1、变量"></a>1.1、变量</h3><p>1）、Dart 可以显示指明类型来声明一个可变的变量。且指明的类型分为可空和非空</p><p>2）、Dart 也可以使用 var 关键字来声明一个可变的变量，此时编译器会根据变量初始值自动推断类型</p><p>3）、Dart 使用 final 关键字来声明一个不可变的变量，且可以替代 var 或加在类型前面</p><p>4）、Dart 中变量如果是非空类型，那么必须给一个默认值，否则无法编译通过。如果是可空类型，默认值都为 null</p><p>5）、Dart 中每一行代码都要加 ; 😂，走回头路了，有点鸡肋</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">//1、Dart 可以显示指明类型来声明一个可变的变量。且指明的类型分为可空和非空</span><br><span class="hljs-comment">//1.1、类比 Java，显示指明类型来声明一个可变的变量</span><br><span class="hljs-comment">//dart 写法：</span><br><span class="hljs-built_in">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">bool</span> b = <span class="hljs-keyword">true</span>;<br><br><span class="hljs-comment">//Java 写法</span><br><span class="hljs-built_in">int</span> a = <span class="hljs-number">10</span>;<br>boolean b = <span class="hljs-keyword">true</span>;<br><br><span class="hljs-comment">//1.2、指明的类型分为可空和非空</span><br><span class="hljs-comment">//dart 写法</span><br><span class="hljs-built_in">int?</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">bool?</span> b = <span class="hljs-keyword">true</span>;<br><br><span class="hljs-comment">//kotlin 写法</span><br><span class="hljs-keyword">var</span> a: Int? = <span class="hljs-number">10</span><br><span class="hljs-keyword">var</span> b: Boolean? = <span class="hljs-keyword">true</span><br>  <br><span class="hljs-comment">//2、Dart 也可以使用 var 关键字来声明一个可变的变量，此时编译器会根据变量初始值自动推断类型</span><br><span class="hljs-comment">//dart 写法</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">var</span> b = <span class="hljs-keyword">true</span>;<br><br><span class="hljs-comment">//kotlin 写法</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span><br><span class="hljs-keyword">var</span> b = <span class="hljs-keyword">true</span><br>  <br><span class="hljs-comment">//3、Dart 使用 final 关键字来声明一个不可变的变量，且可以替代 var 或加在类型前面</span><br><span class="hljs-comment">//dart 写法</span><br><span class="hljs-keyword">final</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">final</span> <span class="hljs-built_in">int</span> aa = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">final</span> b = <span class="hljs-keyword">true</span>;<br><span class="hljs-keyword">final</span> <span class="hljs-built_in">bool</span> bb = <span class="hljs-keyword">true</span>;<br><br><span class="hljs-comment">//Java 写法</span><br><span class="hljs-keyword">final</span> <span class="hljs-built_in">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">final</span> boolean b = <span class="hljs-keyword">true</span>;<br><br><span class="hljs-comment">//5、Dart 中变量如果是非空类型，那么必须给一个默认值。如果是可空类型，默认值都为 null</span><br><span class="hljs-keyword">void</span> main() &#123;<br>  <span class="hljs-built_in">String</span> s = <span class="hljs-string">&quot;erdai&quot;</span>;<br>  <span class="hljs-built_in">int?</span> i;<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;<span class="hljs-subst">$s</span> <span class="hljs-subst">$i</span>&#x27;</span>); <span class="hljs-comment">//打印结果：erdai null</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>小建议</strong>：定义变量，优先使用自动推断，来自 Dart 官方的建议</p><p><strong>注意</strong>： Dart 完全抛弃了 Java 中的基本数据类型，全部都是对象数据类型</p><p>5）、Dart 中还可以使用 Object 和 dynamic 关键字来声明一个变量</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs abnf">//<span class="hljs-number">1</span>、Dart 中还可以使用 Object 和 dynamic 关键字来声明一个变量<br>//<span class="hljs-number">1.1</span>、Object 声明变量，这一点和 Java 没任何区别<br>Object a <span class="hljs-operator">=</span> <span class="hljs-number">10</span><span class="hljs-comment">;</span><br>Object b <span class="hljs-operator">=</span> true<span class="hljs-comment">;</span><br>Object str <span class="hljs-operator">=</span> <span class="hljs-string">&quot;erdai666&quot;</span><span class="hljs-comment">;</span><br><br>//<span class="hljs-number">1.2</span>、dynamic 声明变量，这一点是 Java 所没有的<br>dynamic a <span class="hljs-operator">=</span> <span class="hljs-number">10</span><span class="hljs-comment">;</span><br>dynamic b <span class="hljs-operator">=</span> true<span class="hljs-comment">;</span><br>dynamic str <span class="hljs-operator">=</span> <span class="hljs-string">&quot;erdai666&quot;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>思考一个问题：Object 和 dynamic 有啥区别呢？🤔️</p><p>答：Object 是所有类的基类，相当于一个可以兼容所有类型的超级类型，这点和 Java 类似。dynamic 就是一个定义动态类型的关键字</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-comment">//1、声明一个 Object 类型的变量调用 substring，此时会编译报错，因为 Object 没有 substring 方法</span><br><span class="hljs-built_in">Object</span> <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;erdai666&quot;</span>;<br><span class="hljs-built_in">str</span>.<span class="hljs-property">substring</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">//编译报错：The method &#x27;substring&#x27; isn&#x27;t defined for the type &#x27;Object&#x27;.</span><br><br><span class="hljs-comment">//2、使用 dynamic 定义一个变量调用 substring，此时可以绕过编译检查</span><br>dynamic <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;erdai666&quot;</span>;<br><span class="hljs-built_in">str</span>.<span class="hljs-property">substring</span>(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：使用 dynamic 定义的变量调用相关指定类型 api 时，因为会绕过编译器检查，所以别写错了，否则运行时就会报找不到此 api，如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/56018a16767142e28c710727a2e9fa39~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>可以看到，编译器提示： String 类没有 subString 方法。就是因为我们 api 写错了，将 substring 写成了 subString 导致的</p><h3 id="1-2、常量"><a href="#1-2、常量" class="headerlink" title="1.2、常量"></a>1.2、常量</h3><p>1）、Dart 使用 const 关键字来定义一个常量</p><p>2）、Dart 可以使用 const 关键字替代 var 或加在类型前面</p><p>3）、Dart 还可以使用 const 关键字来创建一个常量</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//1、Dart 使用 const 关键字来定义一个常量</span><br><span class="hljs-comment">//2、Dart 可以使用 const 关键字替代 var 或加在类型前面</span><br><span class="hljs-keyword">const</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">const</span> b = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-built_in">int</span> aa = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-built_in">bool</span> bb = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">//3、Dart 还可以使用 const 关键字来创建一个常量</span><br><span class="hljs-comment">//创建一个内容和引用都不可变的 list 数组</span><br><span class="hljs-keyword">var</span> list = <span class="hljs-keyword">const</span> [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-comment">//创建一个内容和引用都不可变的 set 集合</span><br><span class="hljs-keyword">var</span> <span class="hljs-keyword">set</span> = <span class="hljs-keyword">const</span> &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br></code></pre></td></tr></table></figure><p>这里我有一个疑问：那 const 和 final 有啥异同呢？</p><p>答：</p><p>异：</p><p>1、final 可以一开始不赋值，如果赋值了则不可变。const 一开始就需要赋值且不可变</p><p>2、const 必须给一个明确的编译常量值（即编译期间就确定的值）</p><p>3、final 可以通过计算或者方法获取一个值（即运行期间确定的值）</p><p>4、final 表示引用不可变，但内容是可变的。const 表示内容和引用都不可变</p><p>同：</p><p>1、final，const 关键字都可以用来定义一个常量</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span><span class="hljs-number">1</span>、final 可以一开始不赋值，如果赋值了则不可变。const 一开始就需要赋值且不可变<br><span class="hljs-regexp">//</span><span class="hljs-number">2</span>、const 必须给一个明确的编译常量值（即编译期间就确定的值）<br><span class="hljs-regexp">//</span><span class="hljs-number">3</span>、final 可以通过计算/方法获取一个值（即运行期间确定的值）<br><br>final a;<span class="hljs-regexp">//</span>编译通过<br>a = <span class="hljs-number">10</span>;<span class="hljs-regexp">//</span>编译通过<br><br>const b;<span class="hljs-regexp">//</span>编译报错<br>b = <span class="hljs-number">10</span>;<span class="hljs-regexp">//</span>编译报错<br><br><span class="hljs-regexp">//</span><span class="hljs-number">4</span>、final 表示引用不可变，但内容是可变的。const 表示内容和引用都不可变<br>final set = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br>set.add(<span class="hljs-number">4</span>);<br><br>var list = const [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br>list.add(<span class="hljs-number">4</span>);<span class="hljs-regexp">//</span>运行报错，const list 不可新增元素<br></code></pre></td></tr></table></figure><h3 id="1-3、方法"><a href="#1-3、方法" class="headerlink" title="1.3、方法"></a>1.3、方法</h3><h4 id="1-3-1、方法定义"><a href="#1-3-1、方法定义" class="headerlink" title="1.3.1、方法定义"></a>1.3.1、方法定义</h4><p>1）、方法和函数是同一个概念，在 Java 中我们习惯叫方法 (method)。在 Kotlin 中我们习惯叫函数 (function)。因 Dart 更像 Java ，因此这里建议大家也叫方法 (method)</p><p>2）、方法是运行代码的载体，像我们使用过的 main 方法就是一个方法</p><p>Dart 中定义方法的语法规则：</p><blockquote><p>返回参数类型 方法名(参数1,参数2,参数3…) {</p><p>方法体</p><p>}</p></blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//1、Dart 写法1：方法的参数使用：var 参数名</span><br>String <span class="hljs-keyword">method</span><span class="hljs-constructor">Name(<span class="hljs-params">var</span> <span class="hljs-params">name</span>,<span class="hljs-params">var</span> <span class="hljs-params">age</span>)</span>&#123;<br>  return <span class="hljs-string">&quot;erdai666&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">//2、Dart 写法2：方法的参数使用：类型 参数名</span><br>String <span class="hljs-keyword">method</span><span class="hljs-constructor">Name(String <span class="hljs-params">name</span>,<span class="hljs-params">int</span> <span class="hljs-params">age</span>)</span>&#123;<br>  return <span class="hljs-string">&quot;erdai666&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">//3、Dart 写法3：方法的返回类型可省略，根据方法体最后一行代码进行返回类型推断</span><br><span class="hljs-keyword">method</span><span class="hljs-constructor">Name(<span class="hljs-params">var</span> <span class="hljs-params">name</span>,<span class="hljs-params">var</span> <span class="hljs-params">age</span>)</span>&#123;<br>  return <span class="hljs-string">&quot;erdai666&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">//4、如果没有写返回类型，且方法体最后一行代码没有明确写返回语句，那么默认执行：return null</span><br><span class="hljs-keyword">method</span><span class="hljs-constructor">Name(<span class="hljs-params">var</span> <span class="hljs-params">name</span>,<span class="hljs-params">var</span> <span class="hljs-params">age</span>)</span>&#123;<br>  <br>&#125;<br><br><span class="hljs-comment">//5、Dart 写法4：无返回值使用 void 关键字</span><br>void <span class="hljs-keyword">method</span><span class="hljs-constructor">Name(<span class="hljs-params">var</span> <span class="hljs-params">name</span>,<span class="hljs-params">var</span> <span class="hljs-params">age</span>)</span>&#123;<br>  <br>&#125;<br><br><span class="hljs-comment">//6、Dart 写法5：如果方法体只有一行表达式，可将其改成单行方法样式，方法名和方法体用 =&gt; 连接</span><br>String <span class="hljs-keyword">method</span><span class="hljs-constructor">Name(<span class="hljs-params">var</span> <span class="hljs-params">name</span>,<span class="hljs-params">var</span> <span class="hljs-params">age</span>)</span> =&gt; <span class="hljs-string">&quot;erdai666&quot;</span>;<br></code></pre></td></tr></table></figure><p>方法语法解释：</p><ul><li><p>所有方法都有返回值，即使返回值是 void</p></li><li><p>方法的返回类型，可写可不写。如果不写，会根据方法体里面最后一行代码进行类型推断</p></li><li><p>如果没有写返回类型，且方法体最后一行代码没有明确写返回语句，那么默认执行：return null</p></li><li><p>方法名称可以随便取，就像 Java ，Kotlin 里面定义方法名一样</p></li><li><p>方法名里面的参数可以有任意多个，参数的声明格式有两种：</p><blockquote><p>1、var 参数名</p><p>2、类型 参数名</p></blockquote></li></ul><!----><ul><li>如果方法体只有一行表达式，可将其改成单行方法样式，方法名和方法体用 &#x3D;&gt; 连接</li></ul><p><strong>小建议</strong>：定义一个方法时，建议把返回类型给写出来，可读性强</p><h4 id="1-3-2、可选参数-amp-命名参数-amp-默认参数"><a href="#1-3-2、可选参数-amp-命名参数-amp-默认参数" class="headerlink" title="1.3.2、可选参数 &amp; 命名参数 &amp; 默认参数"></a>1.3.2、可选参数 &amp; 命名参数 &amp; 默认参数</h4><h5 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h5><p>1）、可选参数顾名思义就是可以选择的参数，使用 [] 表示可选的位置参数，如下：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> optionFunction(<span class="hljs-keyword">var</span> value1,[<span class="hljs-keyword">var</span> value2 = <span class="hljs-number">2</span>,<span class="hljs-keyword">var</span> value3 = <span class="hljs-number">3</span>])&#123;<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;<span class="hljs-subst">$value1</span> <span class="hljs-subst">$value2</span> <span class="hljs-subst">$value3</span>&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">void</span> main()&#123;<br>  optionFunction(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">//打印结果</span><br><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>疑问：如果我只想给 value1 和 value3 传参：可以做到吗？</p><p>答：不能。如果想做到，就需要使用命名参数</p><h5 id="命名参数"><a href="#命名参数" class="headerlink" title="命名参数"></a>命名参数</h5><p>1）、命名参数默认都为可选参数。如果是必要参数，则需要用 required 关键字，且使用 required 修饰的参数不能提供默认值</p><p>2）、使用 {} 来指定命名参数</p><p>3）、命名参数必须以 key: value 的形式去指定</p><p>如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//1、使用 &#123;&#125; 来指定命名参数</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">optionFunction</span>(<span class="hljs-params"><span class="hljs-keyword">var</span> value1,&#123;<span class="hljs-keyword">var</span> value2 = <span class="hljs-number">2</span>,<span class="hljs-keyword">var</span> value3 = <span class="hljs-number">3</span>&#125;</span>)&#123;<br>  <span class="hljs-title function_">print</span>(<span class="hljs-string">&#x27;$value1 $value2 $value3&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-title function_">optionFunction</span>(<span class="hljs-number">1</span>,<span class="hljs-attr">value3</span>: <span class="hljs-number">4</span>);<br>&#125;<br><span class="hljs-comment">//打印结果</span><br><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span><br><br> <br><span class="hljs-comment">//2、如果是必要参数，则需要用 required 关键字，且使用 required 修饰的参数不能提供默认值</span><br><span class="hljs-comment">//此时 value2 为必传的参数</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">optionFunction</span>(<span class="hljs-params"><span class="hljs-keyword">var</span> value1,&#123;required <span class="hljs-keyword">var</span> value2,<span class="hljs-keyword">var</span> value3 = <span class="hljs-number">3</span>&#125;</span>)&#123;<br>  <span class="hljs-title function_">print</span>(<span class="hljs-string">&#x27;$value1 $value2 $value3&#x27;</span>);<br>&#125;  <br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-title function_">optionFunction</span>(<span class="hljs-number">1</span>,<span class="hljs-attr">value2</span>: <span class="hljs-number">4</span>);<br>&#125;<br><span class="hljs-comment">//打印结果</span><br><span class="hljs-number">1</span> <span class="hljs-number">4</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h5 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h5><p>如上我们刚才给可选参数和命名参数提供的默认值</p><p>1）、默认参数就是给可选参数提供默认值，以便在未提供相应实参时使用</p><p>2）、默认值必须是编译时常量</p><p>3）、如果可选参数没有提供默认值，那默认值就为 null</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//1、如果可选参数没有提供默认值，那默认值就为 null</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">optionFunction</span>(<span class="hljs-params"><span class="hljs-keyword">var</span> value1,&#123;<span class="hljs-keyword">var</span> value2 = <span class="hljs-number">2</span>,<span class="hljs-keyword">var</span> value3&#125;</span>)&#123;<br>  <span class="hljs-title function_">print</span>(<span class="hljs-string">&#x27;$value1 $value2 $value3&#x27;</span>);<br>&#125;<br> <br><span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-title function_">optionFunction</span>(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-comment">//打印结果</span><br><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><h4 id="1-3-3、匿名方法（又称闭包）"><a href="#1-3-3、匿名方法（又称闭包）" class="headerlink" title="1.3.3、匿名方法（又称闭包）"></a>1.3.3、匿名方法（又称闭包）</h4><p>1）、匿名方法顾名思义就是没有名字的方法，语法规则如下：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-comment">//1、方式一：</span><br><span class="hljs-comment">(var 参数名)</span>&#123;<br>   方法体<br>&#125;<br><br><span class="hljs-comment">//2、方式二：</span><br><span class="hljs-comment">(类型 参数名)</span>&#123;<br>   方法体<br>&#125;<br><br><span class="hljs-comment">//3、方式三：如果方法体只有一行代码可以将匿名方法用单行表示</span><br><span class="hljs-comment">(var 参数名)</span> =&gt; 方法体<br><span class="hljs-comment">(类型 参数名)</span> =&gt; 方法体<br>  <br><span class="hljs-comment">//4、方式四：省略 var 或类型</span><br><span class="hljs-comment">(参数名)</span>&#123;<br>   方法体<br>&#125;<br><br><span class="hljs-comment">(参数名)</span> =&gt; 方法体<br></code></pre></td></tr></table></figure><p>2）、匿名方法一般会当做参数或赋值给一个变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//1、匿名方法当作参数使用</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">const</span> list = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br>  list.<span class="hljs-title function_">forEach</span>((element)&#123;<br>    <span class="hljs-title function_">print</span>(element);<br>  &#125;);<br>  <span class="hljs-comment">//可简化成如下写法：</span><br>  <span class="hljs-comment">//list.forEach((element) =&gt; print(element));</span><br>&#125;<br><br><span class="hljs-comment">//2、匿名方法赋值给一个变量</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">const</span> list = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br>  <span class="hljs-keyword">var</span> <span class="hljs-keyword">function</span> = (element)&#123;<br>    <span class="hljs-title function_">print</span>(element);<br>  &#125;;<br>  <span class="hljs-comment">//可简化成如下写法：</span><br>  <span class="hljs-comment">//var function = (element) =&gt;  print(element);</span><br>  list.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>3）、匿名方法立即执行</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//1、方式1</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span>()</span>&#123;<br>  <span class="hljs-keyword">var</span> func = ()&#123;<br>    print(<span class="hljs-string">&#x27;666&#x27;</span>);<br>  &#125;;<br>  (func)();<br>&#125;<br><br><span class="hljs-comment">//2、方式2</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span>()</span>&#123;<br>  (()&#123;<br>    print(<span class="hljs-string">&#x27;666&#x27;</span>);<br>  &#125;)();<br>&#125;<br><br><span class="hljs-comment">//打印结果</span><br><span class="hljs-number">666</span><br></code></pre></td></tr></table></figure><p>4）、匿名方法内部可以引用包含该匿名方法的所有层级作用域中的变量，与匿名方法调用的位置无关，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//makeAdder 返回一个匿名方法</span><br><span class="hljs-title class_">Function</span> <span class="hljs-title function_">makeAdder</span>(<span class="hljs-params">num addBy</span>)&#123;<br>  <span class="hljs-comment">//匿名方法访问 addBy 参数</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">num i</span>) =&gt;</span> addBy + i;<br>&#125;<br><br><span class="hljs-keyword">void</span>  <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-comment">//创建一个匿名方法，传入实参为 2</span><br>  <span class="hljs-keyword">var</span> add1 = <span class="hljs-title function_">makeAdder</span>(<span class="hljs-number">2</span>);<br>  <span class="hljs-comment">//创建一个匿名方法，传入实参为 3</span><br>  <span class="hljs-keyword">var</span> add2 = <span class="hljs-title function_">makeAdder</span>(<span class="hljs-number">3</span>);<br><br>  <span class="hljs-comment">//分别调用两个匿名方法，并打印结果</span><br>  <span class="hljs-title function_">print</span>(<span class="hljs-title function_">add1</span>(<span class="hljs-number">3</span>));<br>  <span class="hljs-title function_">print</span>(<span class="hljs-title function_">add2</span>(<span class="hljs-number">4</span>));<br>&#125;<br><br><span class="hljs-comment">//打印结果</span><br><span class="hljs-number">5</span><br><span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><p><strong>注意</strong>：Dart 中的方法也是一种类型，对应 Function 类，所以方法可以被赋值给变量或作为参数传入另一个方法</p><h4 id="1-3-4、静态方法"><a href="#1-3-4、静态方法" class="headerlink" title="1.3.4、静态方法"></a>1.3.4、静态方法</h4><p>1）、使用 static 关键字修饰的方法即为静态方法，因静态方法不属于类实例，所以也无法访问类成员</p><p>2）、静态方法可以使用类名直接调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>  <span class="hljs-keyword">static</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">staticFunction1</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">staticFunction2</span>(<span class="hljs-params"></span>)&#123;<br> <br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-title class_">Test</span>.<span class="hljs-title function_">staticFunction1</span>();<br>  <span class="hljs-title class_">Test</span>.<span class="hljs-title function_">staticFunction2</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二、基本类型和运算符"><a href="#二、基本类型和运算符" class="headerlink" title="二、基本类型和运算符"></a>二、基本类型和运算符</h2><h3 id="2-1、基本类型"><a href="#2-1、基本类型" class="headerlink" title="2.1、基本类型"></a>2.1、基本类型</h3><p>前面提到过：Dart 完全抛弃了 Java 中的基本数据类型，全部都是对象数据类型。因此我们这里讲的基本类型，也是对象数据类型，只不过是 Dart 默认给我们提供的</p><h4 id="2-1-1、数字类型"><a href="#2-1-1、数字类型" class="headerlink" title="2.1.1、数字类型"></a>2.1.1、数字类型</h4><p>1）、在dart语言中数字类型主要有下面三种：</p><blockquote><p>int：整数类型</p><p>double：浮点数类型</p><p>num：数字类型，int和double都是它的子类</p></blockquote><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs abnf">var x <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-comment">;   // 初始化为 int 类型</span><br>var y <span class="hljs-operator">=</span> <span class="hljs-number">1.1</span><span class="hljs-comment">;  // 包含小数，初始化为 double</span><br><br>// 明确指定数据类型<br>double z <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-comment">;</span><br>num d <span class="hljs-operator">=</span> <span class="hljs-number">100</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>2）、数字类型和字符串类型互相转换</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">// 将 String 类型转换成 int 类型</span><br><span class="hljs-keyword">var</span> one = <span class="hljs-built_in">int</span>.parse(<span class="hljs-string">&#x27;1&#x27;</span>);<br><br><span class="hljs-comment">// 将 String 类型转换成 double 类型</span><br><span class="hljs-keyword">var</span> onePointOne = <span class="hljs-built_in">double</span>.parse(<span class="hljs-string">&#x27;1.1&#x27;</span>);<br><br><br><span class="hljs-comment">// 将 int 类型转换成 String 类型</span><br><span class="hljs-built_in">String</span> oneAsString = <span class="hljs-number">1.</span>toString();<br><br><span class="hljs-comment">// 将 double 类型转换成 String 类型, 保留两位小数</span><br><span class="hljs-built_in">String</span> piAsString = <span class="hljs-number">3.14159</span>.toStringAsFixed(<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><h4 id="2-1-2、字符串类型"><a href="#2-1-2、字符串类型" class="headerlink" title="2.1.2、字符串类型"></a>2.1.2、字符串类型</h4><p>1）、字符串类型使用单引号或者双引号包裹字符串都可以</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> s1 = <span class="hljs-string">&#x27;Hello&#x27;</span>;<br><span class="hljs-keyword">var</span> s2 = <span class="hljs-string">&quot;erdai&quot;</span>;<br></code></pre></td></tr></table></figure><h5 id="2-1-2-1、字符串内嵌表达式"><a href="#2-1-2-1、字符串内嵌表达式" class="headerlink" title="2.1.2.1、字符串内嵌表达式"></a>2.1.2.1、字符串内嵌表达式</h5><p>1）、Dart 支持在字符串中内嵌变量，或者干脆内嵌表达式</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">// 内嵌变量</span><br><span class="hljs-keyword">var</span> s3 = <span class="hljs-string">&#x27;你好: <span class="hljs-subst">$s2</span>&#x27;</span>;<br><br><span class="hljs-comment">// 内嵌表达式</span><br><span class="hljs-keyword">var</span> s4 = <span class="hljs-string">&quot;转大写：<span class="hljs-subst">$&#123;s2.toUpperCase()&#125;</span>&quot;</span>;<br></code></pre></td></tr></table></figure><h5 id="2-1-2-2、字符串相加（连接）"><a href="#2-1-2-2、字符串相加（连接）" class="headerlink" title="2.1.2.2、字符串相加（连接）"></a>2.1.2.2、字符串相加（连接）</h5><p>字符串相加，就是将两个字符串连接起来，dart 语言中有以下两种方式实现字符串连接：</p><p>1）、连续的字面字符串定义，默认会将字符串连接起来</p><p>2）、使用 + 加号连接字符串</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">void</span> main()&#123;<br>  <span class="hljs-comment">//1、连续的字面字符串定义，默认会将字符串连接起来</span><br>  <span class="hljs-built_in">var</span> str1 = <span class="hljs-string">&quot;erdai&quot;</span> <span class="hljs-string">&quot;666&quot;</span>;<br>  <span class="hljs-comment">//2、使用 + 加号连接字符串</span><br>  <span class="hljs-built_in">var</span> str2 = <span class="hljs-string">&quot;erdai&quot;</span> + <span class="hljs-string">&quot;666&quot;</span>;<br>  <span class="hljs-keyword">print</span>(str1);<br>  <span class="hljs-keyword">print</span>(str2);<br>&#125;<br><br><span class="hljs-comment">//打印结果</span><br>erdai666<br>erdai666<br></code></pre></td></tr></table></figure><h5 id="2-1-2-3、多行字符串定义"><a href="#2-1-2-3、多行字符串定义" class="headerlink" title="2.1.2.3、多行字符串定义"></a>2.1.2.3、多行字符串定义</h5><p>1）、使用 <strong>‘’’</strong> 三引号定义多行字符串，这种方式可以保留字符串的换行符</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk">void main() &#123;<br>  var s1 = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">这是第一行字符串。</span><br><span class="hljs-string">这是第二行字符串。</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>;<br>  print(s1);<br>&#125;<br><br><span class="hljs-regexp">//</span>打印结果<br>这是第一行字符串。<br>这是第二行字符串。<br></code></pre></td></tr></table></figure><h4 id="2-1-3、布尔类型"><a href="#2-1-3、布尔类型" class="headerlink" title="2.1.3、布尔类型"></a>2.1.3、布尔类型</h4><p>布尔类型就两种值：true 或者 false， 分别表示真和假</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">var isOk <span class="hljs-operator">=</span> false<span class="hljs-comment">;</span><br>bool status <span class="hljs-operator">=</span> true<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h4 id="2-1-4、枚举类型"><a href="#2-1-4、枚举类型" class="headerlink" title="2.1.4、枚举类型"></a>2.1.4、枚举类型</h4><p>1）、枚举类型其实就是一组常量的集合，都是只读的</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-comment">// 使用 enum 关键字，定义 Color 枚举类型，Color 包含了3个常量 red、green、blue</span><br><span class="hljs-keyword">enum</span> Color &#123; <span class="hljs-built_in">red</span>, <span class="hljs-built_in">green</span>, <span class="hljs-built_in">blue</span> &#125;<br><br><span class="hljs-comment">// 读取 Color.blue 枚举常量</span><br>var aColor = Color.<span class="hljs-property">blue</span>;<br><br><span class="hljs-comment">// 使用 switch 语句判断 aColor 变量值</span><br><span class="hljs-title function_">switch</span> (aColor) &#123;<br>  <span class="hljs-keyword">case</span> Color.<span class="hljs-property">red</span>:  <span class="hljs-comment">// 使用枚举常量作为检测条件，aColor == Color.red 则成立。</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Red as roses!&#x27;</span>);<br>    <span class="hljs-keyword">break</span>;<br>  <span class="hljs-keyword">case</span> Color.<span class="hljs-property">green</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Green as grass!&#x27;</span>);<br>    <span class="hljs-keyword">break</span>;<br>  <span class="hljs-keyword">default</span>: <span class="hljs-comment">// 默认条件</span><br>    <span class="hljs-built_in">print</span>(aColor); <span class="hljs-comment">// &#x27;Color.blue&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>2）、枚举常量都有一个从 0 开始数字编号，第一个常量是 0，第二个是 1，以此类推</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">void</span> main() &#123;<br>  <span class="hljs-keyword">print</span>(Color.green.<span class="hljs-keyword">index</span>);<br>  <span class="hljs-keyword">print</span>(Color.blue.<span class="hljs-keyword">index</span>);<br>&#125;<br><br><span class="hljs-comment">//打印结果</span><br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h3 id="2-2、运算符"><a href="#2-2、运算符" class="headerlink" title="2.2、运算符"></a>2.2、运算符</h3><p>运算符这一块，除了级联调用是 Java 和 Kotlin 所没有的，其他运算符基本类似</p><h4 id="2-2-1、级联调用"><a href="#2-2-1、级联调用" class="headerlink" title="2.2.1、级联调用"></a>2.2.1、级联调用</h4><p>1）、级联调用就是通过 <strong>.. (两个连续的点)</strong> 连续调用对象的属性和方法</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk">querySelector(<span class="hljs-string">&#x27;#confirm&#x27;</span>) <span class="hljs-regexp">//</span> 通过 querySelector 查询获得一个对象<br>  ..text = <span class="hljs-string">&#x27;Confirm&#x27;</span> <span class="hljs-regexp">//</span> 设置对象 text 属性<br>  ..classes.add(<span class="hljs-string">&#x27;important&#x27;</span>);  <span class="hljs-regexp">//</span> 调用对象的 classes 属性的 add 函数<br><br><span class="hljs-regexp">//</span>等价如下代码<br><br><span class="hljs-regexp">//</span> 通过 querySelector 查询获得一个对象<br>var button = querySelector(<span class="hljs-string">&#x27;#confirm&#x27;</span>);<br><span class="hljs-regexp">//</span> 设置对象 text 属性<br>button.text = <span class="hljs-string">&#x27;Confirm&#x27;</span>;<br><span class="hljs-regexp">//</span> 调用对象的 classes 属性的 add 函数<br>button.classes.add(<span class="hljs-string">&#x27;important&#x27;</span>);<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：大家先关注语法即可</p><h4 id="2-2-2、赋值运算符"><a href="#2-2-2、赋值运算符" class="headerlink" title="2.2.2、赋值运算符"></a>2.2.2、赋值运算符</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span><span class="hljs-number">1</span>、使用 = 进行赋值<br>a = <span class="hljs-number">100</span>;<br><br><span class="hljs-regexp">//</span><span class="hljs-number">2</span>、复合赋值运算符<br>a *= <span class="hljs-number">3</span>; <span class="hljs-regexp">//</span> 等价于 a = a * <span class="hljs-number">3</span><br>a -= <span class="hljs-number">3</span>; <span class="hljs-regexp">//</span> 等价于 a = a - <span class="hljs-number">3</span><br>a += <span class="hljs-number">3</span>; <span class="hljs-regexp">//</span> 等价于 a = a + <span class="hljs-number">3</span><br>a <span class="hljs-regexp">/= 3; /</span><span class="hljs-regexp">/ 等价于 a = a /</span> <span class="hljs-number">3</span><br>a %= <span class="hljs-number">3</span>; <span class="hljs-regexp">//</span> 等价于 a = a % <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h4 id="2-2-3、算数运算符"><a href="#2-2-3、算数运算符" class="headerlink" title="2.2.3、算数运算符"></a>2.2.3、算数运算符</h4><table><thead><tr><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>+</td><td>加</td></tr><tr><td>-</td><td>减</td></tr><tr><td>-expr</td><td>算数取反</td></tr><tr><td>*</td><td>乘</td></tr><tr><td>&#x2F;</td><td>除</td></tr><tr><td>~&#x2F;</td><td>除法，结果取整</td></tr><tr><td>%</td><td>求余</td></tr><tr><td>++</td><td>支持前置自增和后置自增</td></tr><tr><td>–</td><td>支持前置自减和后置自减</td></tr></tbody></table><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> a = <span class="hljs-number">5</span><br>var a = <span class="hljs-number">2</span> + <span class="hljs-number">3</span>;<br><span class="hljs-regexp">//</span> a1 = -<span class="hljs-number">1</span><br>var a1 = <span class="hljs-number">2</span> - <span class="hljs-number">3</span>;<br><span class="hljs-regexp">//</span> a2 = <span class="hljs-number">6</span><br>var a2 = <span class="hljs-number">2</span> * <span class="hljs-number">3</span>;<br><span class="hljs-regexp">//</span> a3 = <span class="hljs-number">2.5</span><br>var a3 = <span class="hljs-number">5</span> / <span class="hljs-number">2</span>;<br><span class="hljs-regexp">//</span> 整除，a4 = <span class="hljs-number">2</span><br>var a4 = <span class="hljs-number">5</span> ~/ <span class="hljs-number">2</span>;<br><span class="hljs-regexp">//</span> 求余数 a5 = <span class="hljs-number">1</span><br>var a5 = <span class="hljs-number">5</span> % <span class="hljs-number">2</span>;<br><span class="hljs-regexp">//</span>a++ 和 ++a 区别：a++ 先用在加，++a先加在用<br>a++; <span class="hljs-regexp">//</span> 相当于 a = a + <span class="hljs-number">1</span><br>++a; <br>a--; <span class="hljs-regexp">//</span> 相当于 a = a - <span class="hljs-number">1</span><br>--a;<br></code></pre></td></tr></table></figure><h4 id="2-2-4、关系运算符"><a href="#2-2-4、关系运算符" class="headerlink" title="2.2.4、关系运算符"></a>2.2.4、关系运算符</h4><p>关系运运算符常用于条件表达式中，判断条件是否成立</p><table><thead><tr><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>&#x3D;&#x3D;</td><td>判断两个值是否相等</td></tr><tr><td>!&#x3D;</td><td>判断两个值是否不相等</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td></tr></tbody></table><h4 id="2-2-5、类型测试运算符"><a href="#2-2-5、类型测试运算符" class="headerlink" title="2.2.5、类型测试运算符"></a>2.2.5、类型测试运算符</h4><table><thead><tr><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>as</td><td>用于类型转换，将一个对象类型转换成另外一种对象类型，一般用于子类对象转换成父类对象。</td></tr><tr><td>is</td><td>用于检测一个变量是否属于某种对象类型</td></tr><tr><td>is!</td><td>用于检测一个变量不属于某种对象类型</td></tr></tbody></table><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 如果 emp 变量是 Person 类型则条件为 true<br><span class="hljs-keyword">if</span> (emp is Person) &#123;<br>  <span class="hljs-regexp">//</span> 忽略代码<br>&#125;<br><br><span class="hljs-regexp">//</span> 永远返回 true, 因为所有类型都继承了 Object。<br><span class="hljs-keyword">if</span> (emp is Object) &#123;<br>    <span class="hljs-regexp">//</span> 忽略代码<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：如果变量是某个类的子类的实例，那么这个变量也属于父类类型，is 条件返回 true</p><h4 id="2-2-6、逻辑运算符"><a href="#2-2-6、逻辑运算符" class="headerlink" title="2.2.6、逻辑运算符"></a>2.2.6、逻辑运算符</h4><table><thead><tr><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>!expr</td><td>表达式条件取反</td></tr><tr><td>||</td><td>逻辑或</td></tr><tr><td>&amp;&amp;</td><td>逻辑与</td></tr></tbody></table><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>常用于条件语句组合表达式<br><span class="hljs-keyword">if</span> (!done &amp;&amp; (col == <span class="hljs-number">0</span> || col == <span class="hljs-number">3</span>)) &#123;<br>  <span class="hljs-regexp">//</span>...<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-7、位运算符"><a href="#2-2-7、位运算符" class="headerlink" title="2.2.7、位运算符"></a>2.2.7、位运算符</h4><p>二进制位运算符</p><table><thead><tr><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>&amp;</td><td>与</td></tr><tr><td>|</td><td>或</td></tr><tr><td>^</td><td>异或</td></tr><tr><td>~expr</td><td>按位取反</td></tr><tr><td>&lt;&lt;</td><td>左移</td></tr><tr><td>&gt;&gt;</td><td>右移</td></tr></tbody></table><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tap">// a = 256<br>var a =<span class="hljs-number"> 1 </span>&lt;&lt; 8; //<span class="hljs-number"> 1 </span>左移<span class="hljs-number"> 8 </span>位相当于：1 *<span class="hljs-number"> 2 </span>的<span class="hljs-number"> 8 </span>次方<br></code></pre></td></tr></table></figure><h4 id="2-2-8、条件运算符"><a href="#2-2-8、条件运算符" class="headerlink" title="2.2.8、条件运算符"></a>2.2.8、条件运算符</h4><p>Dart 中有两种条件运算符：</p><p>1、语法规则：condition ? expr1 : expr2 ，类似 Java 三目运算符。condition 表达式为真，则执行并返回 expr1 的值， 否则执行 expr2</p><p>2、语法规则：expr1 ?? expr2 ，类似 Kotlin 的 ?: 。如果 expr1 不等于 null, 则执行 expr1 并返回 expr1 的值，否则执行并返回 expr2 的值</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 如果isPublic为真，visibility = <span class="hljs-string">&#x27;public&#x27;</span> 否则 visibility = <span class="hljs-string">&#x27;private&#x27;</span><br>var visibility = isPublic ? <span class="hljs-string">&#x27;public&#x27;</span> : <span class="hljs-string">&#x27;private&#x27;</span>;<br><br><span class="hljs-regexp">//</span> 这种语法在处理参数默认值非常有用。<br><span class="hljs-regexp">//</span> 如果name不等于null, 则payerName = name 否则payerName = <span class="hljs-string">&#x27;Guest&#x27;</span><br>String payerName = name ?? <span class="hljs-string">&#x27;Guest&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="三、数组和集合"><a href="#三、数组和集合" class="headerlink" title="三、数组和集合"></a>三、数组和集合</h2><h3 id="3-1、List-数组"><a href="#3-1、List-数组" class="headerlink" title="3.1、List 数组"></a>3.1、List 数组</h3><h4 id="3-1-1、定义"><a href="#3-1-1、定义" class="headerlink" title="3.1.1、定义"></a>3.1.1、定义</h4><p>1）、与 Java 的数组类型不同，Dart 中的数组类型就是 List，它是泛型类型数据结构，支持任意数据类型的数组</p><p>2）、List 数组定义的元素有序可重复，类似 Java 的 List 集合</p><p>3）、Dart 中 List 数组主要分为两种类型：</p><p>1、可变长度数组</p><p>2、固定长度数组</p><p>不管是哪种类型的数组，他们的操作方式是一样的</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span><span class="hljs-number">1</span>、可变长度数组<br><span class="hljs-regexp">//</span>定义一个 int 类型的可变数组<br>List&lt;int&gt; a = []; <span class="hljs-regexp">//</span>等价：var a = &lt;int&gt;[];<br><br><span class="hljs-regexp">//</span>定义一个 String 类型的可变数组<br>var strs = &lt;String&gt;[]; <span class="hljs-regexp">//</span>等价 List&lt;String&gt; strs = [];<br><br><span class="hljs-regexp">//</span>如下这种定义方式，编译器会给我们推断出是字符串类型的可变数组<br>var strs = [<span class="hljs-string">&#x27;字符串&#x27;</span>];<br></code></pre></td></tr></table></figure><p>1、熟悉 Java 的人都知道，上述这种定义就是泛型类型的语法，&lt;&gt; 符号定义的是 List 的元素类型</p><p>2、上述定义数组我们并没有指定数组大小，因此他们定义的都是可变数组，可变数组可以往数组中插入不限制数量的元素 （只要没超过内存限制）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span><span class="hljs-number">2</span>、固定长度数组<br><span class="hljs-regexp">//</span>定义一个固定长度为 <span class="hljs-number">3</span> ，类型为 int 的数组<br>var list = List.filled(<span class="hljs-number">3</span>,<span class="hljs-number">0</span>);<br><br><span class="hljs-regexp">//</span>测试一<br>void main() &#123;<br>  <span class="hljs-regexp">//</span>定义一个固定长度为 <span class="hljs-number">3</span> ，类型为 int 的数组<br>  var list = List.filled(<span class="hljs-number">3</span>,<span class="hljs-number">0</span>);<br>  list[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>  list[<span class="hljs-number">1</span>] = <span class="hljs-number">2</span>;<br>  list[<span class="hljs-number">2</span>] = <span class="hljs-number">3</span>;<br>  <span class="hljs-regexp">//</span>此时如果我们添加第 <span class="hljs-number">4</span> 个元素，则会报数组下标越界异常<br>  <span class="hljs-regexp">//</span>list[<span class="hljs-number">3</span>] = <span class="hljs-number">4</span>; <span class="hljs-regexp">//</span>数组下标越界<br>  <span class="hljs-keyword">for</span> (var value <span class="hljs-keyword">in</span> list) &#123;<br>    print(value);<br>  &#125;<br>&#125;<br><span class="hljs-regexp">//</span>打印结果<br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br>  <br><span class="hljs-regexp">//</span>测试二：<br>void main() &#123;<br>  <span class="hljs-regexp">//</span>定义一个固定长度为 <span class="hljs-number">2</span> ，类型为 String 的数组<br>  var list = List.filled(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;&quot;</span>);<br>  list[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;erdai&quot;</span>;<br>  list[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;666&quot;</span>;<br><br>  <span class="hljs-keyword">for</span> (var value <span class="hljs-keyword">in</span> list) &#123;<br>    print(value);<br>  &#125;<br>&#125;<br><span class="hljs-regexp">//</span>打印结果<br>erdai<br><span class="hljs-number">666</span><br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>1、上述 filled 方法的两个参数：第一个表示数组长度，第二个表示存放的元素类型初始值</p><p>2、固定长度的数组，只能通过数组下标的方式读写数组，不能使用 add，insert 方法修改数组，否则会报错</p><h4 id="3-1-2、伸展运算符"><a href="#3-1-2、伸展运算符" class="headerlink" title="3.1.2、伸展运算符"></a>3.1.2、伸展运算符</h4><p>如果我们想将一个 List 数组的元素填充到另外一个数组去，我们可以使用伸展运算符 <strong>…</strong> ，如下：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> list = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">var</span> list2 = [<span class="hljs-number">0</span>, ...list]; <span class="hljs-comment">// 将 list 数组的所有元素一个个展开来，插入到 list2 中</span><br><span class="hljs-comment">// 等价代码 var list2 = [0, 1, 2, 3]</span><br></code></pre></td></tr></table></figure><h4 id="3-1-3、常用-Api-介绍"><a href="#3-1-3、常用-Api-介绍" class="headerlink" title="3.1.3、常用 Api 介绍"></a>3.1.3、常用 Api 介绍</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span><span class="hljs-number">1</span>、首先定义一个 int 类型的可变数组<br>var a = &lt;int&gt;[];<br><br><span class="hljs-regexp">//</span><span class="hljs-number">2</span>、往数组尾巴添加元素 a:[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>a.add(<span class="hljs-number">1</span>);<br>a.add(<span class="hljs-number">2</span>);<br>a.add(<span class="hljs-number">3</span>);<br><br><span class="hljs-regexp">//</span><span class="hljs-number">3</span>、修改第一个元素的值 a:[<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>a[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br><br><span class="hljs-regexp">//</span><span class="hljs-number">4</span>、在数组 <span class="hljs-number">0</span> 位置，插入 <span class="hljs-number">100</span> a:[<span class="hljs-number">100</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>a.insert(<span class="hljs-number">0</span>,<span class="hljs-number">100</span>);<br><br><span class="hljs-regexp">//</span><span class="hljs-number">5</span>、删除一个元素 a:[<span class="hljs-number">100</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>]<br><span class="hljs-regexp">//</span>根据元素删除<br>a.remove(<span class="hljs-number">3</span>);<br><br><span class="hljs-regexp">//</span>根据下标删除 a:[<span class="hljs-number">100</span>,<span class="hljs-number">2</span>]<br>a.removeAt(<span class="hljs-number">1</span>);<br><br><span class="hljs-regexp">//</span><span class="hljs-number">6</span>、获取数组大小<br>print(a.length); <span class="hljs-regexp">//</span>打印：<span class="hljs-number">2</span><br>  <br><span class="hljs-regexp">//</span><span class="hljs-number">7</span>、数组排序：默认数组从小到大排序 a:[<span class="hljs-number">2</span>,<span class="hljs-number">100</span>]<br>a.sort();<br><br><span class="hljs-regexp">//</span><span class="hljs-number">8</span>、判断数组是否包含指定元素<br>a.contains(<span class="hljs-number">2</span>); <span class="hljs-regexp">//</span> true<br><br><span class="hljs-regexp">//</span><span class="hljs-number">9</span>、清空 List，删除所有数据 a:[]<br>a.clear();<br></code></pre></td></tr></table></figure><h3 id="3-2、Set-集合"><a href="#3-2、Set-集合" class="headerlink" title="3.2、Set 集合"></a>3.2、Set 集合</h3><h4 id="3-2-1、定义"><a href="#3-2-1、定义" class="headerlink" title="3.2.1、定义"></a>3.2.1、定义</h4><p>1）、Dart 中的 Set 是无序集合类型，Set 跟 List 都能保存一组数据，区别就是 Set 的元素都是唯一的，和 Java 的 Set 集合类似</p><p>2）、Set 支持任意类型数据，主要有下面三种方式初始化：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cmake">//<span class="hljs-number">1</span>、方式一：使用 &#123;&#125; 定义一个 <span class="hljs-keyword">String</span> 类型的 <span class="hljs-keyword">Set</span><br>var strSet = &#123;<span class="hljs-string">&quot;str&quot;</span>&#125;;<br><br>//<span class="hljs-number">2</span>、方式二：定义一个空的 <span class="hljs-keyword">String</span> 类型的 <span class="hljs-keyword">Set</span><br>var names = &lt;<span class="hljs-keyword">String</span>&gt;&#123;&#125;;<br><br>//<span class="hljs-number">3</span>、方式三：通过 <span class="hljs-keyword">Set</span> 对象定义一个可以保存 <span class="hljs-keyword">String</span> 类型的 <span class="hljs-keyword">Set</span><br>var names = <span class="hljs-keyword">Set</span>&lt;<span class="hljs-keyword">String</span>&gt;();<br></code></pre></td></tr></table></figure><h4 id="3-2-2、常用-Api-介绍"><a href="#3-2-2、常用-Api-介绍" class="headerlink" title="3.2.2、常用 Api 介绍"></a>3.2.2、常用 Api 介绍</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span><span class="hljs-number">1</span>、首先定义一个 set 集合<br>var names = &lt;String&gt;&#123;&#125;;<br><br><span class="hljs-regexp">//</span><span class="hljs-number">2</span>、添加一个元素 names:&#123;<span class="hljs-string">&quot;Dart&quot;</span>&#125;<br>names.add(<span class="hljs-string">&quot;Dart&quot;</span>);<br><br><span class="hljs-regexp">//</span><span class="hljs-number">3</span>、添加一个 List 数组 names:&#123;<span class="hljs-string">&quot;Dart&quot;</span>,<span class="hljs-string">&quot;Flutter&quot;</span>&#125;<br>var titles = [<span class="hljs-string">&quot;Flutter&quot;</span>];<br>names.addAll(titles);<br><br><span class="hljs-regexp">//</span><span class="hljs-number">4</span>、获取 Set 大小<br>print(names.length); <span class="hljs-regexp">//</span>打印：<span class="hljs-number">2</span><br><br><span class="hljs-regexp">//</span><span class="hljs-number">5</span>、删除元素<br><span class="hljs-regexp">//</span>根据元素进行删除 names:&#123;<span class="hljs-string">&quot;Dart&quot;</span>&#125;<br>names.remove(<span class="hljs-string">&quot;Flutter&quot;</span>);<br><br><span class="hljs-regexp">//</span><span class="hljs-number">6</span>、判断 Set 是否包含指定元素<br>names.contains(<span class="hljs-string">&quot;Dart&quot;</span>); <span class="hljs-regexp">//</span>true<br><br><span class="hljs-regexp">//</span><span class="hljs-number">7</span>、清空 Set 所有元素 names:&#123;&#125;<br>names.clear();<br></code></pre></td></tr></table></figure><h3 id="3-3、Map-集合"><a href="#3-3、Map-集合" class="headerlink" title="3.3、Map 集合"></a>3.3、Map 集合</h3><h4 id="3-3-1、定义"><a href="#3-3-1、定义" class="headerlink" title="3.3.1、定义"></a>3.3.1、定义</h4><p>1）、Dart 中 map 类型，就是一种哈希类型数据，map 类型的数据都是由 key 和 value 两个值组成，key 是唯一的，value 不必唯一，读写数据都是通过 key 进行，map 也是泛型类型，支持任意类型数据，key 和 value 可以是任意类型数据</p><p>2）、map 主要有以下四种方式初始化：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">//1、方式一：直接以key, value 的方式初始化一个 map 类型变量， key 和 value 都是 String 类型</span><br><span class="hljs-keyword">var</span> map1 = &#123;<br>  <span class="hljs-comment">//格式  Key: Value</span><br>  <span class="hljs-string">&#x27;first&#x27;</span>: <span class="hljs-string">&#x27;partridge&#x27;</span>,<br>  <span class="hljs-string">&#x27;second&#x27;</span>: <span class="hljs-string">&#x27;turtledoves&#x27;</span>,<br>  <span class="hljs-string">&#x27;fifth&#x27;</span>: <span class="hljs-string">&#x27;golden rings&#x27;</span><br>&#125;;<br><br><span class="hljs-comment">//2、方式二：直接通过 Map 类构造一个 map 类型变量, key 类型为 String, value 类型为 int</span><br><span class="hljs-keyword">var</span> map2 = <span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">int</span>&gt;();<br><br><span class="hljs-comment">//3、方式三：定义一个 key 类型为 String, value 类型为 int 的空 Map</span><br><span class="hljs-keyword">var</span> map3 = &lt;<span class="hljs-built_in">String</span>,<span class="hljs-built_in">int</span>&gt;&#123;&#125;<br><br><span class="hljs-comment">//4、方式四：定义一个绕过编译检查的动态 key，value 类型 Map</span><br><span class="hljs-keyword">var</span> map4 = <span class="hljs-built_in">Map</span>(); <span class="hljs-comment">//等价于：var map4 = &#123;&#125;;</span><br></code></pre></td></tr></table></figure><h4 id="3-3-2、常用-Api-介绍"><a href="#3-3-2、常用-Api-介绍" class="headerlink" title="3.3.2、常用 Api 介绍"></a>3.3.2、常用 Api 介绍</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span><span class="hljs-number">1</span>、首先定义一个 map<br>var map = &#123;&#125;;<br><br><span class="hljs-regexp">//</span><span class="hljs-number">2</span>、向 map 添加数据 map:&#123;<span class="hljs-string">&quot;key1&quot;</span>:<span class="hljs-string">&quot;value1&quot;</span>,<span class="hljs-string">&quot;key2&quot;</span>:<span class="hljs-string">&quot;value2&quot;</span>&#125;<br><span class="hljs-regexp">//</span>使用 [] 操作符读写 map 数据，语法：map变量[key]<br>map[<span class="hljs-string">&quot;key1&quot;</span>] = <span class="hljs-string">&quot;value1&quot;</span>;<br>map[<span class="hljs-string">&quot;key2&quot;</span>] = <span class="hljs-string">&quot;value2&quot;</span>;<br><br><span class="hljs-regexp">//</span><span class="hljs-number">3</span>、查询 map：使用[]操作符，根据 key 查询对应的 value 值，如果 key 不存在则返回 null<br>var v1 = map[<span class="hljs-string">&quot;key1&quot;</span>];<br>var v2 = map[<span class="hljs-string">&quot;key2&quot;</span>];<br><br><span class="hljs-regexp">//</span><span class="hljs-number">4</span>、更新 map 数据：根据 key 更新 map 数据和添加 map 数据用法一样<br><span class="hljs-regexp">//</span>如果 key 值不存在则添加，否则更新 key 的数据<br><span class="hljs-regexp">//m</span>ap:&#123;<span class="hljs-string">&quot;key1&quot;</span>:<span class="hljs-string">&quot;value1&quot;</span>,<span class="hljs-string">&quot;key2&quot;</span>:<span class="hljs-string">&quot;value2&quot;</span>&#125;<br>map[<span class="hljs-string">&quot;key2&quot;</span>] = <span class="hljs-string">&quot;erdai&quot;</span>;<br><br><span class="hljs-regexp">//</span><span class="hljs-number">5</span>、获取 map 大小<br>print(map.length); <span class="hljs-regexp">//</span>打印：<span class="hljs-number">2</span><br><br><span class="hljs-regexp">//</span><span class="hljs-number">6</span>、遍历 map<br>map.forEach((k, v) &#123;<br>  print(<span class="hljs-string">&#x27;$k $v&#x27;</span>);<br>&#125;);<br><br><span class="hljs-regexp">//</span><span class="hljs-number">7</span>、删除 map 数据：通过 remove 函数可以删除指定的 key 数据<br><span class="hljs-regexp">//m</span>ap:&#123;<span class="hljs-string">&quot;key2&quot;</span>:<span class="hljs-string">&quot;value2&quot;</span>&#125;<br>map.remove(<span class="hljs-string">&quot;key1&quot;</span>);<br><br><span class="hljs-regexp">//</span><span class="hljs-number">8</span>、清空所有 map 数据 map:&#123;&#125;<br>map.clear();<br></code></pre></td></tr></table></figure><h2 id="四、程序的逻辑控制"><a href="#四、程序的逻辑控制" class="headerlink" title="四、程序的逻辑控制"></a>四、程序的逻辑控制</h2><p>这个章节相对简单，我们就简单举个例子</p><h3 id="4-1、if-else"><a href="#4-1、if-else" class="headerlink" title="4.1、if-else"></a>4.1、if-else</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">if</span> (isRaining()) &#123;<br>  <span class="hljs-regexp">//</span> 代码<span class="hljs-number">1</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isSnowing()) &#123;<br>  <span class="hljs-regexp">//</span> 代码<span class="hljs-number">2</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-regexp">//</span> 代码<span class="hljs-number">3</span><br>&#125;<br></code></pre></td></tr></table></figure><p>else是可选的，根据需要组合即可</p><h3 id="4-2、for-i-和-for-in-循环"><a href="#4-2、for-i-和-for-in-循环" class="headerlink" title="4.2、for-i 和 for-in 循环"></a>4.2、for-i 和 for-in 循环</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 定义 int 数组<br>var list = [<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">3</span>];<br><br><span class="hljs-regexp">//</span><span class="hljs-number">1</span>、<span class="hljs-keyword">for</span>-i 循环遍历数组<br><span class="hljs-keyword">for</span> (var i = <span class="hljs-number">0</span>; i &lt; list.length; i++) &#123;<br>  <span class="hljs-regexp">//</span> 打印数组元素<br>  print(list[i]); <br>&#125;<br><br><span class="hljs-regexp">//</span><span class="hljs-number">2</span>、<span class="hljs-keyword">for</span>-<span class="hljs-keyword">in</span> 循环遍历数组变量 list<br><span class="hljs-keyword">for</span> (var v <span class="hljs-keyword">in</span> list) &#123;<br>  <span class="hljs-regexp">//</span> 打印数组元素 v<br>  print(v); <br>&#125;<br><br><span class="hljs-regexp">//</span>打印结果<br><span class="hljs-number">5</span><br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-number">6</span><br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="4-3、switch语句"><a href="#4-3、switch语句" class="headerlink" title="4.3、switch语句"></a>4.3、switch语句</h3><p>1）、switch 语句的作用跟 if 语句类似，用于检测各种条件是否成立，然后执行相应分支的代码</p><p>2）、switch 支持检测 int，String 类型变量的检测，当然如果你自定义的类重载了 &#x3D;&#x3D; 操作符，也可以在 switch 条件中使用</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 条件状态变量<br>var command = <span class="hljs-string">&#x27;OPEN&#x27;</span>;<br><br>switch (command) &#123; <span class="hljs-regexp">//</span> 需要检测的变量 <br>  case <span class="hljs-string">&#x27;CLOSED&#x27;</span>:  <span class="hljs-regexp">//</span>case 语句用于设置检测条件<br>    executeClosed(); <span class="hljs-regexp">//</span> 如果 command = <span class="hljs-string">&#x27;CLOSED&#x27;</span>，执行当前分支代码。<br>    <span class="hljs-keyword">break</span>; <span class="hljs-regexp">//</span> 结束当前分支执行逻辑<br>  case <span class="hljs-string">&#x27;PENDING&#x27;</span>:<br>    executePending();<br>    <span class="hljs-keyword">break</span>;<br>  case <span class="hljs-string">&#x27;APPROVED&#x27;</span>:<br>    executeApproved();<br>    <span class="hljs-keyword">break</span>;<br>  default: <span class="hljs-regexp">//</span> 如果上面的 case 语句都没有匹配成功，则执行 default 分支的逻辑。<br>    executeUnknown();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-4、while-和-do-while-循环语句"><a href="#4-4、while-和-do-while-循环语句" class="headerlink" title="4.4、while 和 do-while 循环语句"></a>4.4、while 和 do-while 循环语句</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span><span class="hljs-number">1</span>、<span class="hljs-keyword">while</span> 循环语句例子<br>void main() &#123;<br>  <span class="hljs-regexp">//</span> 定义 int 数组<br>  var list = [<span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>];<br><br>  <span class="hljs-regexp">//</span> 循环遍历数组<br>  var i = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span> (i &lt; list.length) &#123;<br>    <span class="hljs-regexp">//</span> 条件为 true 则执行循环体代码<br>    print(list[i]); <span class="hljs-regexp">//</span> 打印数组元素<br>    i++; <span class="hljs-regexp">//</span> 数组下标递增<br>  &#125;<br>&#125;<br><br><span class="hljs-regexp">//</span><span class="hljs-number">2</span>、<span class="hljs-keyword">do</span>-<span class="hljs-keyword">while</span> 循环语句例子<br>void main() &#123;<br>  <span class="hljs-regexp">//</span> 定义 int 数组<br>  var list = [<span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>];<br><br>  <span class="hljs-regexp">//</span> 循环遍历数组<br>  var i = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">do</span> &#123;<br>    print(list[i]);<br>    i++;<br>  &#125; <span class="hljs-keyword">while</span> (i &lt; list.length); <span class="hljs-regexp">//</span> 先执行循环体代码后再检测循环条件，条件为 true 则继续执行循环<br>&#125;<br><br><span class="hljs-regexp">//</span>打印结果<br><span class="hljs-number">5</span><br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-number">6</span><br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h2 id="五、面向对象编程"><a href="#五、面向对象编程" class="headerlink" title="五、面向对象编程"></a>五、面向对象编程</h2><p>Dart 是面向对象编程语言，对象都是由类创建的，所有类都是由 Object 类派生出来的子类，除了 Object , 所有类只有一个父类（即只能继承一个父类）</p><p>尽管 Dart 语言中一个类只能继承一个父类，但是 Dart 语言提供了 mixin 机制，可以复用多个类，达到类似多继承的效果</p><h3 id="5-1、类和对象"><a href="#5-1、类和对象" class="headerlink" title="5.1、类和对象"></a>5.1、类和对象</h3><p>1）、Dart 没有 public、protected 和 private 等成员访问限定符。默认情况下属性，方法，类等都是共有的，类似 Java 的 public。如果想要表示私有，则以下划线 _ 开头去命名</p><p>2）、Dart 中实例化对象和 Java 类似，new 关键字可写可不写</p><p>3）、当我们在类中创建私有属性时，我们应该给私有属性提供 getter 和 setter 方法供外界访问：</p><p>get 方法语法格式：<strong>返回值类型 get 方法名 { 方法体 }</strong></p><p>set 方法语法格式：<strong>set 方法名 ( 参数 ) { 方法体 }</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>  <span class="hljs-comment">// 定义类成员属性，默认类的成员属性和方法都是共有的，类似 java 的 public</span><br>  <span class="hljs-keyword">var</span> name;<br>  <span class="hljs-comment">// 以下划线 ( _ ) 开头命名的属性代表私有成员属性</span><br>  <span class="hljs-keyword">var</span> _age;<br><br>  <span class="hljs-comment">// 跟类名同名的方法，为构造方法</span><br>  <span class="hljs-comment">// 这里自定义了一个携带参数的构造方法。</span><br>  <span class="hljs-comment">// 如果我们没有自定义构造方法，会自动生成一个不带参数的默认构造方法</span><br>  Person(<span class="hljs-keyword">var</span> name, <span class="hljs-keyword">var</span> age) &#123;<br>    <span class="hljs-comment">// 因为参数名和类属性名同名，可以使用this引用当前对象</span><br>    <span class="hljs-keyword">this</span>.name = name;<br>    <span class="hljs-comment">// 可以忽略this关键字，直接引用类成员</span><br>    _age = age;<br>  &#125;<br>  <br>  <span class="hljs-comment">//为 _age 提供 getter 和 setter 方法</span><br>  <span class="hljs-built_in">int</span> <span class="hljs-keyword">get</span> age&#123;<br>    <span class="hljs-keyword">return</span> _age;<br>  &#125;<br>  <span class="hljs-comment">//getter 方法还可以简化为此写法：int get age =&gt; _age;</span><br><br>  <span class="hljs-keyword">set</span> age(<span class="hljs-built_in">int</span> age)&#123;<br>    _age = age;<br>  &#125;<br><br>  <span class="hljs-comment">// 定一个 public 的方法</span><br>  <span class="hljs-built_in">String</span> greet(<span class="hljs-built_in">String</span> who) =&gt; <span class="hljs-string">&#x27;Hello, <span class="hljs-subst">$who</span>. I am <span class="hljs-subst">$name</span>, my age is <span class="hljs-subst">$_age</span> !&#x27;</span>;<br>&#125;<br><br><span class="hljs-keyword">void</span> main()&#123;<br>  <span class="hljs-keyword">var</span> person = Person(<span class="hljs-string">&quot;erdai&quot;</span>,<span class="hljs-number">18</span>);<br>  <span class="hljs-comment">//下面这句就是调用了 age 的 set 方法</span><br>  person.age = <span class="hljs-number">20</span>;<br>  <span class="hljs-keyword">var</span> greet = person.greet(<span class="hljs-string">&quot;lucy&quot;</span>);<br>  <span class="hljs-built_in">print</span>(greet);<br>&#125;<br><br><span class="hljs-comment">//打印结果</span><br>Hello, lucy. I am erdai, my age <span class="hljs-keyword">is</span> <span class="hljs-number">20</span> !<br></code></pre></td></tr></table></figure><h3 id="5-2、构造方法"><a href="#5-2、构造方法" class="headerlink" title="5.2、构造方法"></a>5.2、构造方法</h3><p>如果我们没有自定义一个构造方法，会自动生成一个不带参数的默认构造方法</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">// 这个类会生成默认的构造方法</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-keyword">String</span> name;<br>&#125;<br><br><span class="hljs-comment">// 通过默认构造方法实例化对象</span><br><span class="hljs-keyword">var</span> p = Person();<br></code></pre></td></tr></table></figure><h4 id="5-2-1、自定义构造方法"><a href="#5-2-1、自定义构造方法" class="headerlink" title="5.2.1、自定义构造方法"></a>5.2.1、自定义构造方法</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span>&#123;<br>  <span class="hljs-keyword">var</span> x,y;<br>  <br>  Point(<span class="hljs-keyword">var</span> x,<span class="hljs-keyword">var</span> y)&#123;<br>    <span class="hljs-comment">// 通过this访问成员属性，当然一般除非出现命名冲突，否则可以忽略this</span><br>    <span class="hljs-keyword">this</span>.x = x;<br>    <span class="hljs-keyword">this</span>.y = y;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于构造方法中，简单的赋值操作，Dart语言提供了更简洁的语法，如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span>&#123;<br>  <span class="hljs-keyword">var</span> x,y;<br><br>  <span class="hljs-comment">// 直接将构造方法的第一个参数赋值给this.x, 第二个参数赋值给this.y</span><br>  Point(<span class="hljs-keyword">this</span>.x,<span class="hljs-keyword">this</span>.y);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-2-2、初始化参数列表"><a href="#5-2-2、初始化参数列表" class="headerlink" title="5.2.2、初始化参数列表"></a>5.2.2、初始化参数列表</h4><p>Dart 还为构造方法提供了 <strong>参数初始化列表</strong> 的语法，用于初始化对象参数</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span>&#123;<br>  <span class="hljs-keyword">var</span> x,y;<br><br>  <span class="hljs-comment">// 冒号 : 后面的表达式就是参数初始化列表，每个表达式用逗号分隔</span><br>  Point(<span class="hljs-keyword">var</span> x,<span class="hljs-keyword">var</span> y): <span class="hljs-keyword">this</span>.x = x,<span class="hljs-keyword">this</span>.y = y&#123;<br>    <span class="hljs-comment">// 使用参数初始化列表初始化对象属性，这里如果没有别的初始化工作要做，可以是空的</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-2-3、命名构造方法"><a href="#5-2-3、命名构造方法" class="headerlink" title="5.2.3、命名构造方法"></a>5.2.3、命名构造方法</h4><p>1）、Dart 可以使用命名构造方法语法，创建多个构造方法，命名构造方法语法格式： <strong>类名.构造方法名(参数列表)</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span>&#123;<br>  <span class="hljs-keyword">var</span> x,y;<br><br>  <span class="hljs-title class_">Point</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span>);<br><br>  <span class="hljs-comment">// 命名构造方法 namedConstructor</span><br>  <span class="hljs-title class_">Point</span>.<span class="hljs-title function_">namedConstructor</span>(<span class="hljs-params"></span>)&#123;<br>    x = <span class="hljs-number">0</span>;<br>    y = <span class="hljs-number">0</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-comment">// 使用命名构造方法实例化对象</span><br>  <span class="hljs-keyword">var</span> point = <span class="hljs-title class_">Point</span>.<span class="hljs-title function_">namedConstructor</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的例子也可以改写为：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span>&#123;<br>  <span class="hljs-keyword">var</span> x,y;<br><br>  Point(<span class="hljs-keyword">this</span>.x,<span class="hljs-keyword">this</span>.y);<br>  <span class="hljs-comment">// 命名构造方法 namedConstructor</span><br>  <span class="hljs-comment">// 这里使用参数初始化列表，直接通过 this 调用上面的构造方法，传入两个参数 0，初始化对象</span><br>  Point.namedConstructor():<span class="hljs-keyword">this</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-2-4、factory-构造方法"><a href="#5-2-4、factory-构造方法" class="headerlink" title="5.2.4、factory 构造方法"></a>5.2.4、factory 构造方法</h4><p>1）、Dart 提供了一个特殊的构造方法，类似设计模式中的工厂模式，用来创建对象</p><p>2）、factory 构造方法只能访问静态属性和静态成员方法，因此不能访问 this 引用</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//1、定义个日志类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Logger</span> &#123;<br>  <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> name;<br>  <span class="hljs-type">bool</span> mute = <span class="hljs-literal">false</span>;<br><br>  <span class="hljs-comment">// 定义一个私有的_cache属性，用来保存创建好的Logger对象</span><br>  <span class="hljs-type">static</span> <span class="hljs-keyword">final</span> Map&lt;<span class="hljs-type">String</span>, Logger&gt; _cache = &#123;&#125;;<br><br>  <span class="hljs-comment">// 注意这个构造方法，前面使用了factory关键字修饰，这代表这个构造方法是一个工厂构造方法</span><br>  <span class="hljs-comment">// 工厂构造方法不会每次都创建一个新的Logger对象</span><br>  <span class="hljs-function">factory <span class="hljs-title">Logger</span><span class="hljs-params">(<span class="hljs-type">String</span> name)</span> </span>&#123;<br>    <span class="hljs-comment">// 根据name判断缓存的Logger对象是否存在</span><br>    <span class="hljs-keyword">if</span> (_cache.<span class="hljs-built_in">containsKey</span>(name)) &#123;<br>      <span class="hljs-comment">// 返回缓存的Logger对象</span><br>      <span class="hljs-keyword">return</span> _cache[name]!;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 如果没有缓存，则调用命名构造方法_internal创建一个Logger对象</span><br>      <span class="hljs-keyword">final</span> logger = Logger._internal(name);<br>      <span class="hljs-comment">// 根据name缓存logger</span><br>      _cache[name] = logger;<br>      <span class="hljs-comment">// 返回新的Logger对象</span><br>      <span class="hljs-keyword">return</span> logger;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 注意这个是一个私有的命名构造方法。</span><br>  Logger._internal(<span class="hljs-keyword">this</span>.name);<br><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">log</span><span class="hljs-params">(<span class="hljs-type">String</span> msg)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (!mute) <span class="hljs-built_in">print</span>(msg);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">//2、测试</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>  var logger = <span class="hljs-built_in">Logger</span>(<span class="hljs-string">&quot;erdai&quot;</span>);<br>  logger.<span class="hljs-built_in">log</span>(logger.name);<br>&#125;<br><br><span class="hljs-comment">//打印结果</span><br>erdai<br></code></pre></td></tr></table></figure><h3 id="5-3、继承和多态"><a href="#5-3、继承和多态" class="headerlink" title="5.3、继承和多态"></a>5.3、继承和多态</h3><h4 id="5-3-1、继承"><a href="#5-3-1、继承" class="headerlink" title="5.3.1、继承"></a>5.3.1、继承</h4><p>1）、Dart 通过 extend 关键字继承一个类，和 Java 类似</p><p>2）、子类会继承父类可见的属性和方法，不会继承构造方法</p><p>3）、子类能够复写父类的 getter，setter，以及普通方法，使用 @override 表示覆写</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Parent</span></span>&#123;<br>  <span class="hljs-built_in">String</span> name = <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-built_in">int</span> age = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-comment">//计算属性</span><br>  <span class="hljs-built_in">bool</span> <span class="hljs-keyword">get</span> adult =&gt; <span class="hljs-keyword">this</span>.age &gt; <span class="hljs-number">18</span>;<br><br>  <span class="hljs-comment">//私有属性，对于子类不可见</span><br>  <span class="hljs-built_in">String</span> _address = <span class="hljs-string">&quot;&quot;</span>;<br><br>  <span class="hljs-keyword">void</span> method()&#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Parent&#x27;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Children</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Parent</span></span>&#123;<br>  <br>  <span class="hljs-keyword">void</span> specificMethod()&#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Children specificMethod&#x27;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">void</span> main()&#123;<br>  <span class="hljs-keyword">var</span> child = Children();<br>  <span class="hljs-comment">//调用子类自己的方法</span><br>  child.specificMethod();<br>  <span class="hljs-comment">//访问父类的属性</span><br>  child.name = <span class="hljs-string">&quot;erdai&quot;</span>;<br>  child.age = <span class="hljs-number">18</span>;<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;<span class="hljs-subst">$&#123;child.name&#125;</span> <span class="hljs-subst">$&#123;child.age&#125;</span>&#x27;</span>);<br>  <span class="hljs-comment">//调用父类的方法</span><br>  child.method();<br>  <span class="hljs-comment">//访问父类的计算属性</span><br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;<span class="hljs-subst">$&#123;child.adult&#125;</span>&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">//打印结果</span><br>Children specificMethod<br>erdai <span class="hljs-number">18</span><br>Parent<br><span class="hljs-keyword">false</span><br></code></pre></td></tr></table></figure><h4 id="5-3-2、多态"><a href="#5-3-2、多态" class="headerlink" title="5.3.2、多态"></a>5.3.2、多态</h4><p>1）、简单的理解：多态就是将子类的对象赋值给父类的引用，同一个方法调用会有不同的执行效果</p><p>2）、多态的体现：父类定义一个方法，让继承它的子类去实现，每个子类有不同的表现</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span></span>&#123;<br>  void animalType()&#123;<br><br>  &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span></span>&#123;<br><br>  <span class="hljs-meta">@override</span><br>  void animalType() &#123;<br>    print(&#x27;<span class="hljs-type">I</span> am dog&#x27;);<br>  &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span></span>&#123;<br><br>  <span class="hljs-meta">@override</span><br>  void animalType() &#123;<br>    print(&#x27;<span class="hljs-type">I</span> am pig&#x27;);<br>  &#125;<br>&#125;<br><br>void main()&#123;<br>  <span class="hljs-comment">//子类的对象赋值给父类的引用</span><br>  <span class="hljs-type">Animal</span> animal1 = <span class="hljs-type">Dog</span>();<br>  <span class="hljs-type">Animal</span> animal2 = <span class="hljs-type">Pig</span>();<br>  <span class="hljs-comment">//同一个方法调用会有不同的执行效果</span><br>  animal1.animalType();<br>  animal2.animalType();<br>&#125;<br><br><span class="hljs-comment">//打印结果</span><br><span class="hljs-type">I</span> am dog<br><span class="hljs-type">I</span> am pig<br></code></pre></td></tr></table></figure><h3 id="5-4、抽象类和抽象方法"><a href="#5-4、抽象类和抽象方法" class="headerlink" title="5.4、抽象类和抽象方法"></a>5.4、抽象类和抽象方法</h3><p>1）、抽象类就是不能实例化的类，通过 abstract 关键字声明</p><p>2）、抽象方法就是没有实现的方法，Dart 中的抽象方法不能用 abstract 声明，Dart 中没有方法体的方法就称为抽象方法</p><p>3）、继承抽象类，子类必须要实现所有抽象方法，否则会报错</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">// 使用 abstract 关键字修饰的类，就是抽象类</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Doer</span></span>&#123;<br>  <span class="hljs-comment">// 抽象类跟普通类一样，可以定义成员变量，成员方法。</span><br>  <span class="hljs-type">String</span> name = <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-comment">// 定义个抽象方法，这个方法我们没有实现具体的功能</span><br>  void doSomething();<br>&#125;<br><br><span class="hljs-comment">// 继承抽象类 Doer</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EffectiveDoer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Doer</span></span>&#123;<br>  <span class="hljs-comment">// 实现抽象类的抽象方法</span><br>  <span class="hljs-meta">@override</span><br>  void doSomething() &#123;<br>    print(&#x27;doSomething&#x27;);<br>  &#125;<br>&#125;<br><br>void main()&#123;<br>  <span class="hljs-keyword">var</span> doer = <span class="hljs-type">EffectiveDoer</span>();<br>  doer.doSomething();<br>  doer.name = <span class="hljs-string">&quot;erdai&quot;</span>;<br>  print(doer.name);<br>&#125;<br><br><span class="hljs-comment">//打印结果</span><br>doSomething<br>erdai<br></code></pre></td></tr></table></figure><h3 id="5-5、接口"><a href="#5-5、接口" class="headerlink" title="5.5、接口"></a>5.5、接口</h3><p>1）、Dart 中的接口没有使用 interface 关键字定义，而是普通类和抽象类都可以作为接口被实现。但是一般都是用抽象类来定义接口</p><p>2）、子类通过 implements 来实现接口</p><p>3）、默认情况每一个类都<strong>隐含</strong>一个包含所有公有成员（属性和方法）的接口定义</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Fruit</span>&#123;<br>  <span class="hljs-comment">// 包含在隐式接口里面</span><br>  <span class="hljs-title class_">String</span> name = <span class="hljs-string">&quot;&quot;</span>;<br>  <br>  <span class="hljs-comment">// 构造方法不包含在隐式接口里面</span><br>  <span class="hljs-title class_">Fruit</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>  <br>  <span class="hljs-comment">// 包含在隐式接口里面</span><br>  <span class="hljs-built_in">void</span> <span class="hljs-title function_">eat</span>();<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Apple</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Fruit</span>&#123;<br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-title class_">String</span> name = <span class="hljs-string">&quot;苹果&quot;</span>;<br><br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-built_in">void</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">print</span>(<span class="hljs-string">&#x27;吃$name&#x27;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">var</span> fruit = <span class="hljs-title class_">Apple</span>();<br>  fruit.<span class="hljs-title function_">eat</span>();<br>&#125;<br><br><span class="hljs-comment">//打印结果</span><br>吃苹果<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：虽然普通类也可以作为接口实现，但是依然需要实现普通类里面所有的公有成员（属性和方法），因此建议大家使用抽象类来作为接口实现，因为抽象类本来就是用来定义给子类实现的</p><h2 id="六、空安全检查"><a href="#六、空安全检查" class="headerlink" title="六、空安全检查"></a>六、空安全检查</h2><p>1）、Dart 在 2.12 版本和 Flutter 2.0 中引入了空安全的新特性，在空安全版本下，运行时的 <strong>NPE (NullPointer Exception)</strong> 异常被提前到了编译期</p><p>2）、在空安全推出之前，静态类型系统允许所有的类型值为 null，因为 Null 是所有类型的子类。而在空安全推出后，所有类型默认为不可空类型，Null 不再是所有类的子类，它变成了和其他类型并行的类</p><p>3）、Dart 新增了一些关键字用于空安全，如下：</p><table><thead><tr><th><strong>关键字</strong></th><th><strong>含义</strong></th><th>示例</th></tr></thead><tbody><tr><td>?</td><td>可空</td><td>int a?;</td></tr><tr><td>!</td><td>非空</td><td>int b &#x3D; a!;</td></tr><tr><td>late</td><td>延迟初始化</td><td>late int a;</td></tr><tr><td>required</td><td>可选参数的不可空</td><td>{required int a}</td></tr></tbody></table><h3 id="6-1、空类型声明符-？"><a href="#6-1、空类型声明符-？" class="headerlink" title="6.1、空类型声明符 ？"></a>6.1、<strong>空类型声明符 ？</strong></h3><p>1）、在类型后面加上 ？，表示可空类型</p><p>2）、使用 var 关键字定义的变量也是可空类型</p><p>3）、可空类型变量的调用，使用 ?. 操作符，它表示如果当前对象不为 null 则调用，为 null 则什么都不做</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-comment">//1、在类型后面加上 ？，表示可空类型</span><br><span class="hljs-keyword">void</span> main() &#123;<br>  <span class="hljs-comment">//定义一个 String 的可空类型，默认值为 null</span><br>  String? <span class="hljs-built_in">str</span>;<br>  <span class="hljs-comment">//编译报红，因为可空类型需要使用 ?. 调用</span><br>  <span class="hljs-comment">//提示：The property &#x27;length&#x27; can&#x27;t be unconditionally accessed because the receiver can be &#x27;null&#x27;.</span><br>  <span class="hljs-keyword">print</span>(<span class="hljs-built_in">str</span>.length); <br>&#125;<br><br><span class="hljs-comment">//2、使用 var 关键字定义的变量也是可空类型</span><br><span class="hljs-keyword">void</span> main() &#123;<br>  <span class="hljs-comment">//定义一个动态的可空类型 str，默认值为 null</span><br>  <span class="hljs-built_in">var</span> <span class="hljs-built_in">str</span>;<br>  <span class="hljs-comment">//下面这句代码会绕过编译器检查，但运行时会报错：NoSuchMethodError: &#x27;length&#x27;</span><br>  <span class="hljs-keyword">print</span>(<span class="hljs-built_in">str</span>.length);<br>&#125;<br><br><span class="hljs-comment">//3、可空类型变量的调用，使用 ?. 操作符，它表示如果当前对象不为 null 则调用，为 null 则什么都不做</span><br><span class="hljs-keyword">void</span> main() &#123;<br>  String? str1;<br>  <span class="hljs-built_in">var</span> str2;<br>  <span class="hljs-keyword">print</span>(str1?.length);<br>  <span class="hljs-keyword">print</span>(str2?.length);<br>&#125;<br><span class="hljs-comment">//打印结果</span><br><span class="hljs-literal">null</span><br><span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><h3 id="6-2、非空断言"><a href="#6-2、非空断言" class="headerlink" title="6.2、非空断言 !"></a>6.2、<strong>非空断言 !</strong></h3><p>1）、使用 ! 关键字表示告诉编译器这是一个不可能为空的变量。如果为空，你就抛异常</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-built_in">String</span>? <span class="hljs-title function_">getName</span>() =&gt; <span class="hljs-string">&quot;erdai&quot;</span>;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>() &#123;<br> <span class="hljs-built_in">String</span>? <span class="hljs-built_in">str</span> = <span class="hljs-title function_">getName</span>();<br> <span class="hljs-comment">//此时会编译报红，因为编译器无法智能判空</span><br> <span class="hljs-comment">//print(str.length);</span><br> <span class="hljs-comment">//因此我们需要使用 ! 关键字</span><br> <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>!.<span class="hljs-property">length</span>);<br>&#125;<br><span class="hljs-comment">//打印结果</span><br><span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h3 id="6-3、late-延迟初始化"><a href="#6-3、late-延迟初始化" class="headerlink" title="6.3、late 延迟初始化"></a>6.3、<strong>late 延迟初始化</strong></h3><p>1）、late 关键字会告诉编译器：这是个非空变量，我稍后会初始化</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-comment">//此时会编译报红，因为编译器会告诉我们非空变量必须先初始化</span><br><span class="hljs-comment">//String str;</span><br><span class="hljs-comment">//因此我们需要使用 late 关键字</span><br>late <span class="hljs-built_in">String</span> <span class="hljs-built_in">str</span>;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>() &#123;<br>  <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;erdai&quot;</span>;<br>  <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>);<br>&#125;<br><span class="hljs-comment">//打印结果</span><br>erdai<br></code></pre></td></tr></table></figure><h3 id="6-4、required-关键字"><a href="#6-4、required-关键字" class="headerlink" title="6.4、required 关键字"></a>6.4、<strong>required 关键字</strong></h3><p>1）、required 关键字主要是用来标记命名参数，在使用时一定要给他们赋值，使得他们不为空</p><p>2）、使用 required 修饰的参数不能提供默认值</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> optionFunction(<span class="hljs-keyword">var</span> value1,&#123;<span class="hljs-keyword">required</span> <span class="hljs-keyword">var</span> value2,<span class="hljs-keyword">var</span> value3 = <span class="hljs-number">3</span>&#125;)&#123;<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;<span class="hljs-subst">$value1</span> <span class="hljs-subst">$value2</span> <span class="hljs-subst">$value3</span>&#x27;</span>);<br>&#125; <br><br><span class="hljs-keyword">void</span> main() &#123;<br>  optionFunction(<span class="hljs-number">1</span>, value2: <span class="hljs-number">100</span>);<br>&#125;<br><br><span class="hljs-comment">//打印结果</span><br><span class="hljs-number">1</span> <span class="hljs-number">100</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h2 id="七、有趣的运算符重载"><a href="#七、有趣的运算符重载" class="headerlink" title="七、有趣的运算符重载"></a>七、有趣的运算符重载</h2><p>与 Kotlin 类似，Dart 的运算符重载允许我们让任意两个对象进行相加，或者是进行其他更多的运算操作</p><p>1）、运算符重载使用的是 operator 关键字，我们只需要在指定运算符前面加上 operator 关键字，就可以实现运算符重载的功能了，Dart 支持的重载运算符如下：</p><figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bnf"><span class="hljs-attribute">&lt;   +   |   []</span><br><span class="hljs-attribute">&gt;</span>   /   ^   []=<br><span class="hljs-attribute">&lt;=  ~/  &amp;   ~</span><br><span class="hljs-attribute">&gt;</span>=  *   <span class="hljs-attribute">&lt;&lt;  ==</span><br><span class="hljs-attribute">–   %   &gt;</span>&gt;<br></code></pre></td></tr></table></figure><p>2）、重载运算符的语法格式如下：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino">函数返回值 <span class="hljs-keyword">operator</span> 运算符(运算符参数) &#123;<br>    <span class="hljs-comment">// 实现运算符重载逻辑</span><br>&#125;<br></code></pre></td></tr></table></figure><p>下面我们就来实践一下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">class</span> <span class="hljs-type">Money</span>&#123;<br>  <span class="hljs-type">int</span> <span class="hljs-keyword">value</span> = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-type">Money</span>(this.<span class="hljs-keyword">value</span>);<br><br>  //重载 + 号运算符, 两个 <span class="hljs-type">Money</span> 对象相加,然后返回一个新的 <span class="hljs-type">Money</span> 对象<br>  <span class="hljs-type">Money</span> <span class="hljs-keyword">operator</span> +(<span class="hljs-type">Money</span> <span class="hljs-type">money</span>)&#123;<br>    var sum = <span class="hljs-keyword">value</span> + <span class="hljs-type">money</span>.<span class="hljs-keyword">value</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-type">Money</span>(sum);<br>  &#125;<br>&#125;<br><br><span class="hljs-type">void</span> main() &#123;<br>  var money1 = <span class="hljs-type">Money</span>(<span class="hljs-number">100</span>);<br>  var money2 = <span class="hljs-type">Money</span>(<span class="hljs-number">200</span>);<br>  //两个对象相加<br>  var money3 = money1 + money2;<br>  print(money3.<span class="hljs-keyword">value</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="八、-mixin-混入"><a href="#八、-mixin-混入" class="headerlink" title="八、 mixin 混入"></a>八、 mixin 混入</h2><p>1）、前面说到 Dart 语言的类是单继承的，如果我们想要实现类似多继承的效果可以使用 mixin 机制，又叫混入机制，例如把类 A 混入到类 B 中，那么类 B 就拥有了类 A 的成员，跟继承的特性非常相似</p><p>2）、定义一个可以被 mixin 的类，使用 mixin 关键字代替 class 关键字即可</p><p>3）、继承被 mixin 的类，使用 with 关键字，如果有多个，中间用 , 隔开</p><p>4）、被 mixin 的类只能继承自 Object，不能继承其他类，且不能有构造方法</p><p>5）、使用 on 关键字可以指定哪些类可以使用该 mixin 类，如果有多个，中间用 , 隔开</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-comment">//1、定义一个可以被 mixin 的类，使用 mixin 关键字代替 class 关键字即可</span><br><span class="hljs-comment">//2、继承被 mixin 的类，使用 with 关键字，如果有多个，中间用 , 隔开</span><br><span class="hljs-keyword">mixin</span> A&#123;<br>  <span class="hljs-built_in">void</span> getA()&#123;<br>    print(<span class="hljs-string">&#x27;A&#x27;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">mixin</span> B&#123;<br>  <span class="hljs-built_in">void</span> getB()&#123;<br>    print(<span class="hljs-string">&#x27;B&#x27;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-symbol">C</span>&#123;<br>  <span class="hljs-built_in">void</span> getC()&#123;<br>    print(<span class="hljs-string">&#x27;C&#x27;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-symbol">CC</span> <span class="hljs-symbol">extends</span> <span class="hljs-symbol">C</span> <span class="hljs-symbol">with</span> <span class="hljs-symbol">A,<span class="hljs-symbol">B</span></span>&#123;&#125;<br><br><span class="hljs-built_in">void</span> main() &#123;<br>  var cc = CC();<br>  cc.getA();<br>  cc.getB();<br>  cc.getC();<br>  print(cc <span class="hljs-keyword">is</span> A);<br>  print(cc <span class="hljs-keyword">is</span> B);<br>  print(cc <span class="hljs-keyword">is</span> C);<br>&#125;<br><span class="hljs-comment">//打印结果</span><br>A<br>B<br>C<br><span class="hljs-literal">true</span><br><span class="hljs-literal">true</span><br><span class="hljs-literal">true</span><br>  <br><span class="hljs-comment">//3、被 mixin 的类只能继承自 Object，不能继承其他类，且不能有构造方法</span><br><span class="hljs-keyword">class</span> <span class="hljs-symbol">D</span> &#123;&#125;<br><br><span class="hljs-comment">//编译报错，mixin 类不能继承其他类，只能继承自 Object</span><br><span class="hljs-keyword">mixin</span> E extends D&#123;<br>   <span class="hljs-comment">//编译报错，mixin 类不能有构造方法</span><br>   E();<br>&#125;<br><br><span class="hljs-comment">//4、使用 on 关键字可以指定哪些类可以使用该 mixin 类</span><br><span class="hljs-keyword">class</span> <span class="hljs-symbol">F</span>&#123;&#125;<br><br><span class="hljs-keyword">mixin</span> G on F&#123;&#125;<br><br><span class="hljs-comment">//class I with G&#123;&#125; //编译报错：mixin 类 G 没有指定 I 可以使用</span><br><span class="hljs-keyword">class</span> <span class="hljs-symbol">I</span> <span class="hljs-symbol">extends</span> <span class="hljs-symbol">F</span> <span class="hljs-symbol">with</span> <span class="hljs-symbol">G</span>&#123;&#125; <span class="hljs-comment">//编译通过，继承 F 间接的使用 mixin 类 G</span><br></code></pre></td></tr></table></figure><h2 id="九、Dart-泛型"><a href="#九、Dart-泛型" class="headerlink" title="九、Dart 泛型"></a>九、Dart 泛型</h2><p>泛型编程机制最主要的目的是为了代码复用，避免类型转换异常。如果你对 Java ，Kotlin 泛型很熟悉，你会觉得 Dart 泛型非常简单。对 Java ，Kotlin 泛型还不熟悉的，看我这篇文章<a href="https://juejin.cn/post/6950042154496425992">传送门</a></p><p>1）、Dart 中泛型主要有以下三种使用：</p><p>1、泛型类</p><p>2、泛型接口</p><p>3、限制泛型类型</p><h3 id="9-1、泛型类和泛型接口"><a href="#9-1、泛型类和泛型接口" class="headerlink" title="9.1、泛型类和泛型接口"></a>9.1、泛型类和泛型接口</h3><p>1）、我们定义一个类，或者接口的时候，在类名后面增加泛型参数，就是为这个类或接口添加了一个泛型</p><p>2）、泛型语法格式：<code>&lt;T&gt;</code> ，多个泛型之间用 , 隔开：&lt;T,K&gt;</p><p>3）、泛型参数的命名可以随便取，但是我们一般习惯使用大写字母代表泛型参数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//一、泛型类</span><br><span class="hljs-comment">//1、定义泛型类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericClass</span>&lt;T&gt;&#123;<br><br>  T? name;<br><br>  <span class="hljs-title class_">GenericClass</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br><br>  <span class="hljs-built_in">void</span> <span class="hljs-title function_">setName</span>(<span class="hljs-params">T? value</span>)&#123;<br>    name = value;<br>  &#125;<br><br>  T? <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> name;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">//2、泛型类使用</span><br><span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> genericClass = <span class="hljs-title class_">GenericClass</span>&lt;<span class="hljs-title class_">String</span>&gt;(<span class="hljs-string">&quot;&quot;</span>);<br>  genericClass.<span class="hljs-title function_">setName</span>(<span class="hljs-string">&quot;erdai&quot;</span>);<br>  <span class="hljs-title function_">print</span>(genericClass.<span class="hljs-title function_">getName</span>());<br>&#125;<br><br><span class="hljs-comment">//3、打印结果</span><br>erdai<br>  <br><span class="hljs-comment">//二、泛型接口</span><br><span class="hljs-comment">//1、定义泛型接口</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericInterface</span>&lt;K,V&gt;&#123;<br>  <span class="hljs-built_in">void</span> <span class="hljs-title function_">setKeyValue</span>(K key,V value);<br>&#125;<br><br><span class="hljs-comment">//2、定义泛型接口实现类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericInterfaceImpl</span>&lt;K,V&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">GenericInterface</span>&lt;K,V&gt;&#123;<br><br>  <span class="hljs-keyword">var</span> map = &#123;&#125;;<br><br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-built_in">void</span> <span class="hljs-title function_">setKeyValue</span>(<span class="hljs-params">K key, V value</span>) &#123;<br>    map[key] = value;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">//3、泛型接口使用</span><br><span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> impl = <span class="hljs-title class_">GenericInterfaceImpl</span>&lt;<span class="hljs-title class_">String</span>,int&gt;();<br>  impl.<span class="hljs-title function_">setKeyValue</span>(<span class="hljs-string">&quot;erdai&quot;</span>, <span class="hljs-number">666</span>);<br>  impl.<span class="hljs-property">map</span>.<span class="hljs-title function_">forEach</span>((key, value) &#123;<br>    <span class="hljs-title function_">print</span>(<span class="hljs-string">&#x27;$key $value&#x27;</span>);<br>  &#125;);<br>&#125;<br><br><span class="hljs-comment">//4、打印结果</span><br>erdai <span class="hljs-number">666</span><br></code></pre></td></tr></table></figure><h3 id="9-2、限制泛型类型"><a href="#9-2、限制泛型类型" class="headerlink" title="9.2、限制泛型类型"></a>9.2、限制泛型类型</h3><p>1）、限制泛型参数类型语法格式：&lt;泛型参数 extends 父类&gt;</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaseClass</span></span>&#123;<br><br>  void baseMethod()&#123;<br>    print(&#x27;<span class="hljs-type">BaseClass</span> baseMethod...&#x27;);<br>  &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseClass</span></span>&#123;<br>  <span class="hljs-meta">@override</span><br>  void baseMethod() &#123;<br>    print(&#x27;<span class="hljs-type">Child</span> baseMethod&#x27;);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">//T 类型必须是 BaseClass 或者其子类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo&lt;T</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseClass&gt;</span></span>&#123;<br>  <span class="hljs-type">T</span>? t;<br>  <br>  <span class="hljs-type">Foo</span>(<span class="hljs-keyword">this</span>.t);<br><br>  void fooTest()&#123;<br>    t?.baseMethod();<br>  &#125;<br>&#125;<br><br>void main()&#123;<br>  <span class="hljs-comment">//1、使用父类 BaseClass 作为泛型参数是允许的</span><br>  <span class="hljs-keyword">var</span> baseClass = <span class="hljs-type">BaseClass</span>();<br>  <span class="hljs-keyword">var</span> foo1 = <span class="hljs-type">Foo</span>&lt;<span class="hljs-type">BaseClass</span>&gt;(baseClass);<br>  foo1.fooTest();<br>  <br>  <span class="hljs-comment">//2、使用子类 Child 作为泛型参数</span><br>  <span class="hljs-keyword">var</span> childClass = <span class="hljs-type">Child</span>();<br>  <span class="hljs-keyword">var</span> foo2 = <span class="hljs-type">Foo</span>&lt;<span class="hljs-type">Child</span>&gt;(childClass);<br>  foo2.fooTest();<br><br>  <span class="hljs-comment">//3、如果不传入任何泛型参数，默认使用父类 BaseClass 作为泛型参数</span><br>  <span class="hljs-keyword">var</span> foo3 = <span class="hljs-type">Foo</span>(baseClass);<br>  foo3.fooTest();<br>&#125;<br><br><span class="hljs-comment">//打印结果</span><br><span class="hljs-type">BaseClass</span> baseMethod...<br><span class="hljs-type">Child</span> baseMethod<br><span class="hljs-type">BaseClass</span> baseMethod...<br></code></pre></td></tr></table></figure><h2 id="十、Dart-Import-导入包"><a href="#十、Dart-Import-导入包" class="headerlink" title="十、Dart Import 导入包"></a>十、Dart Import 导入包</h2><p>在日常开发中，我们经常需要导入我们的本地模块或者第三方开源包。Dart 中主要通过 import 指令导入包</p><h3 id="10-1、导入内置包"><a href="#10-1、导入内置包" class="headerlink" title="10.1、导入内置包"></a>10.1、导入内置包</h3><p>1）、Dart 内置了一些常用的包，这些内置的包会随着 Dart sdk 一起安装在本地</p><p>2）、导入内置包使用 dart: 作为路径前缀</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 导入内置 math 包，使用 dart: 作为前缀。</span><br><span class="hljs-comment">// math 包主要提供一些数学相关的函数，例如，正弦函数、求最大值函数等等</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;dart:math&#x27;</span>;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 调用 math 包中的 max 函数，求两个数中的最大值。</span><br>  <span class="hljs-keyword">var</span> a = <span class="hljs-title function_">max</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>);<br>  <span class="hljs-title function_">print</span>(a); <span class="hljs-comment">//打印 100</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="10-2、包的别名"><a href="#10-2、包的别名" class="headerlink" title="10.2、包的别名"></a>10.2、包的别名</h3><p>默认情况调用包中的函数或者类，不需要包名作为前缀，上面调用了 math 包中的 max 函数，直接使用包中的函数名。但是这样会存在命名冲突的可能性，如果导入的两个包，包含了同名的类或者函数，就会出现命名冲突，因此提供别名机制</p><p>1）、使用 as 关键字指定包的别名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//使用 as 关键字，指定包的别名</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;dart:math&#x27;</span> <span class="hljs-keyword">as</span> math;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 使用别名，引用包中的函数 。</span><br>  <span class="hljs-keyword">var</span> a = math.<span class="hljs-title function_">max</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>);<br>  <span class="hljs-title function_">print</span>(a); <span class="hljs-comment">//打印 100</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="10-3、导入包的部分内容"><a href="#10-3、导入包的部分内容" class="headerlink" title="10.3、导入包的部分内容"></a>10.3、导入包的部分内容</h3><p>1）、有时候我们不想导入整个包，只想导入包里面的某个类或者某个函数。Dart 提供了show 和 hide 关键字处理导入包的部分内容</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lua">//<span class="hljs-number">1</span>、仅导入 <span class="hljs-built_in">max</span> 函数, 导入多个内容使用逗号分隔，例如 show <span class="hljs-built_in">max</span>,<span class="hljs-built_in">sin</span><br>import <span class="hljs-string">&#x27;dart:math&#x27;</span> show <span class="hljs-built_in">max</span>;<br><br>//<span class="hljs-number">2</span>、除了<span class="hljs-built_in">max</span>函数，导入 <span class="hljs-built_in">math</span> 中的所有内容。<br>import <span class="hljs-string">&#x27;dart:math&#x27;</span> hide <span class="hljs-built_in">max</span>;<br></code></pre></td></tr></table></figure><h3 id="10-4、导入本地模块"><a href="#10-4、导入本地模块" class="headerlink" title="10.4、导入本地模块"></a>10.4、导入本地模块</h3><p>在日常开发中，我们会经常会导入本地的模块，一般项目中会有多个 dart 脚本文件，每个 dart 脚本实现不同模块的代码，在需要的时候直接导入 dart 脚本文件即可</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>例如我有个本地模块：libs/stack.dart<br><br><span class="hljs-regexp">//</span>导入本地模块<br><span class="hljs-regexp">//</span>直接通过本地文件路径导入 dart 脚本即可<br>import <span class="hljs-string">&#x27;libs/stack.dart&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="10-5、导入第三方开源包"><a href="#10-5、导入第三方开源包" class="headerlink" title="10.5、导入第三方开源包"></a>10.5、导入第三方开源包</h3><h4 id="10-5-1、查找第三方开源包"><a href="#10-5-1、查找第三方开源包" class="headerlink" title="10.5.1、查找第三方开源包"></a>10.5.1、查找第三方开源包</h4><p><a href="https://pub.dev/">https://pub.dev/</a> ：这个是 pub 的中央仓库, 上面有大量的第三方开源包，可以到这里找到自己想要的包</p><h4 id="10-5-2、配置依赖包"><a href="#10-5-2、配置依赖包" class="headerlink" title="10.5.2、配置依赖包"></a>10.5.2、配置依赖包</h4><p>在项目根目录 pubspec.yaml 中配置 dependencies 属性，结构如下：</p><blockquote><p>dependencies:</p><p>包名: 版本号</p></blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">dependencies</span>:<br>  <span class="hljs-attribute">http</span>: ^<span class="hljs-number">0</span>.<span class="hljs-number">13</span>.<span class="hljs-number">5</span><br>  <span class="hljs-attribute">cupertino_icons</span>: ^<span class="hljs-number">1</span>.<span class="hljs-number">0</span>.<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>关于版本号说明，如下:</p><ul><li>^1.2.1 代表的更新版本范围为 &gt;&#x3D;1.2.1 &amp;&amp; &lt; 2.0.0</li><li>^0.2.1 代表的更新版本范围为 &gt;&#x3D;0.2.1 &amp;&amp; &lt; 0.3.0</li><li>^0.0.2 代表的更新版本范围为 0.0.2（相当于锁定为了 0.0.2 版本）</li></ul><p><strong>规律</strong>： 实则就是把 ^ 后面非 0 的数字 +1 ，然后把其他位变为 0 就是它的最大版本。另外如果最后一位非 0 ，其他位为 0 ，就相当于锁版本。如：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs coq">最大版本：^<span class="hljs-number">1.2</span><span class="hljs-number">.1</span> =&gt; <span class="hljs-number">2.2</span><span class="hljs-number">.1</span> =&gt; <span class="hljs-number">2.0</span><span class="hljs-number">.0</span> 范围：<span class="hljs-number">1.2</span><span class="hljs-number">.1</span><span class="hljs-number">-2.0</span><span class="hljs-number">.0</span><br>最大版本：^<span class="hljs-number">0.2</span><span class="hljs-number">.1</span> =&gt; <span class="hljs-number">0.3</span><span class="hljs-number">.1</span> =&gt; <span class="hljs-number">0.3</span><span class="hljs-number">.0</span> 范围：<span class="hljs-number">0.2</span><span class="hljs-number">.1</span><span class="hljs-number">-0.3</span><span class="hljs-number">.0</span><br>^<span class="hljs-number">0.0</span><span class="hljs-number">.2</span>：固定版本：<span class="hljs-number">0.0</span><span class="hljs-number">.2</span><br></code></pre></td></tr></table></figure><h4 id="10-5-3、下载依赖包"><a href="#10-5-3、下载依赖包" class="headerlink" title="10.5.3、下载依赖包"></a>10.5.3、下载依赖包</h4><p>打开命令行，输入如下命令：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">flutter pub <span class="hljs-keyword">get</span><br></code></pre></td></tr></table></figure><p>或者直接使用开发工具的可视化界面操作</p><h4 id="10-5-4、导入第三方开源包"><a href="#10-5-4、导入第三方开源包" class="headerlink" title="10.5.4、导入第三方开源包"></a>10.5.4、导入第三方开源包</h4><p>依赖包下载安装后，我们就可以使用 import 导入第三方包，第三方包前缀为 package:</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tcl">// 这里导入 <span class="hljs-keyword">http</span> 包，别名为 <span class="hljs-keyword">http</span><br>import &#x27;<span class="hljs-keyword">package</span>:<span class="hljs-keyword">http</span>/<span class="hljs-keyword">http</span>.dart&#x27; as <span class="hljs-keyword">http</span>;<br></code></pre></td></tr></table></figure><h2 id="十一、Dart-异常处理"><a href="#十一、Dart-异常处理" class="headerlink" title="十一、Dart 异常处理"></a>十一、Dart 异常处理</h2><p>类似 Java，Dart 提供了 Exception 和 Error 两种类型的异常以及一些子类</p><p>1）、使用 throw 关键字抛出自定义类型异常，也可以将任何非 null 对象作为异常抛出</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">throw</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&#x27;这是一个异常&#x27;</span>);<br><span class="hljs-keyword">throw</span> <span class="hljs-string">&#x27;这是一个异常&#x27;</span>;<br></code></pre></td></tr></table></figure><p><strong>小建议</strong>：一般建议抛出 Exception 和 Error , 或者他们的子类</p><p>2）、使用 try&#x2F;on catch 配合捕获异常</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs scss">void <span class="hljs-selector-tag">main</span>() &#123;<br>  try &#123;<br>    <span class="hljs-selector-tag">var</span> s;<br>    <span class="hljs-built_in">print</span>(s.length);<br>  &#125; on NoSuchMethodError catch (e) &#123;<br>    <span class="hljs-comment">//捕获异常并打印</span><br>    <span class="hljs-built_in">print</span>(e);<br>  &#125; catch (e, s) &#123;<br>    <span class="hljs-comment">//兜底处理 e：抛出的异常对象 s：栈信息，此参数可写可不写</span><br>    <span class="hljs-built_in">print</span>(e);<br>    <span class="hljs-built_in">print</span>(s);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码：</p><p>1、使用 on 和 catch 来捕获异常：on 用来指定异常的类型，catch 则用来捕获对象</p><p>2、当抛出的错误并不是 on 指定的异常类型时，则走最后面的 catch 兜底</p><p>3、兜底 catch 方法有两个参数，第一个参数是抛出的异常对象，第二个参数是栈信息</p><p>3）、使用 rethrow 再次抛出异常</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">exceptionMethod</span>()</span>&#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-built_in">dynamic</span> b = <span class="hljs-literal">true</span>;<br>    print(b++); <span class="hljs-comment">//NoSuchMethodError</span><br>  &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>    rethrow; <span class="hljs-comment">//将上述异常再次抛出</span><br>  &#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span>()</span> &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    exceptionMethod();<br>  &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>    <span class="hljs-comment">//捕获异常并打印</span><br>    print(e);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="十二、Dart-异步处理"><a href="#十二、Dart-异步处理" class="headerlink" title="十二、Dart 异步处理"></a>十二、Dart 异步处理</h2><p>Dart 是单线程模型的语言，如果我们在程序中做耗时操作：请求 Api 接口，文件 IO 等，就可能导致点击事件没有响应，程序卡顿之类的情况。为了处理这种情况，Dart 引入了异步操作机制：</p><p>1、Dart 异步处理不会阻塞线程，其他任务可以继续运行</p><p>2、因为 Dart 的异步机制并不涉及线程的切换，仅仅是由我们的编程语言去控制，所以它的执行效率非常高</p><h3 id="12-1、Dart-异步处理的用法"><a href="#12-1、Dart-异步处理的用法" class="headerlink" title="12.1、Dart 异步处理的用法"></a>12.1、Dart 异步处理的用法</h3><p>1）、Dart 语言中，有很多库的函数返回 Future 或者 Stream 对象，这些对象都是 Dart 对异步编程支持的实现</p><p>Future - 代表一个异步计算任务，可以获取任务的计算结果</p><p>Stream - 代表一个异步的数据序列，通常用于读取连续的数据或者事件</p><h4 id="12-1-1、Future"><a href="#12-1-1、Future" class="headerlink" title="12.1.1、Future"></a>12.1.1、Future</h4><p>1）、Future代表的是一个异步的计算任务，如果任务还没执行完成，我们是拿不到异步任务的结果</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs awk">import <span class="hljs-string">&#x27;package:http/http.dart&#x27;</span> as http;<br><br>void main() &#123;<br>  var url = <span class="hljs-string">&quot;https://www.baidu.com/&quot;</span>;<br>  <span class="hljs-regexp">//</span>调用 get 函数请求 url, 返回一个封装了 http 请求任务的 future 对象<br>  Future fTask = http.get(Uri.parse(url));<br>  <span class="hljs-regexp">//</span>打印 future 对象<br>  print(fTask);<br>  <br>  <span class="hljs-regexp">//</span> 向 future 对象注册回调函数，处理请求结果<br>  fTask.then((response) =&gt; &#123;<br>    print(<span class="hljs-string">&#x27;Response status: $&#123;response.statusCode&#125;&#x27;</span>)<br>  &#125;);<br>  <span class="hljs-regexp">//</span> 打印 main 函数结束标记<br>  print(<span class="hljs-string">&#x27;main end...&#x27;</span>);<br>&#125;<br><br><span class="hljs-regexp">//</span>打印结果<br>Instance of <span class="hljs-string">&#x27;Future&lt;Response&gt;&#x27;</span><br>main end...<br>Response status: <span class="hljs-number">200</span><br><br>Process finished with <span class="hljs-keyword">exit</span> code <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>上述代码：</p><p>1、首先打印了 fTask ，输出表示 fTask 是一个 Future 对象，将来会返回一个叫 Response 的结果对象</p><p>2、接下来打印了 main end… ，而不是先输出 http 的请求状态码</p><p>3、最后打印了 http 的请求状态码：Response status: 200 ，然后进程也退出了</p><p>上面这段程序在打印了 main end… 时进程并没有退出，而是等到打印了 http 的请求状态码：Response status: 200 才退出，这也验证了我们前面一个观点： <strong>Dart 的异步机制并不涉及线程的切换，仅仅是由我们的编程语言去控制，所以它的执行效率非常高</strong></p><h4 id="12-1-2、await-和-async"><a href="#12-1-2、await-和-async" class="headerlink" title="12.1.2、await 和 async"></a>12.1.2、await 和 async</h4><p>上述这个例子存在一个问题：</p><p>1、需要注册回调函数，如果我有多层回调，可读性就会变得很差</p><p>此时我们可以使用 await 和 async 机制来处理这个问题，而且它还能让我们使用同步的方式写出异步的代码</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> main() <span class="hljs-keyword">async</span>&#123;<br>  <span class="hljs-keyword">var</span> url = <span class="hljs-string">&quot;https://www.baidu.com/&quot;</span>;<br>  <span class="hljs-comment">//请求 url, 通过 await，等待 future 异步计算任务的结果，执行成功就直接返回结果</span><br>  <span class="hljs-keyword">var</span> response = <span class="hljs-keyword">await</span> http.<span class="hljs-keyword">get</span>(<span class="hljs-built_in">Uri</span>.parse(url));<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Response status: <span class="hljs-subst">$&#123;response.statusCode&#125;</span>&#x27;</span>);<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;main end...&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">//打印结果</span><br>Response status: <span class="hljs-number">200</span><br>main end...<br></code></pre></td></tr></table></figure><p>上述代码：</p><p>1、输出结果的顺序，跟我们书写代码的顺序一致</p><p>2、通过标记 async 和 await 关键字，我们的异步代码，看起来跟同步代码没什么区别：</p><ul><li>async 关键字的作用就是标记一个函数是异步函数</li><li>await 关键字的作用是等待异步任务的结果</li></ul><p><strong>注意：</strong> await 关键字只能在标记了async 的异步函数中使用，否则会报错</p><h4 id="12-1-3、Stream"><a href="#12-1-3、Stream" class="headerlink" title="12.1.3、Stream"></a>12.1.3、Stream</h4><p>1）、Stream 代表一个异步的数据序列，是一种异步读取流式数据的方式，使用格式如下：</p><blockquote><p>await for (数据类型 变量 in stream类型变量) {</p><p>&#x2F;&#x2F; 处理数据</p><p>}</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function">Future&lt;<span class="hljs-built_in">int</span>&gt; <span class="hljs-title">sumStream</span>(<span class="hljs-params">Stream&lt;<span class="hljs-built_in">int</span>&gt; stream</span>) <span class="hljs-keyword">async</span></span> &#123;<br>  <span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">await</span> <span class="hljs-keyword">for</span> (final <span class="hljs-keyword">value</span> <span class="hljs-keyword">in</span> stream) &#123;<br>    sum += <span class="hljs-keyword">value</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> sum;<br>&#125;<br><br><span class="hljs-comment">//async* 表示这是一个需返回 Stream 类型参数的异步函数</span><br><span class="hljs-function">Stream&lt;<span class="hljs-built_in">int</span>&gt; <span class="hljs-title">countStream</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> to</span>) <span class="hljs-keyword">async</span>*</span> &#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>; i &lt;= to; i++) &#123;<br>    <span class="hljs-comment">//yield 在这里表示暂时让出资源让其他代码执行</span><br>    <span class="hljs-keyword">yield</span> i;<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span>() <span class="hljs-keyword">async</span></span>&#123;<br>  <span class="hljs-keyword">var</span> stream = countStream(<span class="hljs-number">10</span>);<br>  <span class="hljs-comment">//通过 await 等待 sumStream 计算返回结果</span><br>  <span class="hljs-keyword">var</span> sum = <span class="hljs-keyword">await</span> sumStream(stream);<br>  print(sum);<br>&#125;<br><span class="hljs-comment">//打印结果</span><br><span class="hljs-number">55</span><br></code></pre></td></tr></table></figure><p>上述代码我们使用 await 标记 for in 循环语句，循环读取 stream 类型变量中的数据，代码书写也很直观，跟同步代码的书写方式一致</p><h2 id="十三、Dart-Isolate-并发"><a href="#十三、Dart-Isolate-并发" class="headerlink" title="十三、Dart Isolate 并发"></a>十三、Dart Isolate 并发</h2><p>我们知道一般常用的并发机制主要包括进程，线程以及后面的协程。但是 Dart 不一般 😂 ，Dart 中的并发机制主要是由 Isolate 去实现的。所谓 Isolate ，你可以简单的理解是一种特殊的线程</p><p>Isolate 的特点：</p><p>1、Isolate 之间不能共享内存</p><p>2、Isolate 之间只能通过消息通讯</p><p>不能共享内存，意味着你不能像线程那样通过变量共享状态，每个 Isolate 都有自己独立的内存，这样设计的好处<strong>就是你不用加锁，也能安全的操作自己的数据</strong></p><p>这里你是否会有一个疑问🤔️：前面我们通过 Dart 异步机制处理了接口请求之类的异步任务，不是也有类似并发的效果吗？那为什么还要引入 Isolate 并发机制呢？</p><p>答：前面我们讲的异步机制你可以理解为一种假异步，因为它实际还是在一个线程中去处理各种网络 IO，这些网络 IO 并不怎么消耗 CPU 资源，只是需要大量的等待请求响应的时间，因此我们可以利用等待的空闲时间去处理其他任务，这就是异步机制能够提高性能的原因。这种机制其实和 Android Handler 机制有点类似。而现在如果你有一个计算量非常大的任务，例如：你需要对视频进行格式化处理，这个时候这些 CPU 密集型计算就会阻塞你的线程，导致其他任务都执行不了。因此针对这种比较耗 CPU 资源的任务，最好创建一个 Isolate 去处理，避免阻塞主 Isolate （也就是主线程），这样也可以利用设备的多核特性</p><h3 id="13-1、Isolate-基本用法"><a href="#13-1、Isolate-基本用法" class="headerlink" title="13.1、Isolate 基本用法"></a>13.1、Isolate 基本用法</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 导入 isolate 包<br>import <span class="hljs-string">&#x27;dart:isolate&#x27;</span>;<br><br>void main() &#123;<br>  <span class="hljs-regexp">//</span> 通过 Isolate.spawn 静态函数，创建一个新的 Isolate<br>  <span class="hljs-regexp">//</span> spawn 是一个泛型函数，接受一个泛型参数，表示 Isolate 入口函数接受的参数类型<br>  <span class="hljs-regexp">//</span> 这里 spawn 的泛型参数是 String，subTask 是入口函数<br>  <span class="hljs-regexp">//</span> 第二个参数跟泛型参数类型一致，表示传递给入口函数的参数，这里传入的是字符串<br>  Isolate.spawn&lt;String&gt;(subTask, <span class="hljs-string">&quot;my task&quot;</span>);<br>  print(<span class="hljs-string">&quot;main func end.&quot;</span>);<br>&#125;<br><br><span class="hljs-regexp">//</span> Isolate 入口函数定义，接受一个 String 参数<br><span class="hljs-regexp">//</span> 入口函数的参数类型由上面的 spawn 的泛型参数决定<br>void subTask(String msg)&#123;<br>  print(<span class="hljs-string">&quot;subTask receive: $msg &quot;</span>);<br>&#125;<br><br><span class="hljs-regexp">//</span>打印结果<br>main <span class="hljs-keyword">func</span> end.<br>subTask receive: my task<br></code></pre></td></tr></table></figure><p>通过输出，我们发现先打印了 main func end，然后，执行新建 Isolate 的入口函数。 如果我们想让代码执行顺序，跟我们书写顺序一致的话，可以使用 await 关键字等待 Isolate 执行结束：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">// 导入 isolate 包</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;dart:isolate&#x27;</span>;<br><br><span class="hljs-comment">// 使用 async 关键字将 main 函数标记为一个异步函数，这样才能使用 await 关键字</span><br><span class="hljs-keyword">void</span> main() <span class="hljs-keyword">async</span>&#123;<br>  <span class="hljs-comment">// 使用 await 关键字等待任务执行完成</span><br>  <span class="hljs-keyword">await</span> Isolate.spawn&lt;<span class="hljs-built_in">String</span>&gt;(subTask, <span class="hljs-string">&quot;my task&quot;</span>);<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;main func end.&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// Isolate 入口函数定义，接受一个 String 参数</span><br><span class="hljs-keyword">void</span> subTask(<span class="hljs-built_in">String</span> msg)&#123;<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;subTask receive: <span class="hljs-subst">$msg</span> &quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//打印结果</span><br>subTask receive: my task <br>main func end.<br></code></pre></td></tr></table></figure><h3 id="13-2、Isolate-消息通讯"><a href="#13-2、Isolate-消息通讯" class="headerlink" title="13.2、Isolate 消息通讯"></a>13.2、Isolate 消息通讯</h3><p>多个 Isolate 之间只能通过消息进行通讯，那么我们如何去获取一个 Isolate 返回的结果呢？</p><p>答：主要通过 ReceivePort 和 SendPort 两个类处理消息通讯</p><p>1）、ReceivePort 负责接收 SendPort 发送的消息， SendPort 和 ReceivePort 是捆绑关系， SendPort 是由 ReceivePort 创建的</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span>() <span class="hljs-keyword">async</span></span>&#123;<br>   <span class="hljs-comment">// 创建一个 ReceivePort 用于接收消息</span><br>   <span class="hljs-keyword">var</span> recv = ReceivePort();<br><br>   <span class="hljs-comment">// 创建一个 Isolate，泛型参数为 SendPort，入口函数为 subTask</span><br>   <span class="hljs-comment">// subTask 入口函数的参数为 SendPort 类型，因此 spawn 第二个参数，传入 recv 的 sendPort 对象</span><br>   Isolate.spawn&lt;SendPort&gt;(subTask, recv.sendPort);<br><br>   <span class="hljs-comment">// 使用 await 等待 recv 的第一条消息</span><br>   <span class="hljs-keyword">var</span> result = <span class="hljs-keyword">await</span> recv.first;<br>   print(<span class="hljs-string">&quot;receive：$result&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// Isolate 入口函数定义，接收一个 SendPort 对象作为参数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">subTask</span>(<span class="hljs-params">SendPort port</span>)</span>&#123;<br>  <span class="hljs-comment">// 使用 SendPort 发送一条字符串消息</span><br>  port.send(<span class="hljs-string">&quot;subTask Result&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//打印结果</span><br>receive：subTask Result<br></code></pre></td></tr></table></figure><h2 id="十四、总结"><a href="#十四、总结" class="headerlink" title="十四、总结"></a>十四、总结</h2><p>本篇估计是我写过最长的文章了，比之前写 Kotlin 入门那一篇还要长😂。总的来说，这篇文章几乎涵盖了 Dart 的所有语法知识，如果你能够耐心看到这里，并手敲里面的示例，相信你一定收获很大。如果觉得我写的还不错，请给我点个赞吧🤝</p><p><strong>感谢你阅读这篇文章</strong></p><h3 id="下篇预告"><a href="#下篇预告" class="headerlink" title="下篇预告"></a>下篇预告</h3><p>基础打好了，下篇文章我们就正式进入到 Flutter 的学习了，敬请期待吧😄</p><h3 id="参考和推荐"><a href="#参考和推荐" class="headerlink" title="参考和推荐"></a>参考和推荐</h3><p><a href="https://juejin.cn/post/7075337131974983688#heading-72">一文搞定Dart语法</a></p><p><a href="https://www.tizi365.com/archives/165.html">Dart语言教程</a></p><p><a href="https://juejin.cn/post/7028710779171897351#heading-7">Flutter 基础 | Dart 语法</a></p><p><a href="https://dart.cn/tutorials/language">Dart 官方教程</a></p><blockquote><p><strong>你的点赞，评论，是对我巨大的鼓励！</strong></p><p>欢迎关注我的<strong>公众号：</strong> <a href="http://m6z.cn/6jwi7b"><strong>sweetying</strong></a> ，文章更新可第一时间收到</p><p>如果<strong>有问题</strong>，公众号内有加我微信的入口，在技术学习、个人成长的道路上，我们一起前进！</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Flutter</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Flutter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flutter系列（一）：运行你的第一个Flutter应用</title>
    <link href="/2022/09/05/Flutter%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E8%BF%90%E8%A1%8C%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AAFlutter%E5%BA%94%E7%94%A8/"/>
    <url>/2022/09/05/Flutter%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E8%BF%90%E8%A1%8C%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AAFlutter%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sweetying520/picgo/master/img/202210101643858.png" alt="tiger_bg"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Flutter 是 Google 推出并开源的移动端开发框架，主打跨平台、高保真、高性能。开发者可以通过 Dart 语言开发 App，一套代码可以同时运行在 iOS 和 Android平台。</p><p>2018 年 12 月，Google 发布 Flutter 1.0。从那时候开始，Flutter 以迅雷不及掩耳之势，迅速崛起，并稳固了其在市场上的地位。</p><p>如今，Flutter 相关资源和社区都已渐渐成熟，得到了很多开发者和企业的信任。另外因为公司业务扩张，准备引入 Flutter 开发项目，所以学习 Flutter 势在必行，下面就跟着我的脚步进行 Flutter 的学习吧</p><h2 id="一、Flutter-开发环境搭建"><a href="#一、Flutter-开发环境搭建" class="headerlink" title="一、Flutter 开发环境搭建"></a>一、Flutter 开发环境搭建</h2><p><strong>注意</strong>：本文以 macOS 系统为例</p><h3 id="1）、使用镜像"><a href="#1）、使用镜像" class="headerlink" title="1）、使用镜像"></a>1）、使用镜像</h3><p>由于在国内访问 Flutter 有时可能会受到限制， Flutter 官方为中国开发者搭建了临时镜像，我们只需将如下环境变量配置到用户环境变量中即可：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">export</span> PUB_HOSTED_URL=https:<span class="hljs-comment">//pub.flutter-io.cn</span><br><span class="hljs-keyword">export</span> FLUTTER_STORAGE_BASE_URL=https:<span class="hljs-comment">//storage.flutter-io.cn</span><br></code></pre></td></tr></table></figure><h3 id="2）、下载-Flutter-SDK"><a href="#2）、下载-Flutter-SDK" class="headerlink" title="2）、下载 Flutter SDK"></a>2）、下载 Flutter SDK</h3><p>方式有 2：</p><h4 id="1、直接去-Flutter-官网下载最新的安装包即可"><a href="#1、直接去-Flutter-官网下载最新的安装包即可" class="headerlink" title="1、直接去 Flutter 官网下载最新的安装包即可"></a>1、直接去 Flutter 官网下载最新的安装包即可</h4><p>下载地址：<a href="https://docs.flutter.dev/development/tools/sdk/releases?tab=macos#macos">https://docs.flutter.dev/development/tools/sdk/releases?tab=macos#macos</a></p><h4 id="2、通过-git-clone-下载"><a href="#2、通过-git-clone-下载" class="headerlink" title="2、通过 git clone 下载"></a>2、通过 git clone 下载</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart">git clone -b master https:<span class="hljs-comment">//github.com/flutter/flutter.git</span><br></code></pre></td></tr></table></figure><p>上述这句命令会将仓库克隆下来并切换到 master 分支</p><p><strong>注意</strong>：上述两种方式第一种需要解压，第二种不需要，总之将它们放置到您想放的地方即可</p><h3 id="3）、配置-Flutter-环境变量"><a href="#3）、配置-Flutter-环境变量" class="headerlink" title="3）、配置 Flutter 环境变量"></a>3）、配置 Flutter 环境变量</h3><p>将 Flutter 环境变量配置到你的用户环境，下面以我个人的为例：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart"># flutter 环境变量<br><span class="hljs-keyword">export</span> FLUTTER_HOME=/Users/zhouying/Library/flutter<br><span class="hljs-keyword">export</span> PATH=$&#123;PATH&#125;:$&#123;FLUTTER_HOME&#125;/bin<br></code></pre></td></tr></table></figure><h3 id="4）、验证-Flutter-是否安装成功"><a href="#4）、验证-Flutter-是否安装成功" class="headerlink" title="4）、验证 Flutter 是否安装成功"></a>4）、验证 Flutter 是否安装成功</h3><p>通过<code>flutter doctor</code>来检查是否需要安装其它依赖项来完成安装，这个过程第一次可能需要耗费一段时间，下次就会快很多</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3928cb6c9f4d443fa22245f7ba2a8d58~tplv-k3u1fbpfcp-watermark.image" alt="202201261529488.png"></p><p>从上面诊断信息我们可以看出：</p><p>1、Flutter 版本和渠道号 ok</p><p>2、Flutter运行所需的 Android 工具链 ok</p><p>3、Flutter 所需的 iOS 开发环境不 ok</p><p>4、Chrome ok</p><p>5、AndroidStudio ok</p><p>6、连接的设备 ok</p><p>7、HTTP 主机可用性 ok</p><h3 id="5）、一些额外常用的-Flutter-命令"><a href="#5）、一些额外常用的-Flutter-命令" class="headerlink" title="5）、一些额外常用的 Flutter 命令"></a>5）、一些额外常用的 Flutter 命令</h3><p>1、通过<code>flutter --help</code>查看所安装 Flutter 需要的帮助</p><p>2、通过<code>flutter --version</code>查看 Flutter 版本</p><p>3、通过<code>flutter devices</code>查看当前可用的设备</p><p>4、通过<code>flutter run</code>运行启动你的应用程序</p><h2 id="二、平台设置"><a href="#二、平台设置" class="headerlink" title="二、平台设置"></a>二、平台设置</h2><p><strong>注意</strong>：这里主要讲 Android 平台</p><h3 id="1）、安装并配置你的-Android-Studio"><a href="#1）、安装并配置你的-Android-Studio" class="headerlink" title="1）、安装并配置你的 Android Studio"></a>1）、安装并配置你的 Android Studio</h3><p>1、下载并安装 <a href="https://developer.android.com/studio/index.html">Android Studio</a>.</p><p><strong>注意</strong>：Android Studio 需要 3.0 或更高版本</p><p>2、启动 Android Studio，然后执行 Android Studio 安装向导，这将安装最新的 Android SDK，Android SDK 平台工具和 Android SDK 构建工具，这是 Flutter 为 Android 开发时所必需的</p><h3 id="2）、设置你的-Android-设备"><a href="#2）、设置你的-Android-设备" class="headerlink" title="2）、设置你的 Android 设备"></a>2）、设置你的 Android 设备</h3><p><strong>注意</strong>：Android 设备需要 Android 4.1（API level 16）或更高版本</p><h4 id="1、真机"><a href="#1、真机" class="headerlink" title="1、真机"></a>1、真机</h4><blockquote><p>1、在您的设备上启用 <strong>开发人员选项</strong> 和 <strong>USB调试</strong></p><p>2、使用USB将手机插入电脑。如果您的设备出现提示，请授权您的计算机访问您的设备</p><p>3、在终端中，运行 <code>flutter devices</code> 命令以验证Flutter识别您连接的Android设备</p><p>4、运行启动您的应用程序 <code>flutter run</code></p></blockquote><h4 id="2、模拟器"><a href="#2、模拟器" class="headerlink" title="2、模拟器"></a>2、模拟器</h4><blockquote><p>1、在您的机器上启用 <a href="https://developer.android.com/studio/run/emulator-acceleration.html">VM acceleration</a> </p><p>2、启动 <strong>Android Studio&gt;Tools&gt;Android&gt;AVD Manager</strong> 并选择 <strong>Create Virtual Device</strong></p><p>3、选择一个设备并选择 <strong>Next</strong></p><p>4、为要模拟的 Android 版本选择一个或多个系统映像，然后选择 <strong>Next</strong>. 建议使用 <em>x86</em> 或 <em>x86_64</em> image </p><p>5、在 Emulated Performance下, 选择 <strong>Hardware - GLES 2.0</strong> 以启用 <a href="https://developer.android.com/studio/run/emulator-acceleration.html">硬件加速</a></p><p>6、验证AVD配置是否正确，然后选择 <strong>Finish</strong></p><p>7、在 Android Virtual Device Manager 中, 点击工具栏的 <strong>Run</strong>。模拟器启动并显示所选操作系统版本或设备的启动画面.</p><p>8、运行 <code>flutter run</code> 启动您的设备. 连接的设备名是 <code>Android SDK built for &lt;platform&gt;</code>，其中 <em>platform</em> 是芯片系列，如 x86</p></blockquote><h3 id="3）、在-AndroidStudio-上安装-Flutter-和-dart-插件"><a href="#3）、在-AndroidStudio-上安装-Flutter-和-dart-插件" class="headerlink" title="3）、在 AndroidStudio 上安装 Flutter 和 dart 插件"></a>3）、在 AndroidStudio 上安装 Flutter 和 dart 插件</h3><ul><li><code>Flutter</code>插件： 支持Flutter开发工作流 (运行、调试、热重载等)</li><li><code>Dart</code>插件： 提供代码分析 (输入代码时进行验证、代码补全等)</li></ul><p>要安装这些:</p><ol><li>启动 Android Studio</li><li>打开插件首选项 <strong>Preferences &gt; Plugins</strong></li><li>选择 <strong>Browse repositories…</strong>, 选择 Flutter 插件并点击 <code>install</code></li><li>重启 Android Studio 后插件生效</li></ol><p><strong>注意</strong>：当你安装 Flutter 插件后，会自动安装 Dart 插件</p><h2 id="三、创建并运行你的第一个-Flutter-应用"><a href="#三、创建并运行你的第一个-Flutter-应用" class="headerlink" title="三、创建并运行你的第一个 Flutter 应用"></a>三、创建并运行你的第一个 Flutter 应用</h2><h3 id="1）、创建新应用"><a href="#1）、创建新应用" class="headerlink" title="1）、创建新应用"></a>1）、创建新应用</h3><p>1、选择 <strong>File &gt; New Flutter Project</strong></p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3c6360e622964e47b26eb78d4d6324ae~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220112220116827" style="zoom:50%;" /><p>2、选择 <strong>Flutter</strong> 作为 project 类型, 然后点击 Next</p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9bdad331ea4c45119cdb82840793e3b1~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220112220159083" style="zoom:50%;" /><p>3、输入项目名称 (如 <code>myapp</code>)，然后点击 Next</p><p><strong>注意</strong>：Project name 字母必须都是小写，否则会提示你不能创建应用</p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5de438253adc4fb9ba333b9e0fd2f522~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220112220309504" style="zoom:50%;" /><p>4、点击 <strong>Finish</strong></p><p>5、等待 Android Studio 安装 SDK 并创建项目</p><h3 id="2）、Flutter-工程结构解析"><a href="#2）、Flutter-工程结构解析" class="headerlink" title="2）、Flutter 工程结构解析"></a>2）、Flutter 工程结构解析</h3><p>如下图就是我们创建好的一个 Flutter 项目工程结构：</p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c06e013ea6f54f208fd3e355f98639aa~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220113145050564" style="zoom:50%;" /><p>简单的解释一下：</p><table><thead><tr><th>文件</th><th>描述</th></tr></thead><tbody><tr><td>myapp</td><td>项目工程名称</td></tr><tr><td>.dart_tool</td><td>Dart 工具开发相关配置</td></tr><tr><td>.idea</td><td>Flutter 开发环境配置</td></tr><tr><td>android</td><td>Android 平台相关代码</td></tr><tr><td>ios</td><td>iOS 平台相关代码</td></tr><tr><td>lib</td><td>跨平台代码，也是 Flutter 项目主要关心的目录</td></tr><tr><td>test</td><td>测试相关代码</td></tr><tr><td>.gitignore</td><td>git 提交仓库忽略文件</td></tr><tr><td>.metadata</td><td>对当前工程的配置记录</td></tr><tr><td>.packages</td><td>以 lib 结尾的文件绝对路径</td></tr><tr><td>analysis_options.yaml</td><td>静态分析文件</td></tr><tr><td>myapp.iml</td><td>工程文件的本地路径配置</td></tr><tr><td>pubspec.lock</td><td>当前项目依赖所生成的文件</td></tr><tr><td>pubspec.yaml</td><td>项目描述文件，包含了项目的描述信息以及所需要的依赖的库</td></tr><tr><td>README.md</td><td>项目描述信息</td></tr><tr><td>External Libraries</td><td>Android 开发包，资源文件、Dart SDK 文件、工程开发依赖插件 API 等等</td></tr><tr><td>Scratches and Consoles</td><td>创建的临时文件和缓冲区列表</td></tr></tbody></table><h3 id="3）、运行应用"><a href="#3）、运行应用" class="headerlink" title="3）、运行应用"></a>3）、运行应用</h3><p>1、定位到 Android Studio 工具栏，选择运行应用的 Android 设备，我这里选择的是真机</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a722418fe13f4df8880c3d82dc8df874~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220112220957667"></p><p>2、在工具栏中点击 <strong>Run 图标</strong>，或者调用菜单项 <strong>Run &gt; Run</strong>，或者使用<code>flutter run</code> 命令来运行你的应用</p><p>3、如果一切正常, 你应该在你的设备或模拟器上会看到启动的应用：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/baf1a7e5dc404bc3b3835c3025801cf9~tplv-k3u1fbpfcp-watermark.image" alt="202201261600172.png"></p><h3 id="4）、体验热重载"><a href="#4）、体验热重载" class="headerlink" title="4）、体验热重载"></a>4）、体验热重载</h3><blockquote><p>Flutter 可以通过 <em>热重载（hot reload）</em> 实现快速效果预览，热重载就是无需重启应用程序就能实时加载修改后的代码，并且不会丢失状态（这和 webpack 的热重载是一样的）。简单的对代码进行更改，然后告诉 IDE 或命令行工具你需要重新加载（点击reload按钮），你就会在你的设备或模拟器上看到更改</p></blockquote><p>1、将字符串<code>You have pushed the button this many times:&#39;</code> 更改为<code>You have clicked the button this many times:&#39;</code></p><p>2、不要按<code>Stop</code>按钮，让你的应用继续运行</p><p>3、要查看你的更改, 只需调用<code>command + s</code>，或点击 <strong>热重载按钮</strong> (带有闪电⚡️图标的按钮) 即可</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2c2690d17dd74f8eae0da8e6ff48b409~tplv-k3u1fbpfcp-watermark.image" alt="202201261539133.png"></p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>本篇文章讲的一些重点内容：</p><p>1、Flutter 开发环境搭建</p><p>2、Flutter 在 Android 平台相关设置</p><p>3、创建并运行你的第一个 Flutter 项目，Flutter 工程结构解析</p><p>好了，本篇文章到这里就结束了，希望能给你带来帮助 🤝 </p><p><strong>感谢你阅读这篇文章</strong></p><h3 id="下篇预告"><a href="#下篇预告" class="headerlink" title="下篇预告"></a>下篇预告</h3><p>因为 Flutter 是基于 Dart 语言开发的，所以下篇文章我会讲 Dart 语言相关的内容，敬请期待吧😄</p><h3 id="参考和推荐"><a href="#参考和推荐" class="headerlink" title="参考和推荐"></a>参考和推荐</h3><p><a href="https://flutterchina.club/setup-macos/">Flutter 官方文档</a></p><p><a href="https://book.flutterchina.club/chapter1/flutter_intro.html">《Flutter实战·第二版》- Preview</a></p><blockquote><p>全文到此，原创不易，欢迎点赞，收藏，评论和转发，你的认可是我创作的动力</p></blockquote><blockquote><p>欢迎关注我的 <strong>公 众 号</strong>，微信搜索 <strong>sweetying</strong> ，文章更新可第一时间收到</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Flutter</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Flutter</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
